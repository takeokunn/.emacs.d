#+title: Configurations for GNU Emacs
#+author: takeokunn
#+email: bararararatty@gmail.com
#+startup: content
#+startup: nohideblocks
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

* はじめに
** 基本情報
   - repo: [[http://github.com/takeokunn/.emacs.d][takeokunn/.emacs.d]]
   - twitter: [[https://twitter.com/takeokunn][たけてぃ@takeokunn]]
   - blog: [[https://takeokunn.xyz][https://takeokunn.xyz]]
* boot
** Header
   #+begin_src emacs-lisp
     ;; init.el --- My init.el -*- lexical-binding: t -*-
     ;; Configurations for Emacs
     ;;                                         Takeo Obara  <bararararatty@gmail.com>
     (require 'utility-autoloads nil t)
   #+end_src
** env
   #+begin_src emacs-lisp
     (defconst my/loading-profile-p t
       "If non-nil, use built-in profiler.el.")

     (defconst my/loading-packages nil)
   #+end_src
** 起動時間計測
   #+begin_src emacs-lisp
     (defconst my/before-load-init-time (current-time))

     ;;;###autoload
     (defun my/load-init-time ()
       "Loading time of user init files including time for `after-init-hook'."
       (let ((time1 (float-time
                     (time-subtract after-init-time my/before-load-init-time)))
             (time2 (float-time
                     (time-subtract (current-time) my/before-load-init-time))))
         (message (concat "Loading init files: %.0f [msec], "
                          "of which %.f [msec] for `after-init-hook'.")
                  (* 1000 time1) (* 1000 (- time2 time1)))))
     (add-hook 'after-init-hook #'my/load-init-time t)

     (defvar my/tick-previous-time my/before-load-init-time)

     ;;;###autoload
     (defun my/tick-init-time (msg)
       "Tick boot sequence at loading MSG."
       (when my/loading-profile-p
         (let ((ctime (current-time)))
           (message "---- %5.2f[ms] %s"
                    (* 1000 (float-time
                             (time-subtract ctime my/tick-previous-time)))
                    msg)
           (setq my/tick-previous-time ctime))))
   #+end_src
   #+begin_src emacs-lisp
     (defun my/emacs-init-time ()
       "Emacs booting time in msec."
       (interactive)
       (message "Emacs booting time: %.0f [msec] = `emacs-init-time'."
                (* 1000
                   (float-time (time-subtract
                                after-init-time
                                before-init-time)))))

     (add-hook 'after-init-hook #'my/emacs-init-time)
   #+end_src
** common lispを使う
   #+begin_src emacs-lisp
     (eval-when-compile
       (require 'cl-lib nil t))
   #+end_src
** autoload-if-found
   #+begin_src emacs-lisp
     ;;;###autoload
     (defun my/load-package-p (file)
       (let ((enabled t))
         (when (boundp 'my/loading-packages)
           (dolist (package my/loading-packages)
             (let ((name (car package))
                   (flag (cdr package)))
               (when (and (stringp name)
                          (equal file name)
                          (not flag))
                 (setq enabled nil)
                 (message "--- `%s' was NOT loaded intentionally" name)))))
         enabled))

     (defvar my/skip-check-autoload-file t)

     (when (bound-and-true-p my/loading-packages)
       (setq my/skip-check-autoload-file nil))

     ;;;###autoload
     (defun autoload-if-found (functions file &optional docstring interactive type)
       "set autoload iff. FILE has found."
       (when (boundp 'my/required-libraries)
         (add-to-list 'my/required-libraries file))
       (when (or my/skip-check-autoload-file
                 (and (my/load-package-p file)
                      (locate-library file)))
         (dolist (f functions)
           (autoload f file docstring interactive type))
         t))
   #+end_src
** el-get
   #+begin_src emacs-lisp
     (eval-and-compile
       (add-to-list 'load-path (locate-user-emacs-file "el-get/el-get"))
       (with-current-buffer
           (url-retrieve-synchronously
            "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
         (goto-char (point-max))
         (eval-print-last-sexp))

       ;; config
       (setq el-get-git-shallow-clone t
             el-get-verbose nil
             el-get-silent-update t
             el-get-default-process-sync t))
   #+end_src
* Basic
** early-init
   #+BEGIN_SRC emacs-lisp
     (if (version< emacs-version "27")
         (progn
           (menu-bar-mode -1)
           (tool-bar-mode -1)
           (toggle-scroll-bar -1)))
   #+END_SRC
** スタートアップメッセージを非表示
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** 末尾のスペースを可視化する
   #+BEGIN_SRC emacs-lisp
     (setq-default show-trailing-whitespace t)

     (dolist
         (mode '(comint-mode
                 eshell-mode
                 eww-mode
                 term-mode
                 twittering-mode
                 minibuffer-inactive-mode
                 dashboard-mode))
       (add-hook (intern (concat (symbol-name mode) "-hook"))
                 '(lambda () (setq show-trailing-whitespace nil))))
   #+END_SRC
** 行番号を表示する
   #+BEGIN_SRC emacs-lisp
     (global-linum-mode t)
   #+END_SRC
** 自動生成ファイルを無効にする
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
     (setq auto-save-list-file-prefix nil)
     (setq create-lockfiles nil)
   #+END_SRC
** C-kで行削除
   #+BEGIN_SRC emacs-lisp
     (setq kill-whole-line t)
   #+END_SRC
** カッコの中をハイライトする
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode t)
     (setq-default show-paren-style 'mixed)
   #+END_SRC
** カッコが自動的に作られるようにする
   #+BEGIN_SRC emacs-lisp
     (electric-pair-mode 1)
   #+END_SRC
** time locale
   #+BEGIN_SRC emacs-lisp
     (setq system-time-locale "C")
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     (set-fontset-font t 'japanese-jisx0208 "TakaoPGothic")
     (add-to-list 'face-font-rescale-alist '(".*Takao P.*" . 0.85))
   #+END_SRC
** GC/Memory
   #+BEGIN_SRC emacs-lisp
     ;;; gcc
     (setq gc-cons-threshold (* 128 1024 1024))
     (setq garbage-collection-messages t)

     ;;; memory
     (setq read-process-output-max (* 4 1024 1024))
   #+END_SRC
** indent
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC
** ビープ音を消す
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src
** デフォルトのpathをかえる
   #+begin_src emacs-lisp
     (setq default-directory "~/")
     (setq command-line-default-directory "~/")
   #+end_src
** coding system
   #+begin_src emacs-lisp
     ;; language and locale
     (set-language-environment "Japanese")
     (setq system-time-locale "C")

     ;; coding system
     (set-default-coding-systems 'utf-8-unix)
     (prefer-coding-system 'utf-8-unix)
     (set-selection-coding-system 'utf-8-unix)

     ;; prefer-coding-system take effect equally to follows
     (set-buffer-file-coding-system 'utf-8-unix)
     (set-file-name-coding-system 'utf-8-unix)
     (set-terminal-coding-system 'utf-8-unix)
     (set-keyboard-coding-system 'utf-8-unix)
     (setq locale-coding-system 'utf-8-unix)
   #+end_src
** global-auto-revert-mode
   #+begin_src emacs-lisp
     (global-auto-revert-mode t)
   #+end_src
** yes/no to y/n
   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src
** killできないようにする
   #+begin_src emacs-lisp
     (with-current-buffer "*scratch*"
       (emacs-lock-mode 'kill))
     (with-current-buffer "*Messages*"
       (emacs-lock-mode 'kill))
   #+end_src
** confirm-save-buffers-kill-emacs
   #+begin_src emacs-lisp
     (defun confirm-save-buffers-kill-emacs (&optional arg)
       (interactive "P")
       (cond (arg (save-buffers-kill-emacs))
             (t (when (yes-or-no-p "Are you sure to quit Emacs now? ")
                  (save-buffers-kill-emacs)))))
   #+end_src
** keybind
   #+BEGIN_SRC emacs-lisp
     (keyboard-translate ?\C-h ?\C-?)

     (global-set-key (kbd "M-¥") '(lambda () (interactive) (insert "\\")))
     (global-set-key (kbd "C-h") 'backward-delete-char)
     (global-set-key (kbd "C-z") 'undo)
     (global-set-key (kbd "C-?") 'help-command)
     (global-set-key (kbd "C-m") 'set-mark-command)
     (global-set-key (kbd "C-a") 'back-to-indentation)
     (global-set-key (kbd "C-c i") 'find-function)
     (global-set-key (kbd "C-x C-o") nil)
     (global-set-key (kbd "C-x C-k") nil)
     ;; (global-set-key (kbd "C-x C-c") 'confirm-save-buffers-kill-emacs)
   #+END_SRC
* el-get
** packages
   #+begin_src emacs-lisp

   #+end_src
* Language
** el-get
   #+begin_src emacs-lisp
     (eval-and-compile
       (el-get-bundle 'clojure-mode)
       (el-get-bundle 'cmake-mode)
       (el-get-bundle 'coffee-mode)
       (el-get-bundle 'csharp-mode)
       (el-get-bundle 'csv-mode)
       (el-get-bundle 'dart-mode)
       (el-get-bundle 'dhall-mode)
       (el-get-bundle 'docker-compose-mode)
       (el-get-bundle 'dockerfile-mode)
       (el-get-bundle 'fish-mode)
       (el-get-bundle 'git-modes)
       (el-get-bundle 'glsl-mode)
       (el-get-bundle 'go-mode)
       (el-get-bundle 'gradle-mode)
       (el-get-bundle 'graphql-mode)
       ;; (el-get-bundle 'haskell-mode)
       (el-get-bundle 'js2-mode)
       (el-get-bundle 'json-mode)
       (el-get-bundle 'markdown-mode)
       (el-get-bundle 'nginx-mode)
       ;; (el-get-bundle 'php-mode)
       (el-get-bundle 'phpt-mode)
       (el-get-bundle 'plantuml-mode)
       (el-get-bundle 'prisma-mode :url "https://github.com/pimeys/emacs-prisma-mode.git")
       (el-get-bundle 'processing-mode)
       (el-get-bundle 'python-mode)
       (el-get-bundle 'ruby-mode)
       (el-get-bundle 'rust-mode)
       (el-get-bundle 'scala-mode)
       ;; (el-get-bundle 'scheme-mode)
       (el-get-bundle 'slim-mode)
       (el-get-bundle 'solidity-mode)
       (el-get-bundle 'ssh-config-mode)
       (el-get-bundle 'swift-mode)
       (el-get-bundle 'terraform-mode)
       (el-get-bundle 'toml-mode)
       (el-get-bundle 'typescript-mode)
       (el-get-bundle 'vue-mode)
       (el-get-bundle 'vimrc-mode)
       (el-get-bundle 'web-mode)
       (el-get-bundle 'yaml-mode))
   #+end_src
** c++-mode
   #+begin_src emacs-lisp
     (when (and (autoload-if-found '() 'c++-mode nil t)
                (autoload-if-found '() 'lsp-mode nil t))
       (add-hook 'c++-mode-hook 'lsp))
   #+end_src
** c-mode
   #+begin_src emacs-lisp
     (when (and (autoload-if-found '() 'c-mode nil t)
                (autoload-if-found '() 'lsp-mode nil t))
       (add-hook 'c-mode-hook 'lsp))
   #+end_src
** clojure-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'clojure-mode nil t)
       (push '("\\.clj$" . clojure-mode) auto-mode-alist)
       (push '("\\.cljs$" . clojure-mode) auto-mode-alist))
   #+END_SRC
** cmake-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'cmake-mode nil t)
       (push '("\\.cmake$" . cmake-mode) auto-mode-alist))
   #+END_SRC
** coffee-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'coffee-mode nil t)
       (push '("\\.coffee$" . coffee-mode) auto-mode-alist))
   #+END_SRC
** csharp-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'csharp-mode nil t)
       (push '("\\.cs$" . csharp-mode) auto-mode-alist))
   #+END_SRC
** csv-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'csv-mode nil t)
       (push '("\\.csv$" . csv-mode) auto-mode-alist))
   #+END_SRC
** TODO dart-mode
   #+begin_src emacs-lisp
     (when (autoload-if-found '() 'dart-mode nil t)
       ;; (push '("\\.dart$" . dart-mode) auto-mode-alist)
       ;; (define-key dart-mode-map (kbd "C-c C-o") 'dart-format-buffer)
       ;; (eval-and-compile
       ;;   (reformatter-define dart-format
       ;;     :program "dart"
       ;;     :args '("format")))
       )
   #+end_src
** dhall-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'dhall-mode nil t)
       (push '("\\.dhall$" . dhall-mode) auto-mode-alist))
   #+END_SRC
** docker-compose-mode
   #+begin_src emacs-lisp
     (when (autoload-if-found '() 'docker-compose-mode nil t)
       (push '("\\docker-compose*" . docker-compose-mode) auto-mode-alist))
   #+end_src
** dockerfile-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'dockerfile-mode nil t)
       (push '("Dockerfile\\'" . dockerfile-mode) auto-mode-alist))
   #+END_SRC
** TODO emmet-mode
   #+BEGIN_SRC emacs-lisp
     ;; (leaf emmet-mode
     ;;   :ensure t
     ;;   :after web-mode
     ;;   :hook (web-mode-hook . emmet-mode)
     ;;   ;; :config
     ;;   ;; (define-key emmet-mode-keymap (kbd "C-j") nil)
     ;;   ;; (define-key emmet-mode-keymap (kbd "M-j") 'emmet-expand-line)
     ;;   )
   #+END_SRC
** fish-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'fish-mode nil t)
       (push '("\\.fish$" . fish-mode) auto-mode-alist)
       (eval-and-compile
         (setq fish-enable-auto-indent t)))
   #+END_SRC
** git-modes
   #+begin_src emacs-lisp
     (when (autoload-if-found '() 'git-modes nil t)
       (push '("\\.dockerignore$" . git-modes) auto-mode-alist))
   #+end_src
** glsl-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'glsl-mode nil t)
       (push '("\\.vsh$" . glsl-mode) auto-mode-alist)
       (push '("\\.fsh$" . glsl-mode) auto-mode-alist))
   #+END_SRC
** go-mode
   #+BEGIN_SRC emacs-lisp
     (when (and (autoload-if-found '() 'go-mode nil t)
                (autoload-if-found '() 'lsp-mode nil t))
       (add-hook 'go-mode-hook 'lsp))
   #+END_SRC
** gradle-mode
   #+BEGIN_SRC emacs-lisp
     (when (and (autoload-if-found '() 'java-mode nil t)
                (autoload-if-found '() 'gradle-mode nil t))
       (push '("\\.gradle$" . java-mode) auto-mode-alist))
   #+END_SRC
** graphql-mode
   #+begin_src emacs-lisp
     (when (autoload-if-found '() 'graphql-mode nil t)
       (eval-and-compile
         (setq graphql-indent-level 4)))
   #+end_src
** TODO haskell-mode
   #+BEGIN_SRC emacs-lisp
     ;; (when (autoload-if-found '() 'haskell-mode nil t)
     ;;   (push '("\\.hs$" . haskell-mode) auto-mode-alist)
     ;;   (push '("\\.cable$" . haskell-mode) auto-mode-alist))
   #+END_SRC
** js2-mode
   #+BEGIN_SRC emacs-lisp
     (when (and (autoload-if-found '() 'js2-mode nil t)
                (autoload-if-found '() 'lsp-mode nil t))
       (push '("\\.js$" . js2-mode) auto-mode-alist)
       (with-eval-after-load "js2-mode"
         (add-hook 'js2-mode-hook 'js2-refactor-mode)
         (add-hook 'js2-mode-hook 'lsp)))
   #+END_SRC
** json-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'json-mode nil t)
       (push '("\\.json$" . json-mode) auto-mode-alist))
   #+END_SRC
** lisp-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'json-mode nil t)
       (push '("Cask" . lisp-mode) auto-mode-alist)
       (push '("\\.lemrc?$" . lisp-mode) auto-mode-alist))
   #+END_SRC
** TODO markdown-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'markdown-mode nil t)
       (push '("\\.md$" . markdown-mode) auto-mode-alist)
       (push '("\\.markdown$" . markdown-mode) auto-mode-alist)
       ;; (eval-and-compile
       ;;   (define-key markdown-mode-map (kbd "C-m") nil))
       )
   #+END_SRC
** nginx-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'nginx-mode nil t)
       (push '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode) auto-mode-alist))
   #+END_SRC
** TODO php-mode
   #+BEGIN_SRC emacs-lisp
     ;; (when (autoload-if-found '(php-mode) 'php-mode nil t)
     ;;   (push '("\\.php$" . php-mode) auto-mode-alist)
     ;;   (defun my/hello ()
     ;;     (interactive)
     ;;     (message "dfasdfa")))
   #+END_SRC
** phpt-mode
   #+begin_src emacs-lisp
     (when (autoload-if-found '() 'phpt-mode nil t)
       (push '("\\.phpt$" . phpt-mode) auto-mode-alist))
   #+end_src
** plantuml-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'plantuml-mode nil t)
       (push '("\\.pu$" . plantuml-mode) auto-mode-alist))
   #+END_SRC
** prisma-mode
   #+begin_src emacs-lisp
     (when (autoload-if-found '() 'prisma-mode nil t)
       )
   #+end_src
** processing-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'processing-mode nil t)
       (push '("\\.pde$" . processing-mode) auto-mode-alist)
       (eval-and-compile
         (setq-default processing-location "/opt/processing/processing-java")
         (setq-default processing-output-dir "/tmp")))
   #+END_SRC
** python-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'python-mode nil t)
       (push '("\\.py$" . python-mode) auto-mode-alist))
   #+END_SRC
** ruby-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'ruby-mode nil t)
       (push '("\\.rb$" . ruby-mode) auto-mode-alist)
       (push '("Capfile" . ruby-mode) auto-mode-alist)
       (push '("Gemfile" . ruby-mode) auto-mode-alist)
       (push '("Schemafile" . ruby-mode) auto-mode-alist)
       (push '(".pryrc" . ruby-mode) auto-mode-alist)
       (push '("Fastfile" . ruby-mode) auto-mode-alist)
       (push '("Matchfile" . ruby-mode) auto-mode-alist)
       (eval-and-compile
         (setq-default ruby-insert-encoding-magic-comment nil)))
   #+END_SRC
** rust-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'rust-mode nil t)
       (push '("\\.rs$" . rust-mode) auto-mode-alist))
   #+END_SRC
** scala-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'scala-mode nil t)
       (push '("\\.scala$" . scala-mode) auto-mode-alist))
   #+END_SRC
** TODO scheme-mode
   #+BEGIN_SRC emacs-lisp
     ;; (setq-default gosh-program-name "/usr/local/bin/gosh -i")

     ;; (general-def inferior-scheme-mode-map
     ;;   "C-p" 'comint-previous-input
     ;;   "C-n" 'comint-next-input)
   #+END_SRC
** slim-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'slim-mode nil t)
       (push '("\\.slim$" . slim-mode) auto-mode-alist))
   #+END_SRC
** solidity-mode
   #+begin_src emacs-lisp
     (when (autoload-if-found '() 'solidity-mode nil t)
       )
   #+end_src
** ssh-config-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'ssh-config-mode nil t)
            )
   #+END_SRC
** sql-mode
   #+begin_src emacs-lisp
     (when (autoload-if-found '() 'sql-mode nil t)
       (eval-and-compile
         (setq sql-indent-offset t)))
   #+end_src
** swift-mode
   #+begin_src emacs-lisp
     (when (autoload-if-found '() 'swift-mode nil t)
       )
   #+end_src
** terraform-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'terraform-mode nil t)
       )
   #+END_SRC
** toml-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'toml-mode nil t)
       (push '("\\.toml$" . toml-mode) auto-mode-alist))
   #+END_SRC
** typescript-mode
   #+BEGIN_SRC emacs-lisp
     (when (and (autoload-if-found '() 'typescript-mode nil t)
                (autoload-if-found '() 'lsp-mode nil t))
       (push '("\\.ts$" . typescript-mode) auto-mode-alist)
       (eval-and-compile
         (define-derived-mode typescript-tsx-mode typescript-mode "tsx")
         (add-to-list 'auto-mode-alist (cons (rx ".tsx" string-end) #'typescript-tsx-mode))
         (add-hook 'typescript-mode-hook 'lsp)
         (add-hook 'typescript-tsx-mode-hook 'lsp)))
   #+END_SRC
** vue-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'vue-mode nil t)
       (push '("\\.vue$" . vue-mode) auto-mode-alist))
   #+END_SRC
** vimrc-mode
   #+begin_src emacs-lisp
     (when (and (autoload-if-found '() 'vimrc-mode nil t))
       (push '("\\.vim\\(rc\\)?\\'" . vimrc-mode) auto-mode-alist))
   #+end_src
** web-mode
   #+BEGIN_SRC emacs-lisp
     (when (and (autoload-if-found '() 'web-mode nil t))
       (push '("\\.html?\\'" . web-mode) auto-mode-alist)
       (push '("\\.erb?\\'" . web-mode) auto-mode-alist)
       (push '("\\.gsp?\\'" . web-mode) auto-mode-alist))
   #+END_SRC
** yaml-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '() 'yaml-mode nil t)
       (push '("\\.ya?ml$" . yaml-mode) auto-mode-alist)
       (push '("phpstan.neon" . yaml-mode) auto-mode-alist))
   #+END_SRC
* Lisp
** el-get
   #+begin_src emacs-lisp
     (eval-and-compile
       (el-get-bundle 'paredit)
       (el-get-bundle 'rainbow-delimiters)
       (el-get-bundle 'elisp-slime-nav)
       (el-get-bundle 'nameless)
       (el-get-bundle 'cider))
   #+end_src
** Basic
*** paredit
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found
             '(enable-paredit-mode paredit-forward-barf-sexp)
             "paredit" nil t)
        (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
        (add-hook 'lisp-interacton-mode-hook 'enable-paredit-mode)
        (global-set-key (kbd "C-c f") 'paredit-forward-barf-sexp))
    #+END_SRC
*** rainbow-delimiters
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found
             '(rainbow-delimiters-mode-enable)
             "rainbow-delimiters" nil t)
        (add-hook 'prog-mode-hook 'rainbow-delimiters-mode-enable))
    #+END_SRC

** CommonLisp
*** TODO HyperSpec
    #+BEGIN_SRC emacs-lisp
      ;; (when (autoload-if-found
      ;;        '(common-lisp-hyperspec--strip-cl-package)
      ;;        "hyperspec" nil t)
      ;;   (global-set-key "C-c h" 'hyperspec-lookup)

      ;;   (defvar common-lisp-hyperspec-root "~/.roswell/HyperSpec/")
      ;;   (defvar common-lisp-hyperspec--reader-macros nil)
      ;;   (defvar common-lisp-hyperspec--format-characters nil)

      ;;   (defun common-lisp-hyperspec (symbol-name)
      ;;     (interactive (list (common-lisp-hyperspec-read-symbol-name)))
      ;;     (let ((name (common-lisp-hyperspec--strip-cl-package
      ;;                  (downcase symbol-name))))
      ;;       (cl-maplist (lambda (entry)
      ;;                     (eww-open-file (concat common-lisp-hyperspec-root "Body/"
      ;;                                            (car entry)))
      ;;                     (when (cdr entry)
      ;;                       (sleep-for 1.5)))
      ;;                   (or (common-lisp-hyperspec--find name)
      ;;                       (error "The symbol `%s' is not defined in Common Lisp"
      ;;                              symbol-name)))))

      ;;   (defun common-lisp-hyperspec-lookup-reader-macro (macro)
      ;;     (interactive
      ;;      (list
      ;;       (let ((completion-ignore-case t))
      ;;         (completing-read "Look up reader-macro: "
      ;;                          common-lisp-hyperspec--reader-macros nil t
      ;;                          (common-lisp-hyperspec-reader-macro-at-point)))))
      ;;     (eww-open-file
      ;;      (concat common-lisp-hyperspec-root "Body/"
      ;;              (gethash macro common-lisp-hyperspec--reader-macros))))

      ;;   (defun common-lisp-hyperspec-format (character-name)
      ;;     (interactive (list (common-lisp-hyperspec--read-format-character)))
      ;;     (cl-maplist (lambda (entry)
      ;;                   (eww-open-file (common-lisp-hyperspec-section (car entry))))
      ;;                 (or (gethash character-name
      ;;                              common-lisp-hyperspec--format-characters)
      ;;                     (error "The symbol `%s' is not defined in Common Lisp"
      ;;                            character-name))))

      ;;   (defadvice common-lisp-hyperspec (around common-lisp-hyperspec-around activate)
      ;;     (let ((buf (current-buffer)))
      ;;       ad-do-it
      ;;       (switch-to-buffer buf)
      ;;       (pop-to-buffer "*eww*")))

      ;;   (defadvice common-lisp-hyperspec-lookup-reader-macro (around common-lisp-hyperspec-lookup-reader-macro-around activate)
      ;;     (let ((buf (current-buffer)))
      ;;       ad-do-it
      ;;       (switch-to-buffer buf)
      ;;       (pop-to-buffer "*eww*")))

      ;;   (defadvice common-lisp-hyperspec-format (around common-lisp-hyperspec-format activate)
      ;;     (let ((buf (current-buffer)))
      ;;       ad-do-it
      ;;       (switch-to-buffer buf)
      ;;       (pop-to-buffer "*eww*"))))
    #+END_SRC
*** slime
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'slime
        (load (expand-file-name "~/.roswell/helper.el"))
        (defvar slime-net-coding-system 'utf-8-unix))
    #+END_SRC
*** TODO takeokunn/slime-history
    #+BEGIN_SRC emacs-lisp
      ;; (defun takeokunn/slime-history ()
      ;;   (interactive)
      ;;   (insert
      ;;    (completing-read
      ;;     "choice history: "
      ;;     (-distinct (read (f-read-text "~/.slime-history.eld"))))))

      ;; (general-define-key
      ;;  :keymaps 'slime-repl-mode-map
      ;;  "C-c C-r" 'takeokunn/slime-history)
    #+END_SRC
** EmacsLisp
*** elisp-slime-nav
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found
             '(elisp-slime-nav-mode) "elisp-slime-nav" nil t)
        (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
          (add-hook hook 'elisp-slime-nav-mode)))
    #+END_SRC
*** nameless
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found
                   '(nameless-mode) "nameless" nil t)
              (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
                (add-hook hook 'nameless-mode)))
    #+END_SRC
*** TODO my/ielm-history
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found '() "ielm" nil t)
        ;; (defun my/ielm-history ()
        ;;   (interactive)
        ;;   (insert
        ;;    (completing-read
        ;;     "choice history: "
        ;;     (progn
        ;;       (let ((history nil)
        ;;             (comint-input-ring nil))
        ;;         (dotimes (index (ring-length comint-input-ring))
        ;;           (push (ring-ref comint-input-ring index) history))
        ;;         history)))))
        )
    #+END_SRC
** Clojure
*** cider
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found
             '() "cider" nil t))
    #+END_SRC
* Awesome Package
** Theme
*** el-get
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle 'dashboard)
        (el-get-bundle 'all-the-icons)
        (el-get-bundle 'all-the-icons-dired)
        ;; (el-get-bundle 'all-the-icons-ivy)
        ;; (el-get-bundle 'doom-theme)
        ;; (el-get-bundle 'doom-modeline)
        (el-get-bundle 'nyan-mode)
        ;; (el-get-bundle 'tab-mode)
        )
    #+end_src
*** dashboard
    #+begin_src emacs-lisp
      (when (autoload-if-found '() 'dashboard nil t)
        (dashboard-setup-startup-hook))
    #+end_src
*** all-the-icons
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found '() 'all-the-icons nil t)
        ;; do something
        )
    #+END_SRC
*** all-the-icons-dired
    #+begin_src emacs-lisp
      (when (autoload-if-found '() 'all-the-icons-dired nil t)
        (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
    #+end_src
*** TODO all-the-icons-ivy
    #+BEGIN_SRC emacs-lisp
      ;; (leaf all-the-icons-ivy
      ;;   :if window-system
      ;;   :ensure t
      ;;   :after all-the-icons
      ;;   :config
      ;;   (all-the-icons-ivy-setup))
    #+END_SRC
*** TODO doom-theme
    #+BEGIN_SRC emacs-lisp
      (load-theme 'tango-dark t)

      (when (autoload-if-found '() "doom-themes" nil t)
        )
    #+END_SRC
*** TODO doom-modeline
    #+BEGIN_SRC emacs-lisp
      ;; (leaf doom-modeline
      ;;   :ensure t
      ;;   :hook (after-init-hook)
      ;;   :custom ((doom-modeline-buffer-file-name-style . 'truncate-with-project)
      ;;            (doom-modeline-icon . t)
      ;;            (doom-modeline-major-mode-icon . nil)
      ;;            (doom-modeline-minor-modes . nil))
      ;;   :config
      ;;   (line-number-mode 0)
      ;;   (column-number-mode 0))
    #+END_SRC
*** TODO hl-line
    #+BEGIN_SRC emacs-lisp
      ;; (leaf hl-line
      ;;   :ensure t
      ;;   :init
      ;;   (global-hl-line-mode)
      ;;   :config
      ;;   (set-face-background 'hl-line "#444642")
      ;;   (set-face-attribute 'hl-line nil :inherit nil))
    #+END_SRC
*** TODO neotree
    #+BEGIN_SRC emacs-lisp
      ;; (leaf neotree
      ;;   :ensure t
      ;;   :after all-the-icons
      ;;   :custom (neo-theme quote nerd2)
      ;;   :setq-default ((neo-show-hidden-files . t)
      ;;                  (neo-window-fixed-size))
      ;;   :config
      ;;   (defun takeokunn/neotree-toggle ()
      ;;     (interactive)
      ;;     (let ((default-directory (locate-dominating-file default-directory ".git")))
      ;;       (neotree-toggle)))
      ;;   (if window-system
      ;;       (defun neo-buffer--insert-fold-symbol (name &optional file-name)
      ;;         (or
      ;;          (and
      ;;           (equal name 'open)
      ;;           (insert
      ;;            (all-the-icons-icon-for-dir file-name "down")))
      ;;          (and
      ;;           (equal name 'close)
      ;;           (insert
      ;;            (all-the-icons-icon-for-dir file-name "right")))
      ;;          (and
      ;;           (equal name 'leaf)
      ;;           (insert
      ;;            (format "			%s	"
      ;;                    (all-the-icons-icon-for-file file-name)))))))
      ;;   :bind ("C-q" . takeokunn/neotree-toggle))
    #+END_SRC
*** nyan-mode
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found '() 'nyan-mode nil t)
        (eval-and-compile
          (setq nyan-cat-face-number 4)
          (setq nyan-animate-nyancat t)))
    #+END_SRC
*** TODO tab-mode
    #+begin_src emacs-lisp
      ;; (leaf tab-bar-mode
      ;;   :after ivy
      ;;   :bind
      ;;   (("C-x t n" . tab-next)
      ;;    ("C-x t b" . tab-bar-switch-to-tab))
      ;;   :config
      ;;   (tab-bar-mode 1)
      ;;   ;; ivy integration
      ;;   (defun advice-completing-read-to-ivy (orig-func &rest args)
      ;;     (interactive
      ;;      (let* ((recent-tabs (mapcar (lambda (tab)
      ;;                                    (alist-get 'name tab))
      ;;                                  (tab-bar--tabs-recent))))
      ;;        (list (ivy-completing-read "Switch to tab by name (default recent): "
      ;;                                   recent-tabs nil nil nil nil recent-tabs))))
      ;;     (apply orig-func args))
      ;;   (advice-add #'tab-bar-switch-to-tab :around #'advice-completing-read-to-ivy))
    #+end_src
** Refactor
*** el-get
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle 'emr))
    #+end_src
*** emr
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found
             '()
             "emr" nil t)
        (define-key prog-mode-map (kbd "M-RET") 'emr-show-refactor-menu))
    #+END_SRC
** Completion
*** el-get
    #+begin_src emacs-lisp
      (eval-and-compile
        ;; company
        (el-get-bundle 'company)
        ;; (el-get-bundle 'company-box)
        (el-get-bundle 'company-dockerfile :url "https://github.com/takeokunn/company-dockerfile.git")
        ;; (el-get-bundle 'company-glsl)
        ;; (el-get-bundle 'company-go)
        ;; (el-get-bundle 'company-php)
        ;; (el-get-bundle "company-slime")
        (el-get-bundle 'company-c-headers)
        (el-get-bundle 'company-shell :url "https://github.com/takeokunn/company-shell.git")
        ;; (el-get-bundle 'company-solidity)
        ;; (el-get-bundle 'company-terraform)
        )
    #+end_src
*** company
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found
             '()
             'company nil t)
        (eval-and-compile
          (global-company-mode)
          (add-to-list 'company-backends 'company-yasnippet)
          (define-key company-active-map (kbd "C-n") 'company-select-next)
          (define-key company-active-map (kbd "C-p") 'company-select-previous)))
    #+END_SRC
*** TODO company-box
    #+begin_src emacs-lisp
      ;; (when (autoload-if-found '() 'company-box nil t)
      ;;   (eval-and-compile
      ;;     (push 'company-box company-backends)))
    #+end_src
*** TODO company-dockerfile
    #+begin_src emacs-lisp
      ;; (when (and (require 'company nil t)
      ;;            (require 'company-dockerfile nil t))
      ;;   (push 'company-dockerfile company-backends))
    #+end_src
*** TODO company-glsl
    #+BEGIN_SRC emacs-lisp
      ;; (when (autoload-if-found '() "company-glsl" nil t)
      ;;   (eval-and-compile
      ;;     (push 'company-glsl company-backends)))
    #+END_SRC
*** TODO company-go
    #+begin_src emacs-lisp
      ;; (when (autoload-if-found '() "company-go" nil t)
      ;;   (eval-and-compile
      ;;     (push 'company-go company-backends)))
    #+end_src
*** TODO company-php
    #+begin_src emacs-lisp
      ;; (when (autoload-if-found '() "company-php" nil t)
      ;;   (eval-and-compile
      ;;     (push 'company-ac-php-backend company-backends)))
    #+end_src
*** TODO company-slime
    #+begin_src emacs-lisp
      ;; (when (autoload-if-found '() "company-slime" nil t)
      ;;   (eval-and-compile
      ;;     (setq slime-company-completion 'fuzzy)
      ;;     (setq slime-company-after-completion 'slime-company-just-one-space)
      ;;     ;; (slime-setup '(slime-fancy slime-banner slime-company))
      ;;     ))
    #+end_src
*** company-c-headers
    #+begin_src emacs-lisp
      (when (autoload-if-found '() 'company-c-headers nil t)
        (eval-and-compile
          (push 'company-c-headers company-backends)))
    #+end_src
*** company-shell
    #+begin_src emacs-lisp
      (when (autoload-if-found '() 'company-shell nil t)
        (eval-and-compile
          (push 'company-shell company-backends)
          (push 'company-shell-env company-backends)
          (push 'company-fish-shell company-backends)))
    #+end_src
*** TODO company-solidity
    #+begin_src emacs-lisp
      ;; (when (autoload-if-found '() "company-solidity" nil t)
      ;;   (add-to-list 'company-backends 'company-solidity))
    #+end_src
*** TODO company-terraform
    #+begin_src emacs-lisp
      ;; (when (autoload-if-found '() "company-terraform" nil t)
      ;;   (add-to-list 'company-backends 'company-terraform))
    #+end_src
** Snippet
*** el-get
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle 'yasnippet))
    #+end_src
*** yasnippet
    snippetはこちら [[https://takeokunn.github.io/.emacs.d/yasnippets.html][https://takeokunn.github.io/.emacs.d/yasnippets.html]]
    #+begin_src emacs-lisp
      (when (autoload-if-found '() 'yasnippet nil t)
        (eval-and-compile
          (yas-global-mode 1)
          (setq yas-snippet-dirs '("~/.emacs.d/yasnippets"))))
    #+end_src
*** TODO ivy-yasnippet
    #+begin_src emacs-lisp
      ;; (leaf ivy-yasnippet
      ;;   :ensure t
      ;;   :after (yasnippet ivy)
      ;;   :bind (("C-c y" . ivy-yasnippet)
      ;;          ("C-c C-y" . ivy-yasnippet)))
    #+end_src
** LSP
*** el-get
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle 'lsp-mode)
        (el-get-bundle 'lsp-ui)
        (el-get-bundle 'lsp-dart))
    #+end_src
*** lsp-mode
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found '() 'lsp-mode nil t)
        (eval-and-compile
          (setq lsp-keymap-prefix "C-c l")
          (setq lsp-completion-provider t))

        (with-eval-after-load 'company
          (push 'company-capf company-backends)))
    #+END_SRC
*** lsp-ui
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found '(lsp-ui-mode) "lsp-ui" nil t)
        (with-eval-after-load "lsp-mode"
          (eval-and-compile
            (add-hook 'lsp-mode-hook 'lsp-ui-mode)
            (setq lsp-ui-doc-enable t)
            (setq lsp-ui-doc-max-height 15)
            (setq lsp-ui-sideline-enable nil)
            (setq lsp-ui-imenu-enable nil)
            (setq lsp-ui-sideline-enable nil))))
    #+END_SRC
*** TODO lsp-dart
    #+begin_src emacs-lisp
      (when (autoload-if-found '() "lsp-ui" nil t)
        (with-eval-after-load "lsp-dart"
          ))
    #+end_src
** DAP
*** el-get
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle 'dap-mode))
    #+end_src
*** TODO dap-mode
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found '(dap-breakpoint-toggle) "dap-mode" nil t)
        (with-eval-after-load "dap-mode"
          ;; (define-key dap-mode-map (kbd "C-c d") 'dap-breakpoint-toggle)
          (add-hook 'dap-stopped-hook
                    (lambda () (call-interactively #'dap-hydra)))
          (dap-mode 1)
          (dap-ui-mode 1)
          (dap-auto-configure-mode 1)))
    #+END_SRC
** Git
*** magit
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found '() "magit" nil t)
        ;; (with-eval-after-load "magit"
        ;;   (setq magit-refresh-status-buffer nil))
        )
    #+END_SRC
*** TODO magit-forge
    #+begin_src emacs-lisp
      ;; (leaf forge
      ;;   :disabled t
      ;;   :ensure t
      ;;   :after magit
      ;;   :setq
      ;;   (browse-url-browser-function . 'browse-url-default-browser))

      ;; (when (autoload-if-found '() "forge" nil t)
      ;;   (with-eval-after-load "keypression"
      ;;     (setq keypression-use-child-frame t)
      ;;     (setq keypression-frames-maxnum 3)
      ;;     (setq keypression-fade-out-delay 1.5)
      ;;     (setq keypression-font "Monaco")
      ;;     (setq keypression-font-face-attribute
      ;;           '(:width normal :height 200 :weight bold))
      ;;     ;; (progn
      ;;     ;;   (setq keypression-frame-origin 'keypression-origin-top-left)
      ;;     ;;   (setq keypression-x-offset -10)
      ;;     ;;   (setq keypression-y-offset +10))
      ;;     (progn
      ;;       (setq keypression-x-offset +8)
      ;;       (setq keypression-y-offset +16))
      ;;     (add-hook 'keypression-mode-hook #'dimmer-permanent-off)
      ;;     ;; (keypression-mode 1) ;; To start, M-x keypression-mode
      ;;     ))
    #+end_src
** TODO Search
*** TODO swiper
    #+BEGIN_SRC emacs-lisp
      ;; (leaf ivy
      ;;   :ensure t
      ;;   :custom (ivy-use-virtual-buffers . t)
      ;;   :config
      ;;   (ivy-mode 1)
      ;;   (ivy-configure 'counsel-M-x :sort-fn 'ivy--sort-by-length))

      ;; (leaf counsel
      ;;   :ensure t
      ;;   :init
      ;;   (eval-and-compile
      ;;     (defun takeokunn/counsel-rg ()
      ;;       (interactive)
      ;;       (let ((symbol (thing-at-point 'symbol 'no-properties))
      ;;             (default-directory (locate-dominating-file default-directory ".git")))
      ;;         (counsel-rg symbol)))
      ;;     (defun takeokunn/counsel-fzf ()
      ;;       (interactive)
      ;;       (let ((default-directory (locate-dominating-file default-directory ".git")))
      ;;         (counsel-fzf))))
      ;;   :bind
      ;;   (("C-x m" . counsel-compile)
      ;;    ("C-c k" . takeokunn/counsel-rg)
      ;;    ("M-p" . takeokunn/counsel-fzf))
      ;;   :config
      ;;   (counsel-mode 1))

      ;; (leaf swiper
      ;;   :ensure t
      ;;   :init
      ;;   (eval-and-compile
      ;;     (defun takeokunn/swiper ()
      ;;       (interactive)
      ;;       (let ((word (thing-at-point 'symbol 'no-properties)))
      ;;         (swiper word))))
      ;;   :bind (("C-o" . takeokunn/swiper)))
    #+END_SRC
*** TODO ivy-ghq
    #+BEGIN_SRC emacs-lisp
      ;; (leaf ivy-ghq
      ;;   :el-get (ivy-ghq
      ;;            :url "https://github.com/analyticd/ivy-ghq.git"
      ;;            :features ivy-ghq)
      ;;   :preface
      ;;   (defun takeokunn/ivy-ghq-open-and-fzf ()
      ;;     (interactive)
      ;;     (ivy-ghq-open)
      ;;     (counsel-fzf))
      ;;   :after counsel
      ;;   :custom ((ivy-ghq-short-list . t))
      ;;   :defun ivy-ghq-open takeokunn/ivy-ghq-open-and-fzf)

      ;; (general-define-key
      ;;  "M-o" 'takeokunn/ivy-ghq-open-and-fzf)
    #+END_SRC
*** TODO ivy-rich
    #+BEGIN_SRC emacs-lisp
      ;; (leaf ivy-rich
      ;;   :ensure t
      ;;   :after counsel
      ;;   :config
      ;;   (ivy-rich-mode 1))
    #+END_SRC
** TODO Shell
*** TODO exec-path-from-shell
    #+BEGIN_SRC emacs-lisp
      ;; (leaf exec-path-from-shell
      ;;   :ensure t
      ;;   :defun (exec-path-from-shell-initialize)
      ;;   :hook ((after-init-hook . exec-path-from-shell-initialize))
      ;;   :custom
      ;;   (exec-path-from-shell-variables . '("PATH"
      ;;                                       "GEM_HOME"
      ;;                                       "GOROOT"
      ;;                                       "GOPATH")))
    #+END_SRC
** TODO Rust
*** TODO racer
    #+BEGIN_SRC emacs-lisp
      ;; (leaf racer
      ;;   :ensure t
      ;;   :after rust-mode
      ;;   :hook (rust-mode-hook
      ;;          (racer-mode-hook . eldoc-mode)))
    #+END_SRC
*** TODO rustic
    #+BEGIN_SRC emacs-lisp
      ;; (leaf rustic
      ;;   :ensure t
      ;;   :after (rust-mode))
    #+END_SRC
** TODO Cpp
*** TODO clang-format
    #+begin_src emacs-lisp
      ;; (leaf clang-format
      ;;   :ensure t
      ;;   :hook (before-save-hook . (lambda ()
      ;;                               (when (member major-mode '(c-mode c++-mode))
      ;;                                 (clang-format-buffer)))))
    #+end_src
*** TODO inferior-cling
    #+begin_src emacs-lisp
      ;; (leaf inferior-cling
      ;;   :el-get (inferior-cling
      ;;            :url "https://github.com/brianqq/inferior-cling.git"
      ;;            :features cling))
    #+end_src
** TODO C#
*** TODO omnisharp
    #+BEGIN_SRC emacs-lisp
      ;; (leaf omnisharp
      ;;   :ensure t
      ;;   :after company flycheck
      ;;   :hook (csharp-mode-hook . flycheck-mode)
      ;;   :config
      ;;   (add-to-list 'company-backends 'company-omnisharp))
    #+END_SRC
** TODO JavaScript/TypeScript
*** TODO js2-refactor
    #+BEGIN_SRC emacs-lisp
      ;; (leaf js2-refactor
      ;;   :ensure t
      ;;   :after typescript-mode js2-mode
      ;;   :hook (js2-mode-hook typescript-mode-hook))
    #+END_SRC
*** TODO tree-sitter
    #+begin_src emacs-lisp
      ;; (leaf tree-sitter
      ;;   :ensure (t tree-sitter-langs)
      ;;   :after typescript-mode
      ;;   :require tree-sitter-langs
      ;;   :hook (typescript-tsx-mode-hook . tree-sitter-hl-mode)
      ;;   :config
      ;;   (global-tree-sitter-mode)

      ;;   ;; for tsx
      ;;   (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx))
      ;;   (tree-sitter-hl-add-patterns 'tsx
      ;;     [(call_expression
      ;;       ;; styled.div``
      ;;       function: (member_expression
      ;;                  object: (identifier) @function.call
      ;;                  (.eq? @function.call "styled"))
      ;;       arguments: ((template_string) @property.definition
      ;;                   (.offset! @property.definition 0 1 0 -1)))
      ;;      (call_expression
      ;;       ;; styled(Component)``
      ;;       function: (call_expression
      ;;                  function: (identifier) @function.call
      ;;                  (.eq? @function.call "styled"))
      ;;       arguments: ((template_string) @property.definition
      ;;                   (.offset! @property.definition 0 1 0 -1)))]))
    #+end_src
*** TODO styled-components
    #+begin_src emacs-lisp
      ;; (leaf fence-edit
      ;;   ;; :ensure t
      ;;   :after (css-mode rx ov)
      ;;   :el-get (fence-edit
      ;;            :url "https://github.com/aaronbieber/fence-edit.el.git"
      ;;            :features fence-edit)
      ;;   :setq
      ;;   ((styled-component-start . (rx-to-string '(: (1+ (and (+ word) (0+ "\.") (0+ "(" (+ alpha) ")"))) "`" eol)))
      ;;    (styled-component-end . (rx-to-string '(: "`;" eol)))
      ;;    (styled-component-region . (rx-to-string '(: (minimal-match
      ;;                                                  (seq
      ;;                                                   (and (1+ (and (+ word) (0+ "\.") (0+ "(" (+ alpha) ")"))) "`")
      ;;                                                   (or "\n" "\r")
      ;;                                                   (0+ (+ any) (or "\n" "\r"))
      ;;                                                   (and "`;" eol))))))
      ;;    (fence-edit-blocks . `((,styled-component-start ,styled-component-end)))
      ;;    (fence-edit-default-mode . 'css-mode))
      ;;   :config
      ;;   (defun takeokunn/get-component ()
      ;;     "Get current buffer styled components."
      ;;     (interactive)
      ;;     (let (matches match beg end)
      ;;       (save-match-data
      ;;         (save-excursion
      ;;           (goto-char (point-min))
      ;;           (while (search-forward-regexp styled-component-region nil t 1)
      ;;             (setq match (match-string-no-properties 0))
      ;;             (setq beg (match-beginning 0))
      ;;             (setq end (match-end 0))
      ;;             (push (list beg end match) matches))))
      ;;       (reverse matches))))
    #+end_src
** TODO Haskell
*** TODO hindent
    #+BEGIN_SRC emacs-lisp
      ;; (leaf hindent
      ;;   :ensure t
      ;;   :after haskell-mode
      ;;   :hook (haskell-mode-hook))
    #+END_SRC
** TODO Ruby
*** TODO robe
    #+begin_src emacs-lisp
      ;; (leaf robe
      ;;   :ensure t
      ;;   :after ruby-mode company
      ;;   :hook (ruby-mode-hook)
      ;;   :config
      ;;   (push 'company-robe company-backends))
    #+end_src
*** TODO rubocop
    #+begin_src emacs-lisp
      ;; (leaf rubocop
      ;;   :ensure t
      ;;   :after ruby-mode
      ;;   :hook (ruby-mode-hook))
    #+end_src
*** TODO ruby-refactor
    #+BEGIN_SRC emacs-lisp
      ;; (leaf ruby-refactor
      ;;   :ensure t
      ;;   :hook ((ruby-mode-hook . ruby-refactor-mode-launch)))
    #+END_SRC
*** TODO inf-ruby
    #+BEGIN_SRC emacs-lisp
      ;; (leaf inf-ruby
      ;;   :config
      ;;   (defun takeokunn/irb-history ()
      ;;     (interactive)
      ;;     (insert
      ;;      (completing-read
      ;;       "choose history: "
      ;;       (mapcar #'list (-distinct (s-lines (f-read-text "~/.irb_history")))))))
      ;;   :bind
      ;;   (:inf-ruby-mode-map
      ;;    ("C-c C-r" . takeokunn/irb-history)))
    #+END_SRC

** TODO SQL
*** TODO sql-indent
    #+BEGIN_SRC emacs-lisp
      ;; (leaf sql-indent
      ;;   :ensure t
      ;;   :after sql-mode
      ;;   :hook (sql-mode-hook . sqlind-minor-mode))
    #+END_SRC
** TODO php
*** TODO phpactor
    #+begin_src emacs-lisp
      ;; (leaf phpactor
      ;;   :ensure t
      ;;   :disabled t
      ;;   :after (f php-mode smart-jump)
      ;;   :bind
      ;;   (:php-mode-map
      ;;    ("M-." . phpactor-goto-definition)
      ;;    ("M-?" . phpactor-find-references))
      ;;   :setq
      ;;   ((eldoc-documentation-function . 'phpactor-hover)
      ;;    (phpactor-history-size . 100000))
      ;;   :config
      ;;   (phpactor-smart-jump-register))
    #+end_src
*** TODO psysh
    #+begin_src emacs-lisp
      ;; (leaf psysh
      ;;   :ensure t
      ;;   :after (php-mode))
    #+end_src
** TODO Markdown
*** TODO poly-markdown
    #+begin_src emacs-lisp
      ;; (leaf poly-markdown
      ;;   :ensure t
      ;;   :config
      ;;   (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode)))
    #+end_src
** TODO Fish
*** TODO fish-repl
    #+begin_src emacs-lisp
      ;; (leaf fish-repl
      ;;   :el-get (fish-repl.el
      ;;            :url "https://github.com/takeokunn/fish-repl.el.git"))
    #+end_src
** TODO File
*** TODO recentf
    #+BEGIN_SRC emacs-lisp
      ;; (leaf recentf
      ;;   :ensure t
      ;;   :setq-default ((recentf-max-saved-items . 10000)
      ;;                  (recentf-auto-cleanup quote never)
      ;;                  (recentf-save-file . "~/.emacs.d/.recentf")
      ;;                  (recentf-exclude quote
      ;;                                   (".recentf")))
      ;;   :config
      ;;   (recentf-mode 1))
    #+END_SRC
*** TODO open-junk-file
    #+BEGIN_SRC emacs-lisp
      ;; (leaf open-junk-file
      ;;   :ensure t
      ;;   :bind
      ;;   ("C-x j" . open-junk-file)
      ;;   :custom (open-junk-file-format . `,(locate-user-emacs-file ".junk/%Y-%m%d-%H%M%S.")))
    #+END_SRC
** TODO Check
*** TODO flycheck
    #+begin_src emacs-lisp
      ;; (leaf flycheck
      ;;   :ensure t
      ;;   :after ruby-mode
      ;;   :hook ((ruby-mode-hook . flycheck-mode)
      ;;          (org-mode-hook . flycheck-mode)))
    #+end_src
*** TODO flycheck-textlint
    #+begin_src emacs-lisp
      ;; (leaf flycheck-textlint
      ;;   :after flycheck
      ;;   :config
      ;;   (flycheck-define-checker textlint
      ;;     "A linter for Markdown."
      ;;     :command ("textlint" "--format" "unix" source)
      ;;     :error-patterns
      ;;     ((warning line-start (file-name) ":" line ":" column ": "
      ;;               (id (one-or-more (not (any " "))))
      ;;               (message (one-or-more not-newline)
      ;;                        (zero-or-more "\n" (any " ") (one-or-more not-newline)))
      ;;               line-end))
      ;;     :modes (text-mode markdown-mode))
      ;;   (add-to-list 'flycheck-checkers 'textlint))
    #+end_src
*** TODO flycheck-solidity
    #+begin_src emacs-lisp
      ;; (leaf solidity-flycheck
      ;;   :ensure t
      ;;   :after (solidity-mode flycheck)
      ;;   :hook
      ;;   (solidity-mode-hook . flycheck-mode)
      ;;   :custom
      ;;   (solidity-flycheck-solc-checker-active . t))
    #+end_src
** TODO Cursor
*** TODO smartrep/multiple-cursors
    #+BEGIN_SRC emacs-lisp
      ;; (leaf smartrep :ensure t)

      ;; (leaf multiple-cursors
      ;;   :ensure t
      ;;   :defun (smartrep-define-key . smartrep)
      ;;   :after smartrep
      ;;   :config
      ;;   (global-unset-key (kbd "C-t"))
      ;;   (smartrep-define-key global-map "C-t"
      ;;     '(("C-t" quote mc/mark-next-like-this)
      ;;       ("n" quote mc/mark-next-like-this)
      ;;       ("p" quote mc/mark-previous-like-this)
      ;;       ("m" quote mc/mark-more-like-this-extended)
      ;;       ("u" quote mc/unmark-next-like-this)
      ;;       ("U" quote mc/unmark-previous-like-this)
      ;;       ("s" quote mc/skip-to-next-like-this)
      ;;       ("S" quote mc/skip-to-previous-like-this)
      ;;       ("*" quote mc/mark-all-like-this)
      ;;       ("d" quote mc/mark-all-like-this-dwim)
      ;;       ("i" quote mc/insert-numbers)
      ;;       ("o" quote mc/sort-regions)
      ;;       ("O" quote mc/reverse-regions))))
    #+END_SRC
*** TODO smooth-scroll
    #+BEGIN_SRC emacs-lisp
      ;; (leaf smooth-scroll
      ;;   :ensure t
      ;;   :commands smooth-scroll-mode
      ;;   :config
      ;;   (smooth-scroll-mode 1))
    #+END_SRC
** TODO Other
*** el-get
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle 'esup))
    #+end_src
*** TODO auto-save-buffers-enhanced
    #+begin_src emacs-lisp
      ;; (leaf auto-save-buffers-enhanced
      ;;   :ensure t
      ;;   :setq
      ;;   (auto-save-buffers-enhanced-interval . 10)
      ;;   :config
      ;;   (auto-save-buffers-enhanced t))
    #+end_src
*** TODO amx
    #+BEGIN_SRC emacs-lisp
      ;; (leaf amx :ensure t)
    #+END_SRC
*** TODO avy
    #+begin_src emacs-lisp
      ;; (leaf avy
      ;;   :ensure t
      ;;   :bind (("C-:" . avy-goto-char-timer)))

      ;; (leaf avy-zap
      ;;   :ensure t
      ;;   :after avy
      ;;   :bind (("M-z" . avy-zap-up-to-char-dwim)))
    #+end_src
*** TODO define-word
    #+begin_src emacs-lisp
      ;; (leaf define-word
      ;;   :ensure t
      ;;   :custom
      ;;   (define-word-default-service . 'wordnik)
      ;;   (define-word-displayfn-alist
      ;;     '((wordnik . takeokunn/define-word--display-in-buffer)
      ;;       (openthesaurus . takeokunn/define-word--display-in-buffer)
      ;;       (webster . takeokunn/define-word--display-in-buffer)
      ;;       (weblio . takeokunn/define-word--display-in-buffer)))
      ;;   :config
      ;;   (defun takeokunn/define-word--display-in-buffer (definition)
      ;;     "docstring"
      ;;     (let* ((buf-name "*DEFINE WORD*")
      ;;            (buffer (get-buffer-create buf-name))
      ;;            (display-buffer-alist
      ;;             `((,buf-name
      ;;                (display-buffer-same-window)))))
      ;;       (with-current-buffer buffer
      ;;         (read-only-mode -1)
      ;;         (erase-buffer)
      ;;         (insert definition)
      ;;         (goto-char (point-min))
      ;;         (save-excursion (xml-parse-string))
      ;;         (read-only-mode 1)
      ;;         (buffer-face-set 'woman-buffer))
      ;;       (display-buffer buffer)))
      ;;   (defun takeokunn/define-word ()
      ;;     (interactive)
      ;;     (if (use-region-p)
      ;;         (call-interactively #'define-word-at-point)
      ;;       (call-interactively #'define-word))))
    #+end_src
*** TODO ddskk
    #+BEGIN_SRC emacs-lisp
      ;; (leaf ddskk
      ;;   :ensure t
      ;;   :bind
      ;;   ("C-x C-j" . skk-mode)
      ;;   :custom
      ;;   (skk-byte-compile-init-file . t)
      ;;   (skk-isearch-mode-enable . 'always)
      ;;   :setq
      ;;   (skk-preload . t)
      ;;   (default-input-method . "japanese-skk"))
    #+END_SRC
*** TODO editorconfig
    #+BEGIN_SRC emacs-lisp
      ;; (leaf editorconfig
      ;;   :ensure t
      ;;   :config
      ;;   (editorconfig-mode 1))
    #+END_SRC
*** esup
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found '() 'esup nil t)
        )
    #+END_SRC
*** TODO elfeed
    #+begin_src emacs-lisp
      ;; (leaf elfeed
      ;;   :ensure t
      ;;   :bind
      ;;   ("C-x w" . elfeed)
      ;;   :defvar elfeed-search-filter
      ;;   :setq
      ;;   (elfeed-search-filter . "@3-days-ago +unread")
      ;;   :custom
      ;;   (browse-url-browser-function . 'eww-browse-url))

      ;; (leaf elfeed-org
      ;;   :ensure t
      ;;   :after elfeed
      ;;   :custom
      ;;   (rmh-elfeed-org-files . '("~/.emacs.d/elfeed.org"))
      ;;   :config
      ;;   (elfeed-org))
    #+end_src
*** TODO font-lock-studio
    #+BEGIN_SRC emacs-lisp
      ;; (leaf font-lock-studio :ensure t)
    #+END_SRC
*** TODO google-this
    #+BEGIN_SRC emacs-lisp
      ;; (leaf google-this
      ;;   :ensure t
      ;;   :bind
      ;;   ("M-g" . google-this))
    #+END_SRC
*** TODO grugru
    #+begin_src emacs-lisp
      ;; (leaf grugru
      ;;   :ensure t
      ;;   :disabled t
      ;;   :bind
      ;;   ("C-;" . grugru)
      ;;   :config
      ;;   (grugru-default-setup))
    #+end_src
*** TODO goto-addr
    #+BEGIN_SRC emacs-lisp
      ;; (leaf goto-addr
      ;;   :ensure t
      ;;   :commands goto-address-prog-mode goto-address-mode
      ;;   :hook ((prog-mode-hook . goto-address-prog-mode)
      ;;          (text-mode-hook . goto-address-mode)))
    #+END_SRC
*** TODO helpful
    #+BEGIN_SRC emacs-lisp
      ;; (leaf helpful
      ;;   :ensure t
      ;;   :after counsel
      ;;   :bind
      ;;   (("C-? f" . helpful-callable)
      ;;    ("C-? v" . helpful-variable)
      ;;    ("C-? k" . helpful-key)
      ;;    ("C-? C-d" . helpful-at-point)
      ;;    ("C-? F" . helpful-function)
      ;;    ("C-? C" . helpful-command))
      ;;   :custom ((counsel-describe-function-function function helpful-callable)
      ;;            (counsel-describe-variable-function function helpful-variable)))
    #+END_SRC
*** TODO htmlize
    #+begin_src emacs-lisp
      ;; (leaf htmlize :ensure t)
    #+end_src
*** TODO keyfreq
    #+begin_src emacs-lisp
      ;; (leaf keyfreq
      ;;   :ensure t
      ;;   :config
      ;;   (keyfreq-mode 1)
      ;;   (keyfreq-autosave-mode 1))
    #+end_src
*** TODO lorem ipsum
    #+begin_src emacs-lisp
      ;; (leaf lorem-ipsum
      ;;   :ensure t
      ;;   :bind
      ;;   (("C-c C-l s" . lorem-ipsum-insert-sentences)
      ;;    ("C-c C-l p" . lorem-ipsum-insert-paragraphs)
      ;;    ("C-c C-l l" . lorem-ipsum-insert-list)))
    #+end_src
*** TODO origami
    #+begin_src emacs-lisp
      ;; (leaf origami
      ;;   :ensure t
      ;;   :hook (prog-mode-hook . origami-mode)
      ;;   :bind (("C-c C-t" . origami-recursively-toggle-node)
      ;;          ("C-c t" . origami-recursively-toggle-node))
      ;;   :init
      ;;   (global-origami-mode))
    #+end_src
*** TODO popwin
    #+begin_src emacs-lisp
      ;; (leaf popwin
      ;;   :ensure t
      ;;   :init
      ;;   (popwin-mode 1))
    #+end_src
*** TODO smartparens
    #+BEGIN_SRC emacs-lisp
      ;; (leaf smartparens :ensure t)
    #+END_SRC
*** TODO smart-jump
    #+begin_src emacs-lisp
      ;; (leaf smart-jump
      ;;   :ensure t)
    #+end_src
*** TODO subword
    #+begin_src emacs-lisp
      ;; (leaf subword
      ;;   :config
      ;;   (defun takeokunn/delete-forward-block ()
      ;;     (interactive)
      ;;     (if (eobp)
      ;;         (message "End of buffer")
      ;;       (let* ((syntax-move-point
      ;;               (save-excursion
      ;;                 (skip-syntax-forward (string (char-syntax (char-after))))
      ;;                 (point)))
      ;;              (subword-move-point
      ;;               (save-excursion
      ;;                 (subword-forward)
      ;;                 (point))))
      ;;         (kill-region (point) (min syntax-move-point subword-move-point)))))
      ;;   :bind (("M-d" . takeokunn/delete-forward-block)))

    #+end_src
*** TODO undo
    #+begin_src emacs-lisp
      ;; (leaf undo-tree
      ;;   :ensure t
      ;;   :config (global-undo-tree-mode))
    #+end_src
*** TODO uuid
    #+begin_src emacs-lisp
      ;; (leaf uuid
      ;;   :ensure t
      ;;   :el-get (emacs-uuid
      ;;            :url "https://github.com/nicferrier/emacs-uuid.git"
      ;;            :features uuid)
      ;;   :config
      ;;   (defun takeokunn/uuid ()
      ;;     (interactive)
      ;;     (insert (uuid-string))))
    #+end_src
*** TODO which-key
    #+begin_src emacs-lisp
      ;; (leaf which-key
      ;;   :ensure t
      ;;   :hook (after-init . which-key-mode))
    #+end_src
*** TODO whitespace
    #+BEGIN_SRC emacs-lisp
      ;; (leaf whitespace
      ;;   :ensure t
      ;;   :custom
      ;;   ((whitespace-style '(face tabs tab-mark spaces space-mark))
      ;;    (whitespace-display-mappings '((space-mark ?\u3000 [?\u25a1])
      ;;                                   (tab-mark ?\t [?\xBB ?\t] [?\\ ?\t]))))
      ;;   :config
      ;;   (global-whitespace-mode 1))
    #+END_SRC
*** TODO wanderlust
    #+begin_src emacs-lisp
      ;; (leaf wanderlust
      ;;   :ensure t
      ;;   ;; :setq
      ;;   ;; (ssl-certificate-verification-policy . 1)
      ;;   )
    #+end_src
*** TODO xah-lookup
    #+begin_src emacs-lisp
      ;; (leaf xah-lookup
      ;;   :ensure t
      ;;   :disabled t
      ;;   :after (eww define-word)
      ;;   :setq
      ;;   (xah-lookup-browser-function . 'eww)
      ;;   (xah-lookup-dictionary-browser-function . 'eww)
      ;;   (xah-lookup-dictionary-list . ["http://www.google.com/search?q=define:+word02051"])
      ;;   :config
      ;;   (put 'xah-lookup-google 'xah-lookup-browser-function 'eww)
      ;;   (put 'xah-lookup-wikipedia 'xah-lookup-url "http://ja.wikipedia.org/wiki/word02051")
      ;;   (put 'xah-lookup-wikipedia 'xah-lookup-browser-function 'eww))
    #+end_src
* Eshell
** TODO basic
   #+begin_src emacs-lisp
     ;; (leaf eshell
     ;;   :config
     ;;   (with-eval-after-load 'eshell
     ;;     ;; function
     ;;     (defun eshell/ff (&rest args)
     ;;       (find-file (car args)))

     ;;     ;; config
     ;;     (defvar eshell-cmpl-ignore-case t)
     ;;     (defvar eshell-glob-include-dot-dot nil)
     ;;     (defvar eshell-ask-to-save-history (quote always))
     ;;     (defvar eshell-history-size 100000)
     ;;     (defvar eshell-hist-ignoredups t)

     ;;     ;; alias
     ;;     (defvar *shell-alias* '(("ll" "ls -la")
     ;;                             ("cdd" "cd ~/Desktop")))
     ;;     (defvar eshell-command-aliases-list (append *shell-alias*))))
   #+end_src
** TODO aweshell
   #+BEGIN_SRC emacs-lisp
     ;; (leaf aweshell
     ;;   :after eshell
     ;;   :config
     ;;   (defun takeokunn/aweshell-setup ()
     ;;     (interactive)
     ;;     (shell-command-to-string "ghq get https://github.com/takeokunn/aweshell.git"))

     ;;   (when (file-directory-p "~/.ghq/github.com/takeokunn/aweshell")
     ;;     (add-to-list 'load-path (expand-file-name "~/.ghq/github.com/takeokunn/aweshell"))
     ;;     (require 'esh-mode)
     ;;     (require 'aweshell)
     ;;     (with-eval-after-load 'aweshell
     ;;       (defun takeokunn/counsel-aweshell-history ()
     ;;         (interactive)
     ;;         (insert (ivy-read "Aweshell history: " (aweshell-parse-shell-history))))

     ;;       (defvar eshell-mode-map nil)
     ;;       (defvar aweshell-auto-suggestion-p nil)
     ;;       (defvar eshell-highlight-prompt t)
     ;;       (setq eshell-prompt-function 'epe-theme-lambda)
     ;;       (add-hook 'eshell-mode-hook
     ;;                 (lambda () (define-key eshell-mode-map (kbd "C-c C-r") 'takeokunn/counsel-aweshell-history))))))
   #+END_SRC
** TODO eshell-z
   #+begin_src emacs-lisp
     ;; (leaf eshell-z
     ;;   :ensure t
     ;;   :after eshell
     ;;   :bind ("C-c C-q" . eshell-z))
   #+end_src

* Org Mode
** TODO basic
   #+BEGIN_SRC emacs-lisp
     ;; (leaf org
     ;;   :setq-default
     ;;   ((org-use-speed-commands . t)
     ;;    (org-agenda-todo-ignore-with-date . t)
     ;;    (org-directory . "~/org")
     ;;    (org-agenda-files . '("~/org/agenda"))
     ;;    (org-todo-keywords . '((sequence "TODO(t)" "TODAY" "WAIT(w)" "|" "DONE(d)")))
     ;;    (org-capture-templates . '(("t" "Todo" entry (file+datetree "~/org/todo.org")
     ;;                                "* %?")
     ;;                               ("m" "Memo" entry (file "~/org/memo.org")
     ;;                                "* %?"))))
     ;;   :custom
     ;;   ((org-startup-folded . 'fold)
     ;;    (org-archive-location . `,(format "~/org/archive/%s.org"
     ;;                                      (format-time-string "%Y" (current-time)))))
     ;;   :custom-face
     ;;   (org-link '(t (:foreground "#ebe087" :underline t)))
     ;;   :bind
     ;;   (("C-c a" . org-agenda)
     ;;    ("C-c b" . counsel-bookmark)
     ;;    ("C-c c" . org-capture)
     ;;    (:org-mode-map ("C-m" . nil))))
   #+END_SRC
** TODO org-journal
   #+begin_src emacs-lisp
     ;; (leaf org-journal
     ;;   :ensure t
     ;;   :setq
     ;;   (org-journal-dir . "~/org/journal")
     ;;   :custom
     ;;   (org-journal-file-type . 'weekly)
     ;;   (org-journal-prefix-key . "C-c j"))
   #+end_src
** TODO org-ql
   #+begin_src emacs-lisp
     ;; (leaf org-ql
     ;;   :ensure t
     ;;   :custom
     ;;   (org-agenda-custom-commands . `(("i" "Today's agenda"
     ;;                                    ((org-ql-block '(and (todo "TODAY"))
     ;;                                                   ((org-ql-block-header "TODAY's agenda"))))))))
   #+end_src
** TODO org-babel
   #+begin_src emacs-lisp
     ;; (leaf ob-core
     ;;   :custom
     ;;   (org-confirm-babel-evaluate . nil))

     ;; (leaf ob-fish
     ;;   :el-get (ob-fish
     ;;            :url "https://github.com/takeokunn/ob-fish.git"))


     ;; (leaf ob-go :ensure t)
     ;; (leaf ob-rust :ensure t)
     ;; (leaf ob-typescript :ensure t)

     ;; (leaf ob-babel
     ;;   :after (ob-fish
     ;;           ob-go
     ;;           ob-rust
     ;;           ob-typescript)
     ;;   :config
     ;;   (org-babel-do-load-languages 'org-babel-load-languages
     ;;                                '((shell . t)
     ;;                                  (emacs-lisp . t)
     ;;                                  (lisp . t)
     ;;                                  (ruby . t)
     ;;                                  (fish . t)
     ;;                                  (go . t)
     ;;                                  (rust . t)
     ;;                                  (typescript . t))))
   #+end_src
** TODO org-superstar
   #+begin_src emacs-lisp
     ;; (leaf org-superstar
     ;;   :ensure t
     ;;   :hook (org-mode-hook . org-superstar-mode)
     ;;   :custom
     ;;   ((org-superstar-headline-bullets-list . '("◉" "○" "✸" "✿"))
     ;;    (org-superstar-leading-bullet . " ")))
   #+end_src
** TODO org-generate
   #+begin_src emacs-lisp
     ;; (leaf org-generate
     ;;   :ensure t
     ;;   :custom
     ;;   (org-generate-file . `,(locate-user-emacs-file "yasnippets.org"))
     ;;   :setq
     ;;   (org-generate-root . "yasnippets"))
   #+end_src
** TODO org-roam
   #+begin_src emacs-lisp
     ;; (leaf org-roam
     ;;   :disabled t
     ;;   :ensure t
     ;;   :hook (after-init-hook . org-roam-mode)
     ;;   :custom ((org-roam-db-update-method . 'immediate)
     ;;            (org-roam-db-location . "~/org/roam/org-roam.db")
     ;;            (org-roam-directory . "~/org/roam")
     ;;            (org-roam-index-file . "~/org/roam/index.org"))
     ;;   :custom
     ;;   (org-roam-graph-viewer . #'eww-open-file)
     ;;   :setq
     ;;   ((org-roam-v2-ack . nil))
     ;;   :bind
     ;;   (("C-c n l" . org-roam)
     ;;    ("C-c n f" . org-roam-find-file)
     ;;    ("C-c n g" . org-roam-graph)
     ;;    (:org-mode-map
     ;;     (("C-c n i" . org-roam-insert)
     ;;      ("C-c n I" . org-roam-insert-immediate)))))
   #+end_src
** TODO org-tree-slide
   #+begin_src emacs-lisp
     ;; (leaf org-tree-slide
     ;;   :ensure t
     ;;   :bind
     ;;   (("<f8>" . org-tree-slide-mode)
     ;;    ("S-<f8>" . org-tree-slide-skip-done-toggle)))
   #+end_src
** TODO org-pomodoro
   #+begin_src emacs-lisp
     ;; (leaf org-pomodoro
     ;;   :ensure t)
   #+end_src
* MyFunc
** takeokun/beginning-of-intendation
   #+BEGIN_SRC emacs-lisp
     (defun takeokunn/beginning-of-intendation ()
       "move to beginning of line, or indentation"
       (interactive)
       (back-to-indentation))
   #+END_SRC
** takeokunn/before-set-auto-mode
   #+BEGIN_SRC emacs-lisp
     (defun takeokunn/before-set-auto-mode ()
       (when (or (and buffer-file-name
                      (> (or (file-attribute-size (file-attributes buffer-file-name)) 0) 1000000))
                 (> (line-number-at-pos (point-max)) 100000))
         (prog1 t
           (prog-mode))))
     ;; (advice-add 'set-auto-mode :before-until 'takeokunn/before-set-auto-mode)
   #+END_SRC
** takeokunn/reload-major-mode
   #+BEGIN_SRC emacs-lisp
     (defun takeokunn/reload-major-mode ()
       "Reload current major mode."
       (interactive)
       (let ((current-mode major-mode))
         (fundamental-mode)
         (funcall current-mode)
         current-mode))
   #+END_SRC
** TODO takeokunn/move-line
   #+begin_src emacs-lisp
     (defun takeokunn/move-line (arg)
       (interactive)
       (let ((col (current-column)))
         (unless (eq col 0)
           (move-to-column 0))
         (save-excursion
           (forward-line)
           (transpose-lines arg))
         (forward-line arg)))

     (defun takeokunn/move-line-down ()
       (interactive)
       (takeokunn/move-line 1))

     (defun takeokunn/move-line-up ()
       (interactive)
       (takeokunn/move-line -1))

     ;; (general-define-key
     ;;  "M-N" 'takeokunn/move-line-down
     ;;  "M-P" 'takeokunn/move-line-up)
   #+end_src
** takeokunn/toggle-read-only-mode
   #+begin_src emacs-lisp
     ;; (defun takeokunn/toggle-read-only-mode ()
     ;;   (interactive)
     ;;   (toggle-read-only))

     ;; (general-define-key
     ;;  "C-x C-q" 'takeokunn/toggle-read-only-mode)
   #+end_src
** takeokunn/ghq-get
   #+begin_src emacs-lisp
     (defun takeokunn/ghq-get ()
       (interactive)
       (let ((url (read-string "url > ")))
         (message
          (shell-command-to-string
           (mapconcat #'shell-quote-argument
                      (list "ghq" "get" url)
                      " ")))))

     (defalias 'ghq-get 'takeokunn/ghq-get)
   #+end_src
