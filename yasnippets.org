#+title: Yasnippet Configurations
#+author: takeokunn
#+email: bararararatty@gmail.com
#+startup: content
#+startup: nohideblocks
#+html_head: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+html_head: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+html_head: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+html_head: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+html_head: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+html_head: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

* snippet
** default
*** css-mode/
**** template
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: template
       # key: template
       # --
       ,* {
           padding: 0;
           margin: 0;
           -webkit-font-smoothing: antialiased;
           text-rendering: optimizeLegibility;
           scroll-behavior: smooth;
           overscroll-behavior-y: contain;
           $0
       }

       a {
           text-decoration: none;
       }
     #+end_src
**** media
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: media
       # key: media
       # --
       @media (${1:max-width}: ${2:768px}) {
         $0
       }
     #+end_src
*** emacs-lisp-mode/
**** cond
#+BEGIN_SRC snippet
# -*- mode: snippet -*-
# contributor: Xah Lee (XahLee.org)
# name: cond
# key: cond
# --
(cond
 (${1:condition} ${2:body})$0)
#+END_SRC
**** el-get
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: el-get
  # key: el-get
  # --
  (eval-when-compile
    (el-get-bundle '$1))
#+end_src
**** header
#+BEGIN_SRC snippet
# -*- mode: snippet; -*-
# contributor: kchenphy <https://www.github.com/kchenphy>
# name: package header
# key: header
# --
;;; ${1:name}.el --- ${2:summary} -*- lexical-binding: t -*-

;; Author: ${3:`(user-full-name)`}
;; Maintainer: ${4:`(user-full-name)`}
;; Version: ${5:version}
;; Package-Requires: (${6:dependencies})
;; Homepage: ${7:homepage}
;; Keywords: ${8:keywords}

${9:
;; This file is not part of GNU Emacs

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; For a full copy of the GNU General Public License
;; see <http://www.gnu.org/licenses/>.
}

;;; Commentary:

;; ${10:commentary}

;;; Code:

${11:(message "Hello World!")}

(provide '$1)

;;; $1.el ends here
#+END_SRC
**** kill-buffer
#+BEGIN_SRC snippet
# -*- mode: snippet -*-
# contributor: Xah Lee (XahLee.org)
# name: kill-buffer
# key: kill-buffer
# key: kb
# --
(kill-buffer $0)
#+END_SRC
**** lambda
#+BEGIN_SRC snippet
# -*- mode: snippet; -*-
# contributor: Xah Lee (XahLee.org)
# name: lambda
# key: lam
# --
(lambda ($1) ${2:(interactive${3: "$4"}) }$0)

#+END_SRC
**** minor
#+BEGIN_SRC snippet
  # -*- mode: snippet -*-
  # name: minor
  # key: minor
  # --
  (defvar ${1:mode}-modeline-indicator " ${2:indicator}"
    "call ($1-install-mode) again if this is changed")

  (defvar $1-mode nil)
  (make-variable-buffer-local '$1-mode)
  (put '$1-mode 'permanent-local t)

  (defun $1-mode (&optional arg)
    "$0"
    (interactive "P")
    (setq $1-mode
          (if (null arg) (not $1-mode)
            (> (prefix-numeric-value arg) 0)))
    (force-mode-line-update))

  (provide '$1-mode)
#+END_SRC
**** with-delayed-execution
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: with-delayed-execution
  # key: with-delayed-execution
  # --
  (with-delayed-execution
    (message "Install $1...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/$1"))
     $0)
#+end_src
*** fish-mode/
**** bang
#+BEGIN_SRC snippet
# name: bang
# key: !
# --
#!/usr/bin/env fish
$0

#+END_SRC
**** block
#+BEGIN_SRC snippet
# name: begin ... end
# key: block
# --
begin
    $0
end
#+END_SRC
**** breakpoint
 #+BEGIN_SRC snippet
 # name: breakpoint
 # key: breakpoint
 # --
 breakpoint
 $0
 #+END_SRC
**** for
#+BEGIN_SRC snippet
# name: for loop
# key: for
# --
for ${1:var} in ${2:stuff}
    $0
end
#+END_SRC
**** function
#+BEGIN_SRC snippet
# name: function
# key: function
# --
function ${1:name}
    $0
end
#+END_SRC
**** if
#+BEGIN_SRC snippet
# name: if ... ... else ... end
# key: if
# --
if ${1:cond}
    ${2:stuff}
else
    ${3:other}
end
$0
#+END_SRC
**** switch
#+BEGIN_SRC snippet
# name: switch
# key: switch
# --
switch ${1:condition}
    case ${2:*}
         ${0}
end
#+END_SRC
**** while
#+BEGIN_SRC snippet
# name: while loop
# key: while
# --
while ${1:cond}
    $0
end
#+END_SRC
*** fundamental-mode/
**** current-date
#+BEGIN_SRC snippet
  # name: current-date
  # key: dd
  # contributor : Kristof Molnar-Tatai <kristof.mlnr@gmail.com>
  # --
  `(format-time-string "%Y-%m-%d")`
#+END_SRC
**** mode-line
#+BEGIN_SRC snippet
  # name: Mode line
  # key: mode-line
  # --
  # -*- mode:${1:conf}; -*-
#+END_SRC
*** snippet-mode/
**** template
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: template
       # key: template
       # --
       # -*- mode: snippet -*-
       # name: ${1:name}
       # key: ${2:key}
       # --
       $0
     #+end_src
*** git-commit-mode/
**** .yas-parents
#+BEGIN_SRC snippet
text-mode
#+END_SRC
**** type
#+BEGIN_SRC snippet
# name: type
# key: type
# --
${1:$$(yas-choose-value '("fix" "hotfix" "add" "update" "change" "clean" "disable" "remove" "upgrade" "revert"))} $0
#+END_SRC
*** go-mode/
**** append
     #+begin_src snippet
       # name: for append
       # key: append
       # --
       $1 = append($1, $0)
     #+end_src
**** case
     #+begin_src snippet
       # name: switch case
       # key: case
       # --
       case $1:
               $0
     #+end_src
**** error
     #+begin_src snippet
       # name: error
       # key: error
       # --
       if err != nil {
               $0
       }
     #+end_src
**** for
     #+begin_src snippet
       # name: for range
       # key: range
       # --
       for ${3:key}, ${2:value} := range ${1:target} {
               $0
       }
     #+end_src
**** func
     #+begin_src snippet
       # name: func
       # key: func
       # --

       func ($2) $1 ($3) {
               $0
       }
     #+end_src
**** handler
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: handler
       # key: handler
       # --
       var $1 = func(w http.ResponseWriter, r *http.Request) {
           $0
       }
     #+end_src
**** init
     #+begin_src snippet
       # name: init
       # key: init
       # --
       func init(){
               $0
       }
     #+end_src
**** interface
     #+begin_src snippet
       # name: interface
       # key: type
       # --
       type $1 interface {
               $0
       }
     #+end_src
**** main
     #+begin_src snippet
       # name: main
       # key: main
       # --
       func main() {
               $0
       }
     #+end_src
**** package
     #+begin_src snippet
       # name: package
       # key: package
       # --
       package ${1:main}
     #+end_src
**** struct
     #+begin_src snippet
       # name: struct
       # key: struct
       # --

       type $1 struct {
       $0
       }

     #+end_src
**** switch
     #+begin_src snippet
       # name: for switch
       # key: switch
       # --
       switch $1 {
               case $2:
                       $0
               default:
       }
     #+end_src
**** test
     #+begin_src snippet
       # name: test
       # key: test
       # --
       func Test$1(t *testing.T) {
               $0
       }
     #+end_src
*** js-mode/
**** alert
#+BEGIN_SRC snippet
  # name: alert
  # key: alert
  # --
  alert($0);
#+END_SRC
**** class
#+BEGIN_SRC snippet
# name: class
# key: class
# --
class ${1:Class}${2: extends ${3:ParentClass}} {
  ${4:constructor(${5:arg}) {
    ${6:super(arg);}
    $7
  }}

  $0
}
#+END_SRC
**** const
#+BEGIN_SRC snippet
# name: const declaration
# key: const
# --
const ${1:name} = ${2:initial};
#+END_SRC
**** each
#+BEGIN_SRC snippet
# name: each
# --
${1:collection}.forEach(function (${2:elem}) {
  $0
});
#+END_SRC
**** else
#+BEGIN_SRC snippet
  # name: else
  # key: else
  # --
  else {
    $0
  }
#+END_SRC
**** export-const
#+BEGIN_SRC snippet
  # -*- mode: snippet -*-
  # name: export-const
  # key: export-const
  # --

  export const ${1:functionName} = (${2:params}) => {
    $0
  }
#+END_SRC
**** export-default
#+BEGIN_SRC snippet
  # name: export-default
  # key: export-default
  # --

  export default (${1:params}) => {
    $0
  }
#+END_SRC
**** for-in
#+BEGIN_SRC snippet
  # name: for-in
  # key: for-in
  # --

  for(const ${1:item} in ${2:object}) {
    ${0}
  }
#+END_SRC
**** for-of
#+BEGIN_SRC snippet
  # name: for-of
  # key: fof-of
  # --

  for(const ${1:item} of ${2:object}) {
    ${0}
  }
#+END_SRC
**** for
#+BEGIN_SRC snippet
  # name: for
  # --
  for (let ${1:i} = ${2:0}; $1 < ${3:collection}.length; $1++) {
    $0
  }
#+END_SRC
**** function
#+BEGIN_SRC snippet
  # name: function
  # key: function
  # --
  function ${1:name}(${2:arg}) {
           $0
  }

#+END_SRC
**** if
#+BEGIN_SRC snippet
# name: if
# --
if (${1:condition}) {
  $0
}
#+END_SRC
**** lambda
#+begin_src snippet
  # name: lambda
  # key: lambda
  # --
  const ${1:name} = (${2:args}) => {
    $0
  };
#+end_src
**** log
#+BEGIN_SRC snippet
  # name: log (console.log)
  # key: log
  # --
  console.log(${2:"$3 >> ", }${1:var})
#+END_SRC
**** import
#+BEGIN_SRC snippet
  # name: import
  # key: import
  # --

  import ${2:moduleName} from '${1:module}'$0
#+END_SRC
**** let
#+BEGIN_SRC snippet
# name: let declaration
# key: let
# --
let ${1:name} = ${2:initial};
#+END_SRC
**** setInterval
#+BEGIN_SRC snippet
  # name: setInterval
  # key: setInterval
  # --

  setInterval(() => {
    ${2}
  }, ${0:intervalInms})
#+END_SRC
**** setTimeout
#+BEGIN_SRC snippet
  # name: setTimeOut
  # key: setTimeOut
  # --

  setTimeout(() => {
    ${2}
  }, ${1:delayInms})
#+END_SRC
**** styled
#+begin_src snippet
  # name: styled
  # key: styled
  # --

  const $1 = styled.$2\`
    $0
  \`
#+end_src
**** switch
#+BEGIN_SRC snippet
  # name: switch
  # key: switch
  # --
  switch (${1:condition}) {
    case ${2:expression}:
      $0
      break;
    default:
  }
#+END_SRC
**** try-catch
#+BEGIN_SRC snippet
  # name: try...catch statement
  # key: try
  # --
  try {
    $1
  } catch (err) {
    $2
  }${3: finally {
    $4
  }}
#+END_SRC
*** js2-mode/
**** .yas-parents
#+BEGIN_SRC snippet
js-mode
#+END_SRC
*** lisp-mode/
**** main
     #+BEGIN_SRC snippet
       # name: main
       # key: main
       # --
       (defun main () $0)
     #+END_SRC
**** class
#+BEGIN_SRC snippet
# name: class
# key: cls
# --
(defclass ${1:name} (${2:inherits})
   (${4:slot})
   (:documentation "${3:doc}"))
$0
#+END_SRC
**** comment
#+BEGIN_SRC snippet
# name: comment
# key: /*
# --
#|${1:type the comment here}|#
$0
#+END_SRC
**** cond
#+BEGIN_SRC snippet
# name: cond
# key: cond
# --
(cond (${1:case1} (${2:do-this}))
      (${3:case2} (${4:do-this}))
      (t ${5:default}))
$0
#+END_SRC
**** defun
#+BEGIN_SRC snippet
# name: defun
# key: defun
# --
(defun ${1:fun} (${2:args})
       $0
)
#+END_SRC
**** defpackage
#+BEGIN_SRC snippet
# name: defpackage
# key: defp
# --
(defpackage #:${1:name}
   (:nicknames #:${2:nick})
   (:use #:cl #:closer-mop #:${3:package})
   (:shadow :${4.symbol})
   (:shadowing-import-from #:${5:package} #:${6:symbol})
   (:export :$0))
#+END_SRC
**** do
#+BEGIN_SRC snippet
# name: do
# key: do
# --
(do ((${1:var1} ${2:init-form} ${3:step-form})
     (${4:var2} ${5:init-form} ${6:step-form}))
    (${7:condition} ${8:return-value})
    (${9:body}))
$0
#+END_SRC
**** for
#+BEGIN_SRC snippet
# name: do
# key: for
# --
(dotimes (${1:var} ${2:count-form})
         ${3:body})
$0
#+END_SRC
**** foreach
#+BEGIN_SRC snippet
# name: do
# key: foreach
# --
(dolist (${1:var} ${2:list-form})
        ${3:body})
$0
#+END_SRC
**** format
#+BEGIN_SRC snippet
# name: format
# key: print
# --
(format t "~& $0 ~%")
#+END_SRC
**** if
#+BEGIN_SRC snippet
# name: if
# key: if
# --
(when (${1:condition})
      (${2:then-do-this}))
$0
#+END_SRC
**** ifelse
#+BEGIN_SRC snippet
# name: ifelse (...) (...) (...) ...
# key: ifelse
# --
(if (${1:condition})
    (${2:then})
    (${3:else}))
$0
#+END_SRC
**** ifnot
#+BEGIN_SRC snippet
# name: ifnot (...) (...)  ...
# key: ifnot
# --
(unless (${1:condition})
        (${2:then-do-this}))
$0
#+END_SRC
**** slot
#+BEGIN_SRC snippet
# name: slot
# key: slot
# --
(${1:name} :initarg :${1:$(yas/substr yas-text "[^: ]*")}
           :initform (error ":${1:$(yas/substr yas-text "[^: ]*")} must be specified")
           ;; :accessor ${1:$(yas/substr yas-text "[^: ]*")}
           :reader ${1:$(yas/substr yas-text "[^: ]*")}-changed
           :writer set-${1:$(yas/substr yas-text "[^: ]*")}
           :type
           :allocation ${3::class :instance}
           :documentation "${2:about-slot}")
$0
#+END_SRC
**** typecast
#+BEGIN_SRC snippet
# name: typecast
# name: cast
# --
(coerce ${1:object} ${2:type})
$0
#+END_SRC
*** makefile-mode/
**** all
     #+BEGIN_SRC snippet
       # name: all
       # key: all
       # --
       .PHONY: all
       all:
               $0
     #+END_SRC
**** phony
     #+BEGIN_SRC snippet
       # name: phony
       # --
       .PHONY: $1
       $1:
               $0
     #+END_SRC
*** markdown-mode/
**** code
#+BEGIN_SRC snippet
# name: Code block
# key: code
# --
\`\`\`$1
$0
\`\`\`
#+END_SRC
**** highlight
#+BEGIN_SRC snippet
# name: Highlight
# contributor: nguyenvinhlinh <nguyenvinhlinh93@gmail.com>
# key: highlight
# --
{% highlight ${1:language} %}
${0:content}
{% endhighlight %}
#+END_SRC
**** hr
#+BEGIN_SRC snippet
# name: Horizontal Rule (-)
# key: hr
# --
----------
$0
#+END_SRC
**** img
#+BEGIN_SRC snippet
# name: Image
# contributor: Peng Deng <dengpeng@gmail.com>
# key: img
# --
![${1:Alt Text}](${2:URL} $3) $0
#+END_SRC
**** link
#+BEGIN_SRC snippet
# name: Link
# contributor: Peng Deng <dengpeng@gmail.com>
# key: link
# --
[${1:Link Text}](${2:URL} $3) $0
#+END_SRC
*** org-mode/
**** author
#+BEGIN_SRC snippet
  # name: author
  # key: author
  # --
  ,#+AUTHOR: $0
#+END_SRC
**** center
#+BEGIN_SRC snippet
# name: center
# key: center
# --
#+begin_center
$0
#+end_center
#+END_SRC
**** date
#+BEGIN_SRC snippet
# name: date
# key: date
# --
#+DATE: ${1:year}:${2:month}:${3:day}
#+END_SRC
**** description
#+BEGIN_SRC snippet
# name: description
# key: desc
# --
#+DESCRIPTION: $0
#+END_SRC
**** email
#+BEGIN_SRC snippet
# name: email
# key: email
# --
#+email: $0
#+END_SRC
**** embedded
#+BEGIN_SRC snippet
  # name: embedded
  # key: embedded
  # --
  src_${1:lang}${2:[${3:where}]}{${4:code}}
#+END_SRC
**** entry
#+BEGIN_SRC snippet
  # name: entry
  # key: entry
  # --
  ,#+begin_html
  ---
  layout: ${1:default}
  title: ${2:title}
  ---
  ,#+end_html
#+END_SRC
**** exampleblock
#+BEGIN_SRC snippet
  # name: example
  # key: example
  # --
  ,#+begin_example
  $0
  ,#+end_example
#+END_SRC
**** export
#+BEGIN_SRC snippet
# name: export
# key: export
# --
#+begin_export ${1:type}
$0
#+end_export
#+END_SRC
**** figure
#+BEGIN_SRC snippet
  # name: figure
  # key: figure
  # --
  ,#+caption: ${1:caption}
  ,#+attr_latex: ${2:scale=0.75}
  ,#+label: fig:${3:label}$0
#+END_SRC
**** html
#+BEGIN_SRC snippet
  # name: html
  # key: html
  # --
  ,#+html:$1
#+END_SRC
**** image
#+BEGIN_SRC snippet
  # name: image
  # key: image
  # --
  ,#+caption: ${1:caption of the image}
  [[file:${2:image_path}]]$0
#+END_SRC
**** img
#+BEGIN_SRC snippet
# name: img
# key: img
# --
<img src="$1" alt="$2" align="${3:left}" title="${4:image title}" class="img" $5/>$0
#+END_SRC
**** include
#+BEGIN_SRC snippet
# name: include
# key: include
# --
#+include: $0
#+END_SRC
**** keywords
#+BEGIN_SRC snippet
# name: keywords
# key: keywords
# --
#+keywords: $0
#+END_SRC
**** language
#+BEGIN_SRC snippet
# name: language
# key: language
# --
#+language: ${1:en}
#+END_SRC
**** link
#+BEGIN_SRC snippet
# name: link
# key: link
# --
[[${1:link}][${2:description}]]
#+END_SRC
**** matrix
#+BEGIN_SRC snippet
# name: matrix
# key: matrix
# possible improvement, compute the number of lines from the argument to array
# --
\left \(
\begin{array}{${1:ccc}}
${2:v1 & v2} \\
$0
\end{array}
\right \)
#+END_SRC
**** options
#+BEGIN_SRC snippet
# name: options
# key: options
# --
#+options: h:${1:1} num:${2:t||nil} toc:${3:t||nil}$0
#+END_SRC
**** rv_background
#+BEGIN_SRC snippet
# name: reveal_single_colored_background
# key: reveal_single_colored_background
# --
:properties:
:reveal_background: ${1: #123456}
:end:
#+END_SRC
**** rv_image_background
#+BEGIN_SRC snippet
# name: reveal_image_background
# key: <rib
# --
    :properties:
    :reveal_background: ${1: path of the image}
    :reveal_background_trans: ${2: default||cube||page||concave||zoom||linear||fade||none||slide}
    :end:
#+END_SRC
**** setup
#+BEGIN_SRC snippet
  # name: setup
  # key: setup
  # --
  ,#+setup: $0
#+END_SRC
**** setupfile
#+BEGIN_SRC snippet
  # name: setupfile
  # key: setupfile
  # --
  ,#+setupfile: $0
#+END_SRC
**** style
#+BEGIN_SRC snippet
# name: style
# key: style
# --
#+style: <link rel="stylesheet" type="text/css" href="$1" />
#+END_SRC
**** table
#+BEGIN_SRC snippet
# name: table
# key: table
# --
#+caption: ${1: caption of the table}
|${2:column 1} | ${3: column 2} |
|--------------+----------------|
#+END_SRC
**** title
#+BEGIN_SRC snippet
# name: title
# key: title
# --
#+title: $0
#+END_SRC
**** uml
#+BEGIN_SRC snippet
# name: uml
# key: uml
# contributor : Robert O'Connor
# --
#+begin_uml
$1
#+end_uml
#+END_SRC
**** verse
#+BEGIN_SRC snippet
# name: verse
# key: verse
# --
#+begin_verse
$0
#+end_verse
#+END_SRC
**** video
#+BEGIN_SRC snippet
# name: video
# key: video
# --
[[${1:link of the video}][file:${2:link of the image}]
#+END_SRC
**** roam
#+begin_src snippet
  # name: roam
  # key: <roam
  # --
  ,#+roam_tags: $0
#+end_src
*** php-mode/
**** .yas-setup.el
     #+begin_src emacs-lisp
       (require 'yasnippet)

       (defun yas-php-get-class-name-by-file-name ()
         "Return name of class-like construct by `file-name'.
       \"class-like\" contains class, trait and interface."
         (file-name-nondirectory
          (file-name-sans-extension (or (buffer-file-name)
                                        (buffer-name (current-buffer))))))
     #+end_src
**** __call
     #+begin_src snippet
       # -*- mode: snippet -*-
       # contributor: USAMI Kenta <tadsan@zonu.me>
       # name: __call()
       # key: __call
       # group: Magic Methods
       # --
       public function __call($name, $args)
       {
           $0
       }
     #+end_src
**** __construct
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: __construct()
       # key: __construct
       # --
       public function __construct(${1:private })
       {$0
       }
     #+end_src
**** abstruct
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: abstract
       # key: abstract
       # --
       abstract class ${1:`(yas-php-get-class-name-by-file-name)`}
       {
         $0
       }
     #+end_src
**** class
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: class
       # key: class
       # group: definitions
       # --
       class ${1:`(yas-php-get-class-name-by-file-name)`}
       {
         $0
       }
     #+end_src
**** const
     #+begin_src snippet
       # -*- mode: snippet -*-
       # contributor: USAMI Kenta <tadsan@zonu.me>
       # name: const
       # key: const
       # group: definitions
       # --
       const ${1:NAME} = ${2:value};
     #+end_src
**** dd
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: dd
  # key: dd
  # --
  dd($1);
#+end_src
**** ddd
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: ddd
  # key: ddd
  # --
  ddd($1);
#+end_src
**** declare
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: declare
       # key: declare
       # group: generic
       # --
       declare(strict_types=1);
     #+end_src
**** doc
     #+begin_src snippet
       # -*- mode: snippet -*-
       # key: /**
       # group: annotation
       # --
       /**
        ,* ${1:Summary}
        ,*/
     #+end_src
**** dumptype
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: dumptype
  # key: dumptype
  # --
  \PHPStan\dumpType($0);
#+end_src
**** enum
     #+begin_src snippet
       # -*- mode: snippet -*-
       # contributor: takeo obara<bararararatty@gmail.com>
       # name: enum
       # key: enum
       # group : definitions
       # --
       enum ${1:Name}
       {
           case: ${2:One};
           case: ${2:Two};
       $0
       }
     #+end_src
**** final
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: final
       # key: final
       # group: definitions
       # --
       final class ${1:`(yas-php-get-class-name-by-file-name)`}
       {
         $0
       }
     #+end_src
**** foreach
     #+begin_src snippet
       # -*- mode: snippet -*-
       # contributor: USAMI Kenta <tadsan@zonu.me>
       # name: foreach
       # key: foreach
       # group : control structure
       # --
       foreach (${1:$expression} as \$${2:value}) {
           $0
       }
     #+end_src
**** function
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: function
       # key: function
       # --
       ${1:public} function ${2:name}(${3:$arg, ...}): ${4:type}
       {
           $0
       }
     #+end_src
**** interface
     #+begin_src snippet
       # -*- mode: snippet -*-
       # contributor: USAMI Kenta <tadsan@zonu.me>
       # name: interface
       # key: interface
       # group : definitions
       # --
       interface ${1:`(yas-php-get-class-name-by-file-name)`}
       {
           $0
       }
     #+end_src
**** php
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: php
  # key: php
  # group: generic
  # --
  <?php
  declare(strict_types=1);

  $0
#+end_src
**** psysh
     #+begin_src snippet
       # -*- mode: snippet -*-
       # contributor: USAMI Kenta <tadsan@zonu.me>
       # name: psysh
       # key: psysh
       # group: generic
       # --
       eval(\Psy\sh());
     #+end_src
**** match
     #+begin_src snippet
       # -*- mode: snippet -*-
       # contributor: takeo obara<bararararatty@gmail.com>
       # name: match
       # key: match
       # group : control structure
       # --
       match (${1:$var}) {
           ${2:$cond} => ${3:$return},
       $0
       };
     #+end_src
**** trait
     #+begin_src snippet
       # -*- mode: snippet -*-
       # contributor: USAMI Kenta <tadsan@zonu.me>
       # name: trait
       # key: trait
       # group : definitions
       # --
       trait ${1:`(yas-php-get-class-name-by-file-name)`}
       {
           $0
       }
     #+end_src
**** template
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: template
       # key: template
       # --
       <?php
       declare(strict_types=1);

       namespace $1;

       final class ${2:`(yas-php-get-class-name-by-file-name)`}${3: extends $4}${5: implements $6}
       {$0
       }
     #+end_src
**** var_dump
     #+begin_src snippet
       # -*- mode: snippet -*-
       # contributor: USAMI Kenta <tadsan@zonu.me>
       # name: var_dump()
       # key: vd
       # group: generic
       # --
       var_dump(${1:$var});
     #+end_src
**** @phpstan-ignore-line
    #+begin_src snippet
      # -*- mode: snippet -*-
      # name: @phpstan-ignore-line
      # key: phpstan-ignore-line
      # --

      // @phpstan-ignore-line$0
    #+end_src
**** @phpstan-ignore-next-line
    #+begin_src snippet
      # -*- mode: snippet -*-
      # name: @phpstan-ignore-next-line
      # key: phpstan-ignore-next-line
      # --

      // @phpstan-ignore-next-line$0
    #+end_src
*** prog-mode/
**** .yas-setup.el
#+BEGIN_SRC snippet
(require 'yasnippet)
;; whitespace removing functions from Magnar Sveen ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun yas-s-trim-left (s)
  "Remove whitespace at the beginning of S."
  (if (string-match "\\`[ \t\n\r]+" s)
      (replace-match "" t t s)
    s))
(defun yas-s-trim-right (s)
  "Remove whitespace at the end of S."
  (if (string-match "[ \t\n\r]+\\'" s)
      (replace-match "" t t s)
    s))
(defun yas-s-trim (s)
  "Remove whitespace at the beginning and end of S."
  (yas-s-trim-left (yas-s-trim-right s)))
(defun yas-string-reverse (str)
  "Reverse a string STR manually to be compatible with emacs versions < 25."
  (apply #'string
         (reverse
          (string-to-list str))))
(defun yas-trimmed-comment-start ()
  "This function returns `comment-start' trimmed by whitespaces."
  (yas-s-trim comment-start))
(defun yas-trimmed-comment-end ()
  "This function returns `comment-end' trimmed by whitespaces if `comment-end' is not empty.
Otherwise the reversed output of function `yas-trimmed-comment-start' is returned."
  (if (eq (length comment-end) 0)
      (yas-string-reverse (yas-trimmed-comment-start))
    (yas-s-trim comment-end)))
#+END_SRC
**** comment
#+BEGIN_SRC snippet
  # contributor: sh-ow <sh-ow@users.noreply.github.com>
  # name: comment
  # key: co
  # --
  `(yas-trimmed-comment-start)` ${1:comment}`(unless (eq (length comment-end) 0) (concat " " (yas-trimmed-comment-end)))`$0
#+END_SRC
**** comment-block
#+BEGIN_SRC snippet
# name: comment-block
# key: comment-block
# --
${1:$(let* ((col (current-column))
           (str "")
           (lastcom (substring (yas-trimmed-comment-start) -1))
           (start (yas-trimmed-comment-start))
           (end (yas-trimmed-comment-end))
           (over (- (+ (string-width yas-text) (length start) (length end) col) 77)))
         (while (< (length str) (+ (- 79 (length start) (length end) col) (if (> over 0) over 0)))
                (setq str (concat str lastcom)))
       (concat start str end))}
${1:$(let* ((col (current-column))
           (str "")
           (start (yas-trimmed-comment-start))
           (end (yas-trimmed-comment-end)))
         (while (< (length str) (ffloor (/ (- 78.0 (+ col (length start) (string-width yas-text) (length end))) 2.0)))
                (setq str (concat str " ")))
        (concat start str))} ${1:comment} ${1:$(let* ((col (current-column))
                                                     (str "")
                                                     (start (yas-trimmed-comment-start))
                                                     (end (yas-trimmed-comment-end)))
                                                   (while (< (length str) (- 79.0 (if (eq (mod (string-width yas-text) 2) 1) (- col 1) col) (length end)))
                                                          (setq str (concat str " ")))
                                                 (concat str end))}
${1:$(let* ((col (current-column))
           (str "")
           (lastcom (substring (yas-trimmed-comment-start) -1))
           (start (yas-trimmed-comment-start))
           (end (yas-trimmed-comment-end))
           (over (- (+ (string-width yas-text) (length start) (length end) col) 77)))
         (while (< (length str) (+ (- 79 (length start) (length end) col) (if (> over 0) over 0)))
                (setq str (concat str lastcom)))
       (concat start str end))}$0
#+END_SRC
**** commentblock-two
#+BEGIN_SRC snippet
  # name: commentblock-two
  # key: commentblock-two
  # --

  /*
  |--------------------------------------------------------------------------
  | $1
  |--------------------------------------------------------------------------
  |
  | $2
  |
  ,*/

  $0
#+END_SRC
**** fixme
#+BEGIN_SRC snippet
# name: fixme
# key: fi
# condition: (not (eq major-mode 'sh-mode))
# --
`comment-start`FIXME: $0`comment-end`
#+END_SRC
**** todo
#+BEGIN_SRC snippet
# name: todo
# key: t
# --
`comment-start`TODO: $0`comment-end`
#+END_SRC
**** xxx
#+BEGIN_SRC snippet
# name: xxx
# key: x
# --
`comment-start`XXX: $0`comment-end`
#+END_SRC
*** prisma-mode/
**** datasource
#+begin_src snippet
  # name: datasource
  # key: datasource
  # --
  datasource $1 {
    provider = $2
    url      = $3
  }
#+end_src
**** generator
 #+begin_src snippet
   # name: generator
   # key: generator
   # --
   generator $1 {
     provider = $2
   }
 #+end_src

**** model
#+begin_src snippet
  # name: model
  # key: model
  # --
  model $1 {
    $0
  }
#+end_src
*** robots-txt-mode/
**** template
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: template
  # key: template
  # --
  User-Agent:*

  Disallow: $1

  Sitemap: $2
#+end_src
*** snippet-mode/
**** header
#+BEGIN_SRC snippet
  # name: header
  # key: header
  # --

  # name: ${1:name}
  # key: ${2:key}
  # --

  $0
#+END_SRC
*** sql-mode/
**** constraint
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: constraint
  # key: constraint
  # --
  CONSTRAINT [${1:PK_Name}] PRIMARY KEY ${2:CLUSTERED} ([${3:ColumnName}])
#+end_src
**** create
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: create
  # key: create
  # --
  CREATE TABLE [${1:dbo}].[${2:TableName}]
  (
                  ${3:Id}		${4:INT IDENTITY(1,1)}		${5:NOT NULL}
  $0
          CONSTRAINT [${6:PK_}] PRIMARY KEY ${7:CLUSTERED} ([$3])
  )
#+end_src
**** insert
#+BEGIN_SRC snippet
# name: insert
# key: ins
# --
INSERT INTO ${table-name} (${col1, col2}) VALUES (${'val1', 'val2'});$0
#+END_SRC
*** ssh-config-mode/
**** template
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: template
  # key: template
  # --
  Host $1
    HostName $2
    Port ${3:22}
    User ${4:ec2-user}
    IdentityFile ${5:~/.ssh/id_ed25519}
#+end_src
*** terraform-mode/
**** provider
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: provider
  # key: provider
  # --
  provider "${1:name}" {
    $0
  }
#+end_src
**** locals
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: locals
  # key: locals
  # --
  locals {
    {$1:name} = ${2:value}
  }
#+end_src
**** module
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: module
  # key: mod
  # --
  module "${1:name}" {
    source = "${2:location}"
    $0
  }
#+end_src
**** resource
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: resource
  # key: resource
  # --
  resource "${1:type}" "${2:name}" {
    $0
  }
#+end_src
**** output
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: output
  # key: output
  # --
  output "${1:name}" {
    value = ${2:value}
  }
#+end_src
**** variable
#+begin_src snippet
  # name: variable
  # key: variable
  # --
  variable "$1" {
    type = ${2:string}
    $0
  }
#+end_src
**** data
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: data
  # key: data
  # --
  data "${1:type}" "${2:name}" {
    $0
  }
#+end_src
**** terraform
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: terraform
  # key: terraform
  # --
  terraform {
    backend "${1:backend}" {
      $0
    }
  }
#+end_src
**** variables
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: variable
  # key: variable
  # --
  variable "${1:name}" {
    ${2:default = "$3"}
  }
#+end_src

*** toml-mode/
**** plugins
#+begin_src snippet
  [[plugins]]
  repo = '$1'
  ${2:hook_add = '''
  $3
  '''}
#+end_src
*** typescript-mode/
**** .yas-parents
#+BEGIN_SRC snippet
js-mode
#+END_SRC
**** abstract
#+BEGIN_SRC snippet
# name: abstract
# key: abstract
# --
abstract class ${1:Class} {
  ${2:constructor(${3:arg}) {
    ${4:super(arg);}
    $5
  }}

  $0
}
#+END_SRC
**** export-type
#+BEGIN_SRC snippet
  # -*- mode: snippet -*-
  # name: export-type
  # key: export-type
  # --
  export type ${1:name} {
    $0
  }
#+END_SRC
**** interface
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: interface
       # key: interface
       # --
       interface $1 ${2: extends ${3:Parent}} = {
       $0
       }
     #+end_src
**** namespace
#+begin_src snippet
  # name: namespace
  # key: namespace
  # --

  namespace $1 {
    $0
  }
#+end_src
**** type
#+begin_src snippet
  # name: type
  # key: type
  # --
  type $1 = {
    $0
  }
#+end_src
*** typescript-tsx-mode/
**** .yas-parents
#+BEGIN_SRC snippet
  web-mode
#+END_SRC
***
**** template
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: template
       # key: template
       # --
       export const ${1:Component}: React.FC${2:<${3:Props}>} = (${4:props: Props}) => {
         return (
            $0
         )
       }
     #+end_src
*** vue-mode/
**** .yas-parents
#+BEGIN_SRC snippet
  js-mode
#+END_SRC
***
**** template
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: template
       # key: template
       # --
       <template>
           $0
       </template>

       <script${1: lang="${2:ts}"}>

       </script>

       <style${3: scoped}>

       </style>
     #+end_src

*** web-mode/
**** html5
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: html5
       # key: html
       # --
       <!DOCTYPE html>
       <html lang="${1:ja}">
       <head>
           <meta http-equiv="X-UA-Compatible" content="ie=edge">
           <meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no">
           <title>$2</title>
       </head>
       <body>
           $0
       </body>
       </html>
     #+end_src
**** style
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: style
       # key: style
       # --
       <style type="text/css" media="${1:screen}">
         $0
       </style>
     #+end_src
**** form
     #+begin_src snippet
       # -*- mode: snippet -*-
       # key: form
       # name: form
       # --
       <form${1: method="$2"}${3: action="$4"}>
           $0
       </form>
     #+end_src
**** href
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: href
       # key: href
       # --
       <a href="$1">$0</a>
     #+end_src
**** input
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: input
       # key: input
       # --
       <input${1: type="$2"}${3: name="$4"}${5: value="$6"}>$0
     #+end_src
**** img
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: img
       # key: img
       # --
       <img src="$1"${2: alt="$3"}>$0
     #+end_src
**** favicon
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: favicon
       # key: favicon
       # --
       <link rel="icon" href="${1:/favicon.ico}">$0
     #+end_src
**** meta
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: meta
       # key: meta
       # --
       <meta name="title" content="${1:title}">
       <meta name="description" content="${2:description}">
       <meta name="keywords" content="${3:keywords}">
     #+end_src
**** ogp
     #+begin_src snippet
       # -*- mode: snippet -*-
       # name: ogp
       # key: ogp
       # --
       <meta property="og:title" content="">
       <meta property="og:type" content="">
       <meta property="og:url" content="">
       <meta property="og:image" content="">
       <meta property="og:site_name" content="">
       <meta property="og:description" content="">
       <meta name="twitter:site" content="">
       <meta name="twitter:card" content="">
     #+end_src
**** dns-prefetch
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: dns-prefetch
  # key: dns-prefetch
  # --

  <link as="${1:stylesheet}" rel="dns-prefetch" href="$2">$0
#+end_src
**** preload
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: preload
  # key: preload
  # --

  <link as="${1:stylesheet}" rel="preload" href="$2">$0
#+end_src
**** prefetch
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: prefetch
  # key: prefetch
  # --

  <link as="${1:stylesheet}" rel="prefetch" href="$2">$0
#+end_src
**** preconnect
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: preconnect
  # key: preconnect
  # --

  <link rel="preconnect" href="$1">$0
#+end_src
*** web-php-blade-mode/
**** auth
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: auth
  # key: auth
  # --
  @auth${1:('user')}
      $0
  @endauth

#+end_src
**** empty
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: empty
  # key: empty
  # --
  @empty($1)
      $0
  @endempty
#+end_src
**** env
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: env
  # key: env
  # --
  @env(['${1:staging}'])
      $0
  @endenv
#+end_src
**** error
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: error
  # key: error
  # --
  @error('${1:title}')
      $0
  @enderror
#+end_src
**** for
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: name
  # key: key
  # --
  @for ($${1:index} = ${2:0}; $1 < ${3:10}; $1++)
      $0
  @endfor
#+end_src
**** foreach
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: foreach
  # key: foreach
  # --
  @foreach ($${1} as ${2:$key =>} ${3:value})
      $0
  @endforeach

#+end_src
**** guest
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: guest
  # key: guest
  # --
  @guest
      $0
  @endguest
#+end_src
**** if
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: if
  # key: if
  # --
  @if ($1)$0
  ${2:@elseif ()}
  @endif
#+end_src
**** include
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: include
  # key: include
  # --
  @include('$0')
#+end_src
**** isset
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: isset
  # key: isset
  # --
  @isset($1)
      $0
  @endisset
#+end_src
**** once
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: once
  # key: once
  # --
  @once
      $0
  @endonce
#+end_src
**** php
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: php
  # key: php
  # --
  @php
      $0
  @endphp
#+end_src
**** production
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: production
  # key: production
  # --
  @production
      $0
  @endproduction
#+end_src
**** section
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: section
  # key: section
  # --
  @section('${1:content}')
      $0
  @endsection
#+end_src
**** switch
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: switch
  # key: switch
  # --
  @switch($1)
      @case($2)
          $0
          @break
      @default
          @break
  @endswitch
#+end_src
**** unless
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: unless
  # key: unless
  # --
  @unless ($1)
      $0
  @endunless
#+end_src
**** yield
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: yield
  # key: yeild
  # --
  @yeild('$0')
#+end_src
**** while
#+begin_src snippet
  # -*- mode: snippet -*-
  # name: while
  # key: while
  # --
  @while ($1)
      $0
  @endwhile
#+end_src
