#+title: Configurations for GNU Emacs
#+author: takeokunn
#+email: bararararatty@gmail.com
#+startup: content
#+startup: nohideblocks
#+html_head: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+html_head: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+html_head: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+html_head: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+html_head: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+html_head: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

* はじめに
** 基本情報
   - repo: [[http://github.com/takeokunn/.emacs.d][takeokunn/.emacs.d]]
   - twitter: [[https://twitter.com/takeokunn][たけてぃ@takeokunn]]
   - blog: [[https://takeokunn.xyz][https://takeokunn.xyz]]
* Header
  #+begin_src emacs-lisp
    ;; init.el --- My init.el
    ;; Configurations for Emacs
    ;;                                         Takeo Obara  <bararararatty@gmail.com>
  #+end_src
* Boot
** env
   #+begin_src emacs-lisp
     (defconst my/loading-profile-p nil
       "If non-nil, use built-in profiler.el.")

     (defconst my/enable-profile nil
       "If true, enable profile")
   #+end_src
** profile
   #+begin_src emacs-lisp
     (when my/enable-profile
       (require 'profiler)
       (profiler-start 'cpu))
   #+end_src
** Magic File Name を一時的に無効にする
   #+begin_src emacs-lisp
     (defconst my/saved-file-name-handler-alist file-name-handler-alist)
     (setq file-name-handler-alist nil)
   #+end_src
** 起動時間計測
   #+begin_src emacs-lisp
     (defconst my/before-load-init-time (current-time))

     ;;;###autoload
     (defun my/load-init-time ()
       "Loading time of user init files including time for `after-init-hook'."
       (let ((time1 (float-time
                     (time-subtract after-init-time my/before-load-init-time)))
             (time2 (float-time
                     (time-subtract (current-time) my/before-load-init-time))))
         (message (concat "Loading init files: %.0f [msec], "
                          "of which %.f [msec] for `after-init-hook'.")
                  (* 1000 time1) (* 1000 (- time2 time1)))))
     (add-hook 'after-init-hook #'my/load-init-time t)

     (defvar my/tick-previous-time my/before-load-init-time)

     ;;;###autoload
     (defun my/tick-init-time (msg)
       "Tick boot sequence at loading MSG."
       (when my/loading-profile-p
         (let ((ctime (current-time)))
           (message "---- %5.2f[ms] %s"
                    (* 1000 (float-time
                             (time-subtract ctime my/tick-previous-time)))
                    msg)
           (setq my/tick-previous-time ctime))))

     (defun my/emacs-init-time ()
       "Emacs booting time in msec."
       (interactive)
       (message "Emacs booting time: %.0f [msec] = `emacs-init-time'."
                (* 1000
                   (float-time (time-subtract
                                after-init-time
                                before-init-time)))))

     (add-hook 'after-init-hook #'my/emacs-init-time)
   #+end_src
** async load
   #+begin_src emacs-lisp
     (defvar my/delayed-priority-high-configurations '())
     (defvar my/delayed-priority-high-configuration-timer nil)

     (defvar my/delayed-priority-low-configurations '())
     (defvar my/delayed-priority-low-configuration-timer nil)

     (add-hook 'emacs-startup-hook
               (lambda ()
                 (setq my/delayed-priority-high-configuration-timer
                       (run-with-timer
                        0.1 0.0001
                        (lambda ()
                          (if my/delayed-priority-high-configurations
                              (let ((inhibit-message t))
                                (eval (pop my/delayed-priority-high-configurations)))
                            (progn
                              (cancel-timer my/delayed-priority-high-configuration-timer))))))
                 (setq my/delayed-priority-low-configuration-timer
                       (run-with-timer
                        0.2 0.001
                        (lambda ()
                          (if my/delayed-priority-low-configurations
                              (let ((inhibit-message t))
                                (eval (pop my/delayed-priority-low-configurations)))
                            (progn
                              (cancel-timer my/delayed-priority-low-configuration-timer))))))))

     (defmacro with-delayed-execution-priority-high (&rest body)
       (declare (indent 0))
       `(setq my/delayed-priority-high-configurations
              (append my/delayed-priority-high-configurations ',body)))

     (defmacro with-delayed-execution (&rest body)
       (declare (indent 0))
       `(setq my/delayed-priority-low-configurations
              (append my/delayed-priority-low-configurations ',body)))
   #+end_src
** autoload-if-found
   #+begin_src emacs-lisp
     ;;;###autoload
     (defun autoload-if-found (functions file &optional docstring interactive type)
       "set autoload iff. FILE has found."
       (when (locate-library file)
         (dolist (f functions)
           (autoload f file docstring interactive type))
         t))
   #+end_src
** el-get
   #+begin_src emacs-lisp
     (eval-when-compile
       (add-to-list 'load-path (locate-user-emacs-file "el-get/el-get"))
       (with-current-buffer
           (url-retrieve-synchronously
            "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
         (goto-char (point-max))
         (eval-print-last-sexp))

       (with-eval-after-load 'el-get-custom
         (setq el-get-git-shallow-clone t)))

     (with-delayed-execution
       (message "Install el-get...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/el-get"))

       (autoload-if-found '(el-get-bundle) "el-get" nil t)

       (with-eval-after-load 'el-get-custom
         (setq el-get-git-shallow-clone t)))
   #+end_src
* Basic
** 末尾のスペースを可視化する
   #+BEGIN_SRC emacs-lisp
     (with-delayed-execution
       (defun my/disable-show-trailing-whitespace ()
         (setq show-trailing-whitespace nil))

       (with-eval-after-load 'comint
         (add-hook 'comint-mode-hook #'my/disable-show-trailing-whitespace))

       (with-eval-after-load 'eshell
         (add-hook 'eshell-mode-hook #'my/disable-show-trailing-whitespace))

       (with-eval-after-load 'eww
         (add-hook 'eww-mode-hook #'my/disable-show-trailing-whitespace))

       (with-eval-after-load 'minibuffer
         (add-hook 'minibuffer-inactive-mode-hook #'my/disable-show-trailing-whitespace))

       (with-eval-after-load 'dashboard
         (add-hook 'dashboard-mode-hook #'my/disable-show-trailing-whitespace))

       (with-eval-after-load 'simple
         (add-hook 'fundamental-mode-hook #'my/disable-show-trailing-whitespace)))
   #+END_SRC
** 行番号を表示する
   #+BEGIN_SRC emacs-lisp
     (with-delayed-execution
       (with-eval-after-load 'linum
         (eval-and-compile
           (setq linum-delay t)))
       (defadvice linum-schedule (around my-linum-schedule () activate)
         (run-with-idle-timer 1 nil #'linum-update-current))
       (global-linum-mode t))
   #+END_SRC
** C-kで行削除
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'simple
       (setq kill-whole-line t))
   #+END_SRC
** カッコの中をハイライトする
   #+BEGIN_SRC emacs-lisp
     (with-delayed-execution
       (show-paren-mode t)

       (with-eval-after-load 'paren
         (setq show-paren-style 'mixed)))
   #+END_SRC
** カッコが自動的に作られるようにする
   #+BEGIN_SRC emacs-lisp
     (with-delayed-execution
       (electric-pair-mode 1))
   #+END_SRC
** coding system
   #+begin_src emacs-lisp
     (with-delayed-execution-priority-high
       ;; language and locale
       (set-language-environment "Japanese")
       (setq system-time-locale "C")

       ;; coding system
       (set-default-coding-systems 'utf-8-unix)
       (prefer-coding-system 'utf-8-unix)
       (set-selection-coding-system 'utf-8-unix)

       ;; prefer-coding-system take effect equally to follows
       (set-buffer-file-coding-system 'utf-8-unix)
       (set-file-name-coding-system 'utf-8-unix)
       (set-terminal-coding-system 'utf-8-unix)
       (set-keyboard-coding-system 'utf-8-unix)
       (setq locale-coding-system 'utf-8-unix))
   #+end_src
** global-auto-revert-mode
   #+begin_src emacs-lisp
     (with-delayed-execution
       (global-auto-revert-mode t))
   #+end_src
** yes/no to y/n
   #+begin_src emacs-lisp
     (with-delayed-execution-priority-high
       (fset 'yes-or-no-p 'y-or-n-p))
   #+end_src
** dired-use-ls-dired
   #+begin_src emacs-lisp
     (with-eval-after-load 'dired-load-hook
       (when (string= system-type "darwin")
         (setq dired-use-ls-dired nil)))
   #+end_src
** keybind
   #+BEGIN_SRC emacs-lisp
     (keyboard-translate ?\C-h ?\C-?)

     (global-set-key (kbd "M-¥") #'(lambda () (interactive) (insert "\\")))
     (global-set-key (kbd "C-h") #'c-hungry-delete-backwards)
     (global-set-key (kbd "C-d") #'c-hungry-delete-forward)
     (global-set-key (kbd "M-h") #'backward-kill-words)
     (global-set-key (kbd "C-z") #'undo)
     (global-set-key (kbd "C-?") #'help-command)
     (global-set-key (kbd "C-a") #'back-to-indentation)
     (global-set-key (kbd "C-c i") #'find-function)
     (global-set-key (kbd "C-x C-o") #'other-window)

     (global-set-key (kbd "C-x l") 'next-buffer)
     (global-set-key (kbd "C-x h") 'previous-buffer)

     (global-set-key (kbd "C-x C-k") nil)
     (global-set-key (kbd "C-x C-n") nil)

     (when window-system
       (global-set-key (kbd "C-x C-c") nil))

     (global-set-key [return] #'(lambda ()
                                  (interactive)
                                  (message "Don't use RETURN!!! Press C-m!! C-m!!!")))
     (global-set-key [tab] #'(lambda ()
                                  (interactive)
                                  (message "Don't use TAB!!! Press C-i!! C-i!!!")))
   #+END_SRC
** common lispを使う
   #+begin_src emacs-lisp
     (eval-when-compile
       (setq byte-compile-warnings '(cl-functions))
       (require 'cl-lib nil t))

     (with-delayed-execution-priority-high
       (message "install cl-lib....")
       (require 'cl-lib))
   #+end_src
** savehistを有効にする
#+begin_src emacs-lisp
  (with-delayed-execution-priority-high 'savehist
    (savehist-mode 1))
#+end_src
** [mac] clipboardに入るようにする
   #+begin_src emacs-lisp
     (with-delayed-execution-priority-high
       (defun my/copy-from-osx ()
         (shell-command-to-string "pbpaste"))
       (defun my/paste-to-osx (text)
         (let ((process-connection-type nil))
           (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
             (process-send-string proc text)
             (process-send-eof proc))))
       (when (and (string= system-type "darwin")
                  (not window-system))
         (setq interprogram-cut-function 'my/paste-to-osx)
         (setq interprogram-paste-function 'my/copy-from-osx)))
   #+end_src
** pluginをnative compする
#+begin_src emacs-lisp
  (with-eval-after-load 'comp
    (defun my/native-comp-packages ()
      (interactive)
      (let ((native-comp-async-jobs-number 4)
            (native-comp-speed 3)
            (native-comp-always-compile t))
        (native-compile-async "~/.emacs.d/init.el")
        (native-compile-async "~/.emacs.d/early-init.el")
        (native-compile-async "~/.emacs.d/el-get" 'recursively)
        (native-compile-async "~/.emacs.d/elpa" 'recursively))))
#+end_src
** native compを無効にする
#+begin_src emacs-lisp
  (with-eval-after-load 'comp
    (setq package-native-compile nil))
#+end_src
** native compのwarningを抑える
#+begin_src emacs-lisp
  (custom-set-variables '(warning-suppress-types '((comp))))
#+end_src
** 同一bufferの名前を変える
#+begin_src emacs-lisp
  (with-eval-after-load 'uniquify
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets))
#+end_src
** killできないようにする
   #+begin_src emacs-lisp
     (eval-and-compile
       (with-current-buffer "*scratch*"
         (emacs-lock-mode 'kill))
       (with-current-buffer "*Messages*"
         (emacs-lock-mode 'kill)))
   #+end_src
 Utility
** fontset
#+begin_src emacs-lisp
  (with-delayed-execution
    (defconst my/enable-warning-log nil)

    (defun set-fontset-font:around (set-fontset-font name target font-spec &optional frame add)
      "Warn if specified font is not installed."
      (if (stringp font-spec)
          (setq font-spec (font-spec :family font-spec)))
      (if (and (fontp font-spec)
               (null (find-font font-spec))
               my/enable-warning-log)
          (warn "set-fontset-font: font %s is not found." (font-get font-spec :family))
        (ignore-errors
            (funcall set-fontset-font name target font-spec frame add))))

    (advice-add 'set-fontset-font :around #'set-fontset-font:around)

    (defun my/reset-default-fontset ()
      "Reset current fontset."
      (interactive)
      ;; reset all settings in default fontset
      (if (find-font (font-spec :family "Noto Sans"))
          (set-fontset-font t '(0 . #x3fffff) "Noto Sans"))
      ;; multiple platform
      (set-fontset-font t 'latin "Noto Sans")
      (set-fontset-font t 'greek "Noto Sans")
      (set-fontset-font t 'phonetic "Noto Sans")
      (set-fontset-font t 'coptic "Noto Sans Coptic")
      (set-fontset-font t 'coptic "Noto Sans Symbols2" nil 'append)
      (set-fontset-font t 'cyrillic "Noto Sans")
      (set-fontset-font t 'armenian "Noto Sans Armenian")
      (set-fontset-font t 'hebrew "Noto Sans Hebrew")
      (set-fontset-font t 'arabic "Noto Sans Arabic")
      (set-fontset-font t 'syriac "Noto Sans Syriac")
      (set-fontset-font t 'thaana "Noto Sans Thaana")
      (set-fontset-font t 'nko "Noto Sans N'Ko")
      (set-fontset-font t 'samaritan "Noto Sans Samaritan")
      (set-fontset-font t 'mandaic "Noto Sans Mandaic")
      (set-fontset-font t 'devanagari "Noto Sans Devanagari")
      (set-fontset-font t 'bengali "Noto Sans Bengali")
      (set-fontset-font t 'gurmukhi "Noto Sans Gurmukhi")
      (set-fontset-font t 'gujarati "Noto Sans Gujanrati")
      (set-fontset-font t 'oriya "Noto Sans Oriya")
      (set-fontset-font t 'tamil "Noto Sans Tamil")
      (set-fontset-font t 'tamil "Noto Sans Tamil Supplement" nil 'append)
      (set-fontset-font t 'telugu "Noto Sans Telugu")
      (set-fontset-font t 'kannada "Noto Sans Kannada")
      (set-fontset-font t 'malayalam "Noto Sans Malayalam")
      (set-fontset-font t 'sinhala "Noto Sans Sinhala")
      (set-fontset-font t 'thai "Noto Sans Thai")
      (set-fontset-font t 'lao "Noto Sans Lao")
      (set-fontset-font t 'tibetan "Noto Sans Tibetan")
      (set-fontset-font t 'burmese "Noto Sans Myanmar")
      (set-fontset-font t 'georgian "Noto Sans Georgian")
      (set-fontset-font t 'hangul "Noto Sans CJK KR")
      (set-fontset-font t 'ethiopic "Noto Sans Ethiopic")
      (set-fontset-font t 'cherokee "Noto Sans Cherokee")
      (set-fontset-font t 'canadian-aboriginal "Noto Sans Canadian Aboriginal")
      (set-fontset-font t 'ogham "Noto Sans Ogham")
      (set-fontset-font t 'runic "Noto Sans Runic")
      (set-fontset-font t 'tagalog "Noto Sans Tagalog")
      (set-fontset-font t 'hanunoo "Noto Sans Hanunoo")
      (set-fontset-font t 'buhid "Noto Sans Buhid")
      (set-fontset-font t 'tagbanwa "Noto Sans Tagbanwa")
      (set-fontset-font t 'khmer "Noto Sans Khmer")
      (set-fontset-font t 'mongolian "Noto Sans Mongolian")
      (set-fontset-font t 'limbu "Noto Sans Limbu")
      (set-fontset-font t 'tai-le "Noto Sans Tai Le")
      (set-fontset-font t 'tai-lue "Noto Sans NewTaiLue")
      (set-fontset-font t 'buginese "Noto Sans Buginese")
      (set-fontset-font t 'tai-tham "Noto Sans Tai Tham")
      (set-fontset-font t 'balinese "Noto Sans Balinese")
      (set-fontset-font t 'sundanese "Noto Sans Sundanese")
      (set-fontset-font t 'vedic "Noto Sans Devanagari")
      (set-fontset-font t 'symbol "Noto Sans CJK JP")
      (set-fontset-font t 'symbol "Noto Sans Symbols2" nil 'append)
      (set-fontset-font t 'symbol "Noto Sans" nil 'append)
      (set-fontset-font t 'symbol "Noto Sans Math" nil 'append)
      (set-fontset-font t 'symbol "Noto Emoji" nil 'append)
      (set-fontset-font t 'symbol "Noto Sans Symbols" nil 'append)
      (set-fontset-font t 'braille "Noto Sans Symbols2")
      (set-fontset-font t 'batak "Noto Sans Batak")
      (set-fontset-font t 'lepcha "Noto Sans Lepcha")
      (set-fontset-font t 'ol-chiki "Noto Sans Ol Chiki")
      (set-fontset-font t 'glagolitic "Noto Sans Glagolitic")
      (set-fontset-font t 'tifinagh "Noto Sans Tifinagh")
      (set-fontset-font t 'han "Noto Sans CJK JP")
      (set-fontset-font t 'ideographic-description "Noto Sans CJK JP")
      (set-fontset-font t 'cjk-misc "Noto Sans CJK JP")
      (set-fontset-font t 'kana "Noto Sans CJK JP")
      (set-fontset-font t 'bopomofo "Noto Sans CJK TC")
      (set-fontset-font t 'kanbun "Noto Sans CJK JP")
      (set-fontset-font t 'yi "Noto Sans Yi")
      (set-fontset-font t 'lisu "Noto Sans Lisu")
      (set-fontset-font t 'vai "Noto Sans Vai")
      (set-fontset-font t 'bamum "Noto Sans Bamum")
      (set-fontset-font t 'syloti-nagri "Noto Sans Syloti Nagri")
      (set-fontset-font t 'north-indic-number "Noto Sans Devanagari")
      (set-fontset-font t 'phags-pa "Noto Sans Phags Pa")
      (set-fontset-font t 'saurashtra "Noto Sans Saurashtra")
      (set-fontset-font t 'kayah-li "Noto Sans Kayah Li")
      (set-fontset-font t 'rejang "Noto Sans Rejang")
      (set-fontset-font t 'javanese "Noto Sans Javanese")
      (set-fontset-font t 'cham "Noto Sans Cham")
      (set-fontset-font t 'tai-viet "Noto Sans Tai Viet")
      (set-fontset-font t 'meetei-mayek "Noto Sans Meetei Mayek")
      (set-fontset-font t 'vertical-form "Noto Sans CJK JP")
      (set-fontset-font t '(#xfe50 . #xfe6b) "Noto Sans CJK JP") ; symbol
      (set-fontset-font t '(#xfff9 . #xfffb) "Noto Sans Symbols2") ; nil
      (set-fontset-font t 'linear-b "Noto Sans Linear B")
      (set-fontset-font t 'aegean-number "Noto Sans Linear B")
      (set-fontset-font t 'ancient-greek-number "Noto Sans Symbols2")
      (set-fontset-font t 'ancient-symbol "Noto Sans Symbols2")
      (set-fontset-font t 'phaistos-disc "Noto Sans Symbols2")
      (set-fontset-font t 'lycian "Noto Sans Lycian")
      (set-fontset-font t 'carian "Noto Sans Carian")
      (set-fontset-font t 'old-italic "Noto Sans Old Italic")
      (set-fontset-font t 'gothic "Noto Sans Gothic")
      (set-fontset-font t 'old-permic "Noto Sans Old Permic")
      (set-fontset-font t 'ugaritic "Noto Sans Ugaritic")
      (set-fontset-font t 'old-persian "Noto Sans OldPersian")
      (set-fontset-font t 'deseret "Noto Sans Deseret")
      (set-fontset-font t 'shavian "Noto Sans Shavian")
      (set-fontset-font t 'osmanya "Noto Sans Osmanya")
      (set-fontset-font t 'osage "Noto Sans Osage")
      (set-fontset-font t 'elbasan "Noto Sans Elbasan")
      (set-fontset-font t 'caucasian-albanian "Noto Sans CaucAlban")
      (set-fontset-font t 'linear-a "Noto Sans Linear A")
      (set-fontset-font t 'cypriot-syllabary "Noto Sans Cypriot")
      (set-fontset-font t 'aramaic "Noto Sans ImpAramaic")
      (set-fontset-font t 'palmyrene "Noto Sans Palmyrene")
      (set-fontset-font t 'nabataean "Noto Sans Nabataean")
      (set-fontset-font t 'hatran "Noto Sans Hatran")
      (set-fontset-font t 'phoenician "Noto Sans Phoenician")
      (set-fontset-font t 'lydian "Noto Sans Lydian")
      (set-fontset-font t 'meroitic "Noto Sans Meroitic")
      (set-fontset-font t 'kharoshthi "Noto Sans Kharoshthi")
      (set-fontset-font t 'old-south-arabian "Noto Sans OldSouArab")
      (set-fontset-font t 'old-north-arabian "Noto Sans OldNorArab")
      (set-fontset-font t 'manichaean "Noto Sans Manichaean")
      (set-fontset-font t 'avestan "Noto Sans Avestan")
      (set-fontset-font t 'inscriptional-parthian "Noto Sans Inscriptional Parthian")
      (set-fontset-font t 'inscriptional-pahlavi "Noto Sans Inscriptional Pahlavi")
      (set-fontset-font t 'psalter-pahlavi "Noto Sans PsaPahlavi")
      (set-fontset-font t 'old-turkic "Noto Sans Old Turkic")
      (set-fontset-font t 'old-hungarian "Noto Sans OldHung")
      (set-fontset-font t 'hanifi-rohingya "Noto Sans HanifiRohg")
      (set-fontset-font t 'rumi-number "Noto Sans Symbols2")
      (set-fontset-font t 'old-sogdian "Noto Sans OldSogdian")
      (set-fontset-font t 'sogdian "Noto Sans Sogdian")
      (set-fontset-font t 'elymaic "Noto Sans Elymaic")
      (set-fontset-font t 'brahmi "Noto Sans Brahmi")
      (set-fontset-font t 'kaithi "Noto Sans Kaithi")
      (set-fontset-font t 'sora-sompeng "Noto Sans SoraSomp")
      (set-fontset-font t 'chakma "Noto Sans Chakma")
      (set-fontset-font t 'mahajani "Noto Sans Mahajani")
      (set-fontset-font t 'sharada "Noto Sans Sharada")
      (set-fontset-font t 'sinhala-archaic-number "Noto Sans Sinhala")
      (set-fontset-font t 'khojki "Noto Sans Khojki")
      (set-fontset-font t 'multani "Noto Sans Multani")
      (set-fontset-font t 'khudawadi "Noto Sans Khudawadi")
      (set-fontset-font t 'grantha "Noto Sans Grantha")
      (set-fontset-font t 'newa "Noto Sans Newa")
      (set-fontset-font t 'tirhuta "Noto Sans Tirhuta")
      (set-fontset-font t 'siddham "Noto Sans Siddham")
      (set-fontset-font t 'modi "Noto Sans Modi")
      (set-fontset-font t 'takri "Noto Sans Takri")
      (set-fontset-font t 'ahom "Noto Serif Ahom")
      (set-fontset-font t 'dogra "Noto Serif Dogra")
      (set-fontset-font t 'warang-citi "Noto Sans WarangCiti")
      (set-fontset-font t 'zanabazar-square "Noto Sans Zanabazar")
      (set-fontset-font t 'soyombo "Noto Sans Soyombo")
      (set-fontset-font t 'pau-cin-hau "Noto Sans PauCinHau")
      (set-fontset-font t 'bhaiksuki "Noto Sans Bhaiksuki")
      (set-fontset-font t 'marchen "Noto Sans Marchen")
      (set-fontset-font t 'masaram-gondi "Noto Sans Masaram Gondi")
      (set-fontset-font t 'gunjala-gondi "Noto Sans Gunjala Gondi")
      (set-fontset-font t 'cuneiform "Noto Sans Cuneiform")
      (set-fontset-font t 'cuneiform-numbers-and-punctuation "Noto Sans Cuneiform")
      (set-fontset-font t 'egyptian "Noto Sans EgyptHiero")
      (set-fontset-font t 'anatolian "Noto Sans AnatoHiero")
      (set-fontset-font t 'mro "Noto Sans Mro")
      (set-fontset-font t 'bassa-vah "Noto Sans Bassa Vah")
      (set-fontset-font t 'pahawh-hmong "Noto Sans Pahawh Hmong")
      (set-fontset-font t 'miao "Noto Sans Miao")
      (set-fontset-font t 'tangut "Noto Serif Tangut")
      (set-fontset-font t 'tangut-components "Noto Serif Tangut")
      (set-fontset-font t '(#x16fe0 . #x16fe0) "Noto Serif Tangut")
      (set-fontset-font t 'duployan-shorthand "Noto Sans Duployan")
      (set-fontset-font t 'byzantine-musical-symbol "Noto Music")
      (set-fontset-font t 'musical-symbol "Noto Music")
      (set-fontset-font t 'ancient-greek-musical-notation "Noto Music")
      (set-fontset-font t 'mayan-numeral "Noto Sans Mayan Numerals")
      (set-fontset-font t 'tai-xuan-jing-symbol "Noto Sans Symbols2")
      (set-fontset-font t 'counting-rod-numeral "Noto Sans Symbols2")
      (set-fontset-font t 'mathematical "Noto Sans Math")
      (set-fontset-font t 'wancho "Noto Sans Wancho")
      (set-fontset-font t 'mende-kikakui "Noto Sans Mende Kikakui")
      (set-fontset-font t 'adlam "Noto Sans Adlam")
      (set-fontset-font t 'indic-siyaq-number "Noto Sans Indic Siyaq Numbers")
      (set-fontset-font t '(#x1ee00 . #x1eeff) "Noto Sans Math") ; arabic
      (set-fontset-font t 'mahjong-tile "Noto Sans Symbols2")
      (set-fontset-font t 'domino-tile "Noto Sans Symbols2")
      (set-fontset-font t 'playing-cards "Noto Sans Symbols2")
      ;; non Noto fonts
      (set-fontset-font t 'kana "UniHentaiKana" nil 'append)
      (set-fontset-font t 'latin "Iosevka" nil 'append)
      (set-fontset-font t 'symbol "Iosevka" nil 'append)
      ;; Nerd Font (defined thru -#xfd46)
      (set-fontset-font t '( #xe000 .  #xf136) "Inconsolata Nerd Font")

      (when (eq window-system 'w32)
        (set-fontset-font t 'bengali    "Nirmala UI" nil 'prepend)
        (set-fontset-font t 'gurmukhi   "Nirmala UI" nil 'prepend)
        (set-fontset-font t 'gujarati   "Nirmala UI" nil 'prepend)
        (set-fontset-font t 'telugu     "Nirmala UI" nil 'prepend)
        (set-fontset-font t 'kannada    "Nirmala UI" nil 'prepend)
        (set-fontset-font t 'malayalam  "Nirmala UI" nil 'prepend)
        (set-fontset-font t 'vedic      "Nirmala UI" nil 'prepend)
        (set-fontset-font t 'devanagari "Nirmala UI" nil 'prepend)
        (set-fontset-font t 'brahmi     "Segoe UI Historic" nil 'prepend)
        (set-fontset-font t 'georgian   "Segoe UI" nil 'prepend)
        (set-fontset-font t '( #x0300 .  #x1cff) "Arial" nil 'append)
        (set-fontset-font t '( #x2000 .  #x27bf) "Segoe UI Symbol" nil 'append)
        (set-fontset-font t '( #x2e00 .  #xdfff) "花園明朝 A Regular" nil 'append)
        (set-fontset-font t '( #xfe0e .  #xfe0f) "Segoe UI Emoji")
        (set-fontset-font t '( #xf137 .  #xf69d) "花園明朝 A Regular")
        (set-fontset-font t '(#x1b000 . #x1b000) "Meiryo UI")
        (set-fontset-font t '(#x1f300 . #x1f9ff) "Segoe UI Emoji" nil 'append)
        (set-fontset-font t '(#x1fa70 . #x1fbff) "Segoe UI Emoji" nil 'append)
        (set-fontset-font t '(#x1f900 . #x1f9e0) "Segoe UI Emoji" nil 'append)
        (set-fontset-font t '(#x20000 . #x2a6ff) "花園明朝 B Regular")
        (set-fontset-font t '(#x2a700 . #x2fffd) "花園明朝 C Regular"))

      (when (not (eq system-type 'windows-nt))
        (set-fontset-font t '( #x2e00 .  #xdfff) "Hanazono Mincho A Regular" nil 'append)
        (set-fontset-font t '( #xf137 .  #xf69d) "Hanazono Mincho A Regular")
        (set-fontset-font t '(#x20000 . #x2a6ff) "Hanazono Mincho B Regular")
        (set-fontset-font t '(#x2a700 . #x2fffd) "Hanazono Mincho C Regular")))

    (my/reset-default-fontset))
#+end_src
* Libraries
** alert
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'alert))

  (with-delayed-execution-priority-high
    (message "Install alert...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/alert")))
#+end_src
** async
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'async))

  (with-delayed-execution-priority-high
    (message "Install async...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/async")))

#+end_src
** bui
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'bui))

  (with-delayed-execution-priority-high
    (message "Install bui...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/bui")))

#+end_src
** closql
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'closql))

  (with-delayed-execution-priority-high
    (message "Install closql...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/closql")))
#+end_src
** compat
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'compat))

  (with-delayed-execution-priority-high
    (message "Install compat...")
    (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/compat"))))
#+end_src
** dash
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'dash))

     (with-delayed-execution-priority-high
       (message "Install dash...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/dash"))))
   #+end_src
** esxml
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'esxml :url "https://github.com/tali713/esxml.git"))

  (with-delayed-execution-priority-high
    (message "Install esxml...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/esxml")))
#+end_src
** emacsql
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'emacsql))

  (with-delayed-execution-priority-high
    (message "Install emacsql...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/emacsql")))

#+end_src
** f
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'f))

     (with-delayed-execution-priority-high
       (message "Install f...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/f"))))
   #+end_src
** frame-local
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'frame-local))

  (with-delayed-execution-priority-high
    (message "Install frame-local...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/frame-local")))

#+end_src
** helm
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'helm))

  (with-delayed-execution-priority-high
    (message "Install helm...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/helm")))
#+end_src
** hide-lines
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle "vapniks/hide-lines"
                   :url "https://github.com/vapniks/hide-lines.git"))

  (with-delayed-execution
    (message "Install hide-lines...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/hide-lines")))
#+end_src
** hsluv
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'hsluv))

  (with-delayed-execution
    (message "Install hsluv...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/hsluv")))
#+end_src
** ht
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ht))

     (with-delayed-execution-priority-high
       (message "Install ht...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/ht"))))
   #+end_src
** hydra
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'hydra))

  (with-delayed-execution-priority-high
    (message "Install hydra...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/hydra")))
#+end_src
** inflections
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'inflections))

  (with-delayed-execution-priority-high
    (message "Install inflections...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/inflections")))
#+end_src
** list-utils
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'list-utils))

  (with-delayed-execution-priority-high
    (message "Install list-utils...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/list-utils")))
#+end_src
** lv
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'lv))

     (with-delayed-execution-priority-high
       (message "Install lv...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/lv"))))
   #+end_src
** mustache
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'mustache))

     (with-delayed-execution-priority-high
       (message "Install mustache...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/mustache"))))
   #+end_src
** ov
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'ov))

  (with-delayed-execution
    (message "Install ov...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/ov")))
#+end_src
** pfuture
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'pfuture))

  (with-delayed-execution-priority-high
    (message "Install pfuture...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/pfuture")))
#+end_src
** posframe
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'posframe))

  (with-delayed-execution-priority-high
    (message "Install posframe...")
    (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/posframe"))))
#+end_src
** popup
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'popup))

  (with-delayed-execution
    (message "Install popup...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/popup")))

#+end_src
** queue
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'queue))

  (with-delayed-execution-priority-high
    (message "Install queue...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/queue")))
#+end_src
** s
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 's))

     (with-delayed-execution-priority-high
       (message "Install s...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/s"))))
   #+end_src
** sesman
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'sesman))

  (with-delayed-execution-priority-high
    (message "Install sesman...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/sesman")))
#+end_src
** seq
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'seq))

  (with-delayed-execution-priority-high
    (message "Install seq...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/seq")))
#+end_src
** spinner
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'spinner))

     (with-delayed-execution-priority-high
       (message "Install spinner...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/spinner"))))
   #+end_src
** shrink-path
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'shrink-path))

     (with-delayed-execution-priority-high
       (message "Install shrink-path...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/shrink-path"))))
   #+end_src
** ts
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'ts))

  (with-delayed-execution-priority-high
    (message "Install ts...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/ts")))
#+end_src
** treemacs
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'treemacs))

  (with-delayed-execution-priority-high
    (message "Install treemacs...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/treemacs/src/elisp")))
#+end_src
** treepy
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'treepy))

  (with-delayed-execution-priority-high
    (message "Install treepy...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/treepy")))
#+end_src
** tree-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'tree-mode))

  (with-delayed-execution-priority-high
    (message "Install tree-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/tree-mode")))
#+end_src
** yaml
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'yaml))

  (with-delayed-execution-priority-high
    (message "Install yaml...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/yaml")))
#+end_src
** visual-fill-column
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'visual-fill-column))

  (with-delayed-execution-priority-high
    (message "Install visual-fill-column...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/visual-fill-column")))

#+end_src
** web-server
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'web-server))

  (with-delayed-execution-priority-high
    (message "Install web-server...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/web-server")))
#+end_src
** websocket
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'websocket))

  (with-delayed-execution-priority-high
    (message "Install websocket...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/websocket")))

#+end_src
* Language
** apache-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'apache-mode))

  (with-delayed-execution
    (message "Install apache-mode")
    (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/apache-mode")))
    (when (autoload-if-found '(apache-mode) "apache-mode" nil t)
      (push '("\\.htaccess$" . apache-mode) auto-mode-alist)))
#+end_src
** c++-mode
   #+begin_src emacs-lisp
     (with-eval-after-load 'c++-mode
       (add-hook 'c++-mode-hook #'lsp-deferred))
   #+end_src
** c-mode
   #+begin_src emacs-lisp
     (with-eval-after-load 'c-mode
       (add-hook 'c-mode-hook #'lsp-deferred))
   #+end_src
** clojure-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'clojure-mode))

     (with-delayed-execution
       (message "Install clojure-mode")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/clojure-mode")))

       (when (autoload-if-found '(clojure-mode clojurescript-mode) "clojure-mode" nil t)
         (push '("\\.clj$" . clojure-mode) auto-mode-alist)
         (push '("\\.cljs$" . clojurescript-mode) auto-mode-alist))

       (with-eval-after-load 'clojure-mode
         (setq clojure-toplevel-inside-comment-form t)
         (add-hook 'clojure-mode-hook #'lsp-deferred)))
   #+END_SRC
** cmake-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'cmake-mode))

     (with-delayed-execution
       (message "Install cmake...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/cmake-mode")))
       (when (autoload-if-found '(cmake-mode) "cmake-mode" nil t)
         (push '("\\.cmake$" . cmake-mode) auto-mode-alist)))
   #+END_SRC
** coffee-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'coffee-mode))

     (with-delayed-execution
       (message "Install coffee-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/coffee-mode")))
       (when (autoload-if-found '(coffee-mode) "coffee-mode" nil t)
         (push '("\\.coffee$" . coffee-mode) auto-mode-alist)))
   #+END_SRC
** csharp-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'csharp-mode))

     (with-delayed-execution
       (message "Install csharp-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/csharp-mode")))
       (when (autoload-if-found '(csharp-mode) "csharp-mode" nil t)
         (push '("\\.cs$" . csharp-mode) auto-mode-alist)))
   #+END_SRC
** css-mode
   #+begin_src emacs-lisp
     (with-eval-after-load 'css-mode
       (add-hook 'css-mode-hook #'lsp-deferred))
   #+end_src
** csv-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'csv-mode))

     (with-delayed-execution
       (message "Install csv-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/csv-mode")))
       (when (autoload-if-found '(csv-mode) "csv-mode" nil t)
         (push '("\\.csv$" . csv-mode) auto-mode-alist)))
   #+END_SRC
** cuda-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'cuda-mode))

  (with-delayed-execution
    (message "Install cuda-mode...")
    (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/cuda-mode")))
    (when (autoload-if-found '(cuda-mode) "cuda-mode" nil t)
      (push '("\\.cu$" . cuda-mode) auto-mode-alist)
      (push '("\\.cu$" . cuda-mode) auto-mode-alist)))
#+end_src
** dart-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'dart-mode))

     (with-delayed-execution
       (message "Install dart-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/dart-mode")))
       (when (autoload-if-found '(dart-mode) "dart-mode" nil t)
         (push '("\\.dart$" . dart-mode) auto-mode-alist)))
   #+end_src
** direnv-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'direnv))

  (with-delayed-execution
    (message "Install direnv-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/direnv"))
    (when (autoload-if-found '(direnv-mode direnv-envrc-mode) "direnv" nil t)
      (add-to-list 'auto-mode-alist '("\\.envrc\\'" . direnv-envrc-mode))
      (direnv-mode)))
#+end_src
** docker-compose-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'docker-compose-mode))

     (with-delayed-execution
       (message "Install docker-comopse-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/docker-compose-mode")))
       (when (autoload-if-found '(docker-compose-mode) "docker-compose-mode" nil t)
         (push '("\\docker-compose*" . docker-compose-mode) auto-mode-alist)))
   #+end_src
** dockerfile-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'dockerfile-mode))

     (with-delayed-execution
       (message "Install dockerfile-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/dockerfile-mode")))
       (when (autoload-if-found '(dockerfile-mode) "dockerfile-mode" nil t)
         (push '("\\Dockerfile$" . dockerfile-mode) auto-mode-alist)))
   #+END_SRC
** dotenv-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'dotenv-mode))

     (with-delayed-execution
       (message "Install dotenv-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/dotenv-mode")))
       (when (autoload-if-found '(dotenv-mode) "dotenv-mode" nil t)
         (push '(".env" . dotenv-mode) auto-mode-alist)
         (push '("\\.env\\..*\\'" . dotenv-mode) auto-mode-alist)))
   #+end_src
** emmet-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'emmet-mode))

     (with-delayed-execution
       (message "Install emmet-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/emmet-mode")))
       (autoload-if-found '(emmet-mode) "emmet-mode" nil t)

       (with-eval-after-load 'html-mode
         (add-hook 'html-mode-hook #'emmet-mode))

       (with-eval-after-load 'web-mode
         (add-hook 'web-mode-hook #'emmet-mode))

       (with-eval-after-load 'css-mode
         (add-hook 'css-mode-hook #'emmet-mode))

       (with-eval-after-load 'nxml-mode
         (add-hook 'nxml-mode-hook #'emmet-mode))

       (with-eval-after-load 'web-php-blade-mode
         (add-hook 'web-php-blade-mode #'emmet-mode))

       (with-eval-after-load 'typescript-tsx-mode
         (add-hook 'typescript-tsx-mode-hook #'emmet-mode))

       (with-eval-after-load 'emmet-mode
         (define-key emmet-mode-keymap (kbd "C-j") nil)
         (define-key emmet-mode-keymap (kbd "M-j") 'emmet-expand-line)
         (setq emmet-self-closing-tag-style "")
         (setq emmet-indent-after-insert nil)))
   #+END_SRC
** fish-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'fish-mode))

     (with-delayed-execution
       (message "Install fish-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/fish-mode")))
       (when (autoload-if-found '(fish-mode) "fish-mode" nil t)
         (push '("\\.fish$" . fish-mode) auto-mode-alist))
       (with-eval-after-load "fish-mode"
         (setq fish-enable-auto-indent t)))
   #+END_SRC
** git-modes
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'git-modes))

     (with-delayed-execution
       (message "Install git-modes...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/git-modes")))
       (when (autoload-if-found '(gitignore-mode gitconfig-mode gitattributes-mode) "git-modes" nil t)
         ;; gitignore-mode
         (push '("\\.dockerignore$" . gitignore-mode) auto-mode-alist)
         (push '("\\.gitignore$" . gitignore-mode) auto-mode-alist)
         (push '("\\.prettierignore$" . gitignore-mode) auto-mode-alist)
         (push '("/git/ignore\\'" . gitignore-mode) auto-mode-alist)

         ;; gitconfig-mode
         (push '("\\.git-pr-release$" . gitconfig-mode) auto-mode-alist)
         (push '("\\.editorconfig$" . gitconfig-mode) auto-mode-alist)
         (push '("\\.gitconfig$" . gitconfig-mode) auto-mode-alist)
         (push '("/\\.git/config\\'" . gitconfig-mode) auto-mode-alist)
         (push '("/modules/.*/config\\'" . gitconfig-mode) auto-mode-alist)
         (push '("/git/config\\'" . gitconfig-mode) auto-mode-alist)
         (push '("/\\.gitmodules\\'" . gitconfig-mode) auto-mode-alist)
         (push '("/etc/gitconfig\\'" . gitconfig-mode) auto-mode-alist)

         ;; gitattributes
         (push '("/\\.gitattributes\\'" . gitattributes-mode) auto-mode-alist)
         (push '("/info/attributes\\'" . gitattributes-mode) auto-mode-alist)
         (push '("/git/attributes\\'" . gitattributes-mode) auto-mode-alist)))
   #+end_src
** glsl-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'glsl-mode))

     (with-delayed-execution
       (message "Install glsl-mode")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/glsl-mode")))
       (when (autoload-if-found '(glsl-mode) "glsl-mode" nil t)
         (push '("\\.vsh$" . glsl-mode) auto-mode-alist)
         (push '("\\.fsh$" . glsl-mode) auto-mode-alist)))
   #+END_SRC
** go-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'go-mode))

     (with-delayed-execution
       (message "Install go-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/go-mode")))

       (when (autoload-if-found '(go-mode) "go-mode" nil t)
         (push '("\\.go$" . go-mode) auto-mode-alist)
         (push '("^go.mod$" . go-dot-mod-mode) auto-mode-alist))

       (with-eval-after-load 'go-mode
         (add-hook 'go-mode-hook #'lsp-deferred)
         (add-hook 'before-save-hook #'gofmt-before-save)
         (setq gofmt-command "goimports")))
   #+END_SRC
** gradle-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'gradle-mode))

     (with-delayed-execution
       (message "Install gradle-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/gradle-mode")))
       (when (autoload-if-found '(gradle-mode) "gradle-mode" nil t)
         (push '("\\.gradle$" . gradle-mode) auto-mode-alist)))
   #+END_SRC
** graphql-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'graphql-mode))

     (with-delayed-execution
       (message "Install graphql-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/graphql-mode")))
       (when (autoload-if-found '(graphql-mode) "graphql-mode" nil t)
         (add-to-list 'auto-mode-alist '("\\.graphql\\'" . graphql-mode))
         (add-to-list 'auto-mode-alist '("\\.graphql\\'" . graphql-mode)))
       (with-eval-after-load 'graphql-mode
         (setq graphql-indent-level 4)))
   #+end_src
** haskell-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle "haskell/haskell-mode"))

     (with-delayed-execution
       (message "Install haskell-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/haskell-mode")))
       (when (autoload-if-found '(haskell-mode) "haskell-mode" nil t)
         (push '("\\.hs$" . haskell-mode) auto-mode-alist)
         (push '("\\.cable$" . haskell-mode) auto-mode-alist)))
   #+END_SRC
** hy-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'hy-mode))

  (with-delayed-execution
    (message "Install hy-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/hy-mode"))
    (when (autoload-if-found '(hy-mode) "hy-mode" nil t)
      (push '("\\.hy$" . hy-mode) auto-mode-alist)))
#+end_src
** java-mode
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install java-mode...")
    (when (autoload-if-found '(java-mode) "java-mode" nil t)
      (push '("\\.java$" . java-mode) auto-mode-alist)))
#+end_src
** js2-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'js2-mode))

     (with-delayed-execution
       (message "Install js2-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/js2-mode")))
       (when (autoload-if-found '(js2-mode) "js2-mode" nil t)
         (push '("\\.js$" . js2-mode) auto-mode-alist))
       (with-eval-after-load 'js2-mode
         (add-hook 'js2-mode-hook #'lsp-deferred)))
   #+END_SRC
** json-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle "Sterlingg/json-snatcher")
       (el-get-bundle "joshwnj/json-mode"))

     (with-delayed-execution
       (message "Install json-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/json-snatcher")))
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/json-mode")))
       (when (autoload-if-found '(json-mode) "json-mode" nil t)
         (push '("\\.json$" . json-mode) auto-mode-alist)
         (push '("\\.textlintrc$" . json-mode) auto-mode-alist)
         (push '("\\.prettierrc$" . json-mode) auto-mode-alist)
         (push '("\\composer.lock$" . json-mode) auto-mode-alist)))
   #+END_SRC
** jq-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'jq-mode))

  (with-delayed-execution
    (message "Install jq-mode...")
    (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/jq-mode")))
    (when (autoload-if-found '(jq-interactively) "jq-mode" nil t)
      (with-eval-after-load 'json-mode
        (define-key json-mode-map (kbd "C-c C-j") #'jq-interactively)))
    (with-eval-after-load 'ob-babel
      (org-babel-do-load-languages 'org-babel-load-languages
                                   '((jq . t)))))
#+end_src
** kotlin-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'kotlin-mode))

  (with-delayed-execution
    (message "Install kotlin-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/kotlin-mode"))
    (when (autoload-if-found '(kotlin-mode) "kotlin-mode" nil t)
      (push '("\\.kts?\\'" . kotlin-mode) auto-mode-alist)))
#+end_src
** lisp-mode
   #+BEGIN_SRC emacs-lisp
     (with-delayed-execution
       (when (autoload-if-found '(lisp-mode) "lisp-mode" nil t)
         (push '("\\.lemrc$" . lisp-mode) auto-mode-alist)
         (push '("\\.Cask$" . lisp-mode) auto-mode-alist)))
   #+END_SRC
** lua-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'lua-mode))

  (with-delayed-execution
    (message "Install lua-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/lua-mode"))
    (when (autoload-if-found '(lua-mode) "lua-mode" nil t)
      (push '("\\.lua$" . lua-mode) auto-mode-alist)))
#+end_src
** markdown-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle markdown-mode))

     (with-delayed-execution
       (message "Install markdown-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/poly-markdown")))
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/markdown-mode")))
       (when (autoload-if-found '(markdown-mode) "markdown-mode" nil t)
         (push '("\\.md$" . markdown-mode) auto-mode-alist)
         (push '("\\.markdown$" . markdown-mode) auto-mode-alist)))
   #+END_SRC
** makefile-mode
   #+begin_src emacs-lisp
     (with-delayed-execution
       (when (autoload-if-found '(makefile-mode) "makefile-mode" nil t)
         (push '("\\.mk$" . makefile-mode) auto-mode-alist)
         (push '("Makefile" . makefile-mode) auto-mode-alist)))
   #+end_src
** neon-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'neon-mode))

  (with-delayed-execution
    (message "Install neon-mode...")
    (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/neon-mode")))
    (when (autoload-if-found '(neon-mode) "neon-mode" nil t)
      (push '("\\.neon$" . neon-mode) auto-mode-alist)))
#+end_src
** ninja-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'ninja-mode))

  (with-delayed-execution
    (message "Install ninja-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/ninja-mode"))
    (when (autoload-if-found '(ninja-mode) "ninja-mode" nil t)
      (push '("\\.ninja$" . ninja-mode) auto-mode-alist)))
#+end_src
** nix-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'nix-mode))

  (with-delayed-execution
    (message "Install nix-mode...")
    (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/nix-mode")))
    (when (autoload-if-found '(nix-mode) "nix-mode" nil t)
      (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))))
#+end_src
** nginx-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'nginx-mode))

     (with-delayed-execution
       (message "Install nginx-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/nginx-mode")))
       (when (autoload-if-found '(nginx-mode) "nginx-mode" nil t)
         (push '("nginx\\.conf\\'" . nginx-mode) auto-mode-alist)
         (push '("/nginx/.+\\.conf\\'" . nginx-mode) auto-mode-alist)
         (push '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode) auto-mode-alist))
       (with-eval-after-load 'nginx-mode
         (setq nginx-indent-tabs-mode t)))
   #+END_SRC
** nov-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'nov :url "https://depp.brause.cc/nov.el.git"))

  (with-delayed-execution
    (message "Install nov-mode...")
    (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/nov")))
    (when (autoload-if-found '(nov-mode) "nov" nil t)
      (push '("\\.epub\\'" . nov-mode) auto-mode-alist)))
#+end_src
** php-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle "emacs-php/php-mode"))

     (with-delayed-execution
       (message "Install php-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/php-mode/lisp"))

       (when (autoload-if-found '(php-mode php-current-class php-current-namespace) "php-mode" nil t)
         (push '("\\.php$" . php-mode) auto-mode-alist))

       (with-eval-after-load 'php-mode
         (add-hook 'php-mode-hook #'lsp-deferred)
         (define-key php-mode-map (kbd "C-c C--") #'php-current-class)
         (define-key php-mode-map (kbd "C-c C-=") #'php-current-namespace)
         (setq php-mode-coding-style 'psr2)))
   #+END_SRC
** phpt-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'phpt-mode))

     (with-delayed-execution
       (message "Install phpt-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/phpt-mode"))
       (when (autoload-if-found '(phpt-mode) "phpt-mode" nil t)
         (push '("\\.phpt$" . phpt-mode) auto-mode-alist)))
   #+end_src
** plantuml-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'plantuml-mode))

     (with-delayed-execution
       (message "Install plantuml-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/plantuml-mode"))
       (when (autoload-if-found '(plantuml-mode) "plantuml-mode" nil t)
         (push '("\\.pu$" . plantuml-mode) auto-mode-alist)))
   #+END_SRC
** prisma-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'prisma-mode
         :url "https://github.com/pimeys/emacs-prisma-mode.git"))

     (with-delayed-execution
       (message "Install prisma-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/prisma-mode"))
       (when (autoload-if-found '(prisma-mode) "prisma-mode" nil t)
         (push '("\\.prisma" . prisma-mode) auto-mode-alist)))
   #+end_src
** processing-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'processing-mode))

     (with-delayed-execution
       (message "Install processing-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/processing-mode"))
       (when (autoload-if-found '(processing-mode) "processing-mode" nil t)
         (push '("\\.pde$" . processing-mode) auto-mode-alist))
       (with-eval-after-load 'processing-mode
         (setq processing-location "/opt/processing/processing-java")
         (setq processing-output-dir "/tmp")))
   #+END_SRC
** python-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'python-mode))

     (with-delayed-execution
       (message "Install python-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/python-mode"))
       (when (autoload-if-found '(python-mode) "python-mode" nil t)
         (push '("\\.py$" . python-mode) auto-mode-alist)))
   #+END_SRC
** robots-txt-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'robots-txt-mode
      :url "https://github.com/emacs-php/robots-txt-mode.git"))

  (with-delayed-execution
    (message "Install robots-txt-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/robots-txt-mode"))
    (when (autoload-if-found '(robots-txt-mode) "robots-txt-mode" nil t)
      (push '("/robots\\.txt\\'" . robots-txt-mode) auto-mode-alist)))
#+end_src
** ruby-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ruby-mode))

     (with-delayed-execution
       (message "Install ruby-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ruby-mode"))
       (when (autoload-if-found '(ruby-mode) "ruby-mode" nil t)
         (push '("\\.rb$" . ruby-mode) auto-mode-alist)
         (push '("\\.irbrc$" . ruby-mode) auto-mode-alist)
         (push '("Capfile" . ruby-mode) auto-mode-alist)
         (push '("Gemfile" . ruby-mode) auto-mode-alist)
         (push '("Schemafile" . ruby-mode) auto-mode-alist)
         (push '(".pryrc" . ruby-mode) auto-mode-alist)
         (push '("Fastfile" . ruby-mode) auto-mode-alist)
         (push '("Matchfile" . ruby-mode) auto-mode-alist)
         (push '("Procfile" . ruby-mode) auto-mode-alist)
         (push '(".git-pr-template" . ruby-mode) auto-mode-alist)
         (push '(".gemrc" . ruby-mode) auto-mode-alist))
       (with-eval-after-load 'ruby-mode
         (setq ruby-insert-encoding-magic-comment nil)))
   #+END_SRC
** rust-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'rust-mode))

     (with-delayed-execution
       (message "Install rust-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/rust-mode"))
       (when (autoload-if-found '(rust-mode) "rust-mode" nil t)
         (push '("\\.rs$" . rust-mode) auto-mode-alist))

       (with-eval-after-load 'rust-mode
         (add-hook 'rust-mode-hook #'lsp)))
   #+END_SRC
** scala-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'scala-mode))

     (with-delayed-execution
       (message "Install scala-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/scala-mode"))
       (when (autoload-if-found '(scala-mode) "scala-mode" nil t)
         (push '("\\.scala$" . scala-mode) auto-mode-alist)))
   #+END_SRC
** scheme-mode
   #+begin_src emacs-lisp
     (with-delayed-execution
       (message "Install scheme...")
       (require 'scheme)
       (with-eval-after-load 'scheme
         (setq scheme-program-name "gosh -i")))
   #+end_src
** scss-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'scss-mode))

     (with-delayed-execution
       (message "Install scss-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/scss-mode"))

       (when (autoload-if-found '(scss-mode) "scss-mode" nil t)
         (push '("\\.scss$" . scss-mode) auto-mode-alist))

       (with-eval-after-load 'scss-mode
         (add-hook 'scss-mode-hook #'(lambda ()
                                       (let ((lsp-diagnostics-provider :none))
                                         (lsp-deferred))))))
   #+end_src
** slim-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'slim-mode))

     (with-delayed-execution
       (message "Install slim-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/slim-mode"))
       (when (autoload-if-found '(slim-mode) "slim-mode" nil t)
         (push '("\\.slim$" . slim-mode) auto-mode-alist)))
   #+END_SRC
** solidity-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'solidity-mode))

     (with-delayed-execution
       (message "Install solidity-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/solidity-mode"))
       (when (autoload-if-found '(solidity-mode) "solidity-mode" nil t)
         (push '("\\.sol$" . solidity-mode) auto-mode-alist)))
   #+end_src
** ssh-config-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ssh-config-mode))

     (with-delayed-execution
       (message "Install ssh-config-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ssh-config-mode"))
       (when (autoload-if-found '(ssh-config-mode ssh-known-hosts-mode ssh-authorized-keys-mode) "ssh-config-mode" nil t)
         (push '("/\\.ssh/config\\(\\.d/.*\\.conf\\)?\\'" . ssh-config-mode) auto-mode-alist)
         (push '("/sshd?_config\\(\\.d/.*\\.conf\\)?\\'" . ssh-config-mode) auto-mode-alist)
         (push '("/known_hosts\\'" . ssh-known-hosts-mode) auto-mode-alist)
         (push '("/authorized_keys2?\\'" . ssh-authorized-keys-mode) auto-mode-alist)))
   #+END_SRC
** sql-mode
   #+begin_src emacs-lisp
     (with-eval-after-load 'sql
       (load-library "sql-indent")
       (setq sql-mysql-login-params '(server port user password database)))
   #+end_src
** swift-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'swift-mode))

     (with-delayed-execution
       (message "Install swift-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/swift-mode"))
       (when (autoload-if-found '(swift-mode) "swift-mode" nil t)
         (push '("\\.swift$" . swift-mode) auto-mode-alist)))
   #+end_src
** syslog-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'syslog-mode))

  (with-delayed-execution
    (message "Install syslog-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/syslog-mode"))
    (when (autoload-if-found '(syslog-mode) "syslog-mode" nil t)
      (add-to-list 'auto-mode-alist '("\\.log$" . syslog-mode))))
#+end_src
** terraform-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'terraform-mode))

     (with-delayed-execution
       (message "Install terraform-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/terraform-mode"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/hcl-mode"))
       (when (autoload-if-found '(terraform-mode) "terraform-mode" nil t)
         (push '("\\.tf$" . terraform-mode) auto-mode-alist)))
   #+END_SRC
** text-mode
   #+begin_src emacs-lisp
     (with-delayed-execution
       (when (autoload-if-found '(conf-space-mode) "text-mode" nil t)
         (push '("\\.tigrc$" . conf-space-mode) auto-mode-alist)
         (push '("\\.editrc$" . conf-space-mode) auto-mode-alist)
         (push '("\\.inputrc$" . conf-space-mode) auto-mode-alist)
         (push '("\\.colorrc$" . conf-space-mode) auto-mode-alist)))
   #+end_src
** toml-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'toml-mode))

     (with-delayed-execution
       (message "Install toml-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/toml-mode"))
       (when (autoload-if-found '(toml-mode) "toml-mode" nil t)
         (push '("\\.toml$" . toml-mode) auto-mode-alist)))
   #+END_SRC
** typescript-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'typescript-mode))

     (with-delayed-execution
       (message "Install typescript-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/typescript-mode"))

       (when (autoload-if-found '(typescript-mode typescript-tsx-mode) "typescript-mode" nil t)
         (define-derived-mode typescript-tsx-mode typescript-mode "tsx")

         ;; for ts/deno
         (push '("\\.ts$" . typescript-mode) auto-mode-alist)
         (defun my/run-local-vars-mode-hook ()
           "Run `major-mode' hook after the local variables have been processed."
           (run-hooks (intern (concat (symbol-name major-mode) "-local-vars-hook"))))

         (add-hook 'hack-local-variables-hook #'my/run-local-vars-mode-hook)
         (add-hook 'typescript-mode-local-vars-hook #'lsp)

         ;; for tsx
         (push '("\\.tsx$" . typescript-tsx-mode) auto-mode-alist)
         (add-hook 'typescript-tsx-mode-hook #'lsp-deferred)))
   #+END_SRC
** v-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'v-mode))

     (with-delayed-execution
       (message "Install v-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/v-mode"))

       (when (autoload-if-found '(v-mode v-menu v-format-buffer) "v-mode" nil t)
         (push '("\\(\\.v?v\\|\\.vsh\\)$" . v-mode) auto-mode-alist))

       (with-eval-after-load 'v-mode
         (define-key v-mode-map (kbd "M-z") #'v-menu)
         (define-key v-mode-map (kbd "C-c C-f") #'v-format-buffer)))
   #+end_src
** vue-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ssass-mode)
       (el-get-bundle 'vue-html-mode)
       (el-get-bundle "purcell/mmm-mode")
       (el-get-bundle "Fanael/edit-indirect")
       (el-get-bundle 'vue-mode))

     (with-delayed-execution
       (message "Install vue-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ssass-mode"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/vue-html-mode"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/mmm-mode"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/edit-indirect"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/vue-mode"))

       (with-eval-after-load 'vue-html-mode
         (setq vue-html-extra-indent 4))

       (when (autoload-if-found '(vue-mode) "vue-mode" nil t)
         (push '("\\.vue$" . vue-mode) auto-mode-alist)))
   #+END_SRC
** vimrc-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'vimrc-mode))

     (with-delayed-execution
       (message "Install vimrc-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/vimrc-mode"))
       (when (autoload-if-found '(vimrc-mode) "vimrc-mode" nil t)
         (push '("\\.vim\\(rc\\)?\\'" . vimrc-mode) auto-mode-alist)))
   #+end_src
** wat-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'wat-mode :url "https://github.com/devonsparks/wat-mode.git"))

     (with-delayed-execution
       (message "Install wat-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/wat-mode"))
       (when (autoload-if-found '(wat-mode) "wat-mode" nil t)
         (push '("\\.wat?\\'" . wat-mode) auto-mode-alist)))
   #+end_src
** web-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'web-mode))

     (with-delayed-execution
       (message "Install web-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/web-mode"))
       (when (autoload-if-found '(web-mode) "web-mode" nil t)
         (push '("\\.html?\\'" . web-mode) auto-mode-alist)
         (push '("\\.erb?\\'" . web-mode) auto-mode-alist)
         (push '("\\.gsp?\\'" . web-mode) auto-mode-alist)
         (push '("\\.svg\\'" . web-mode) auto-mode-alist))
       (with-eval-after-load 'web-mode
         (setq web-mode-comment-style 2)
         (setq web-mode-enable-auto-pairing nil)
         (setq web-mode-enable-auto-indentation nil)))
   #+END_SRC
** web-php-blade-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'web-php-blade-mode
                   :url "https://github.com/takeokunn/web-php-blade-mode.git"))

  (with-delayed-execution
    (message "Install web-php-blade-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/web-php-blade-mode"))
    (when (autoload-if-found '(web-php-blade-mode) "web-php-blade-mode" nil t)
      (add-to-list 'auto-mode-alist '("\\.blade.php$" . web-php-blade-mode))))
#+end_src
** yaml-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'yaml-mode))

     (with-delayed-execution
       (message "Install yaml-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/yaml-mode"))
       (when (autoload-if-found '(yaml-mode) "yaml-mode" nil t)
         (push '("\\.ya?ml$" . yaml-mode) auto-mode-alist)
         (push '("phpstan.neon" . yaml-mode) auto-mode-alist)))
   #+END_SRC
** yarn-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'yarn-mode))

  (with-delayed-execution
    (message "Install yarn-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/yarn-mode"))
    (when (autoload-if-found '(yarn-mode) "yarn-mode" nil t)
      (push '("yarn\\.lock\\'" . yarn-mode) auto-mode-alist)))
#+end_src
** zig-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'zig-mode))

  (with-delayed-execution
    (message "Install zig-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/zig-mode"))
    (when (autoload-if-found '(zig-mode) "zig-mode" nil t)
      (push '("\\.zig$" . zig-mode) auto-mode-alist))
    (with-eval-after-load 'zig-mode
      (add-hook 'zig-mode-hook #'lsp-deferred)))
#+end_src
* Lisp
** Basic
*** paredit
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'paredit))

      (with-delayed-execution-priority-high
        (message "Install paredit...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/paredit"))
        (autoload-if-found '(enable-paredit-mode paredit-forward-slurp-sexp paredit-splice-sexp) "paredit" nil t)

        (global-set-key (kbd "C-c f") #'paredit-forward-slurp-sexp)
        (global-set-key (kbd "M-s") #'paredit-splice-sexp)

        (with-eval-after-load 'lisp-mode
          (add-hook 'lisp-mode-hook #'enable-paredit-mode)
          (add-hook 'lisp-data-mode-hook #'enable-paredit-mode))

        (with-eval-after-load 'emacs-lisp-mode
          (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode))

        (with-eval-after-load 'clojure-mode
          (add-hook 'clojure-mode-hook #'enable-paredit-mode))

        (with-eval-after-load 'lisp-interaction-mode
          (add-hook 'lisp-interacton-mode-hook #'enable-paredit-mode))

        (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode))
    #+END_SRC
*** rainbow-delimiter
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'rainbow-delimiters))

      (with-delayed-execution
        (message "Install rainbow-delimiters...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/rainbow-delimiters"))
        (autoload-if-found '(rainbow-delimiters-mode-enable) "rainbow-delimiters" nil t)

        (with-eval-after-load 'lisp-mode
          (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode-enable))

        (with-eval-after-load 'emacs-lisp-mode
          (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode-enable))

        (with-eval-after-load 'clojure-mode
          (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode-enable)))
    #+END_SRC
** CommonLisp
*** TODO slime/slime-company
    #+BEGIN_SRC emacs-lisp
      ;; (eval-when-compile
      ;;   (el-get-bundle 'slime)
      ;;   (el-get-bundle 'slime-company))

      ;; (with-delayed-execution
      ;;   (message "Install slime...")
      ;;   (message "Install slime-company...")
      ;;   (add-to-list 'load-path (locate-user-emacs-file "el-get/slime-company"))
      ;;   (load (expand-file-name "~/.roswell/helper.el"))
      ;;   (when (require 'slime-company)
      ;;     (slime-setup '(slime-fancy slime-company)))
      ;;   (with-eval-after-load 'slime
      ;;     (eval-and-compile
      ;;       (setq slime-net-coding-system 'utf-8-unix))))
    #+END_SRC
*** hyperspec
    #+begin_src emacs-lisp
      (with-delayed-execution
        (define-key lisp-mode-map (kbd "C-c h") 'hyperspec-lookup)
        (with-eval-after-load 'hyperspec
          (defadvice common-lisp-hyperspec (around common-lisp-hyperspec-around activate)
            (let ((buf (current-buffer)))
              ad-do-it
              (switch-to-buffer buf)
              (pop-to-buffer "*eww*")))
          (defadvice common-lisp-hyperspec-lookup-reader-macro (around common-lisp-hyperspec-lookup-reader-macro-around activate)
            (let ((buf (current-buffer)))
              ad-do-it
              (switch-to-buffer buf)
              (pop-to-buffer "*eww*")))
          (defadvice common-lisp-hyperspec-format (around common-lisp-hyperspec-format activate)
            (let ((buf (current-buffer)))
              ad-do-it
              (switch-to-buffer buf)
              (pop-to-buffer "*eww*")))
          (eval-and-compile
            (setq common-lisp-hyperspec--reader-macros nil)
            (setq common-lisp-hyperspec--format-characters nil))))
    #+end_src
*** my/slime-history
    #+BEGIN_SRC emacs-lisp
      (with-delayed-execution
        (when (autoload-if-found '(my/slime-history) "slime" nil t)
          (define-key slime-repl-mode-map (kbd "C-c C-r") 'my/slime-history)
          (defun my/slime-history ()
            (interactive)
            (if (and (fboundp '-distinct)
                     (fboundp 'f-read-text))
                (insert
                 (completing-read
                  "choice history: "
                  (-distinct (read (f-read-text "~/.slime-history.eld")))))))))
    #+END_SRC
** EmacsLisp
*** elisp-slime-nav
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'elisp-slime-nav))

      (with-delayed-execution
        (message "Install eslisp-slime-nav...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/elisp-slime-nav"))

        (autoload-if-found '(elisp-slime-nav-mode) "elisp-slime-nav" nil t)

        (with-eval-after-load 'elisp-mode
          (add-hook 'emacs-lisp-mode-hook #'elisp-slime-nav-mode))

        (with-eval-after-load 'ielm
          (add-hook 'ielm-mode-hook #'elisp-slime-nav-mode)))
    #+END_SRC
*** nameless
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'nameless))

      (with-delayed-execution
        (message "Install nameless...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/nameless"))
        (autoload-if-found '(nameless-mode) "nameless" nil t)

        (with-eval-after-load 'elisp-mode
          (add-hook 'emacs-lisp-mode-hook #'nameless-mode))

        (with-eval-after-load 'ielm
          (add-hook 'ielm-mode-hook #'nameless-mode)))
    #+END_SRC
*** my/ielm-history
    #+BEGIN_SRC emacs-lisp
      (with-delayed-execution
        (when (autoload-if-found '(my/ielm-history) "ielm" nil t))
        (defun my/ielm-history ()
          (interactive)
          (insert
           (completing-read
            "choice history: "
            (progn
              (let ((history nil)
                    (comint-input-ring nil))
                (dotimes (index (ring-length comint-input-ring))
                  (push (ring-ref comint-input-ring index) history))
                history))))))
    #+END_SRC
** Clojure
*** cider
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'parseclj)
        (el-get-bundle 'parseedn)
        (el-get-bundle 'cider))

      (with-delayed-execution
        (message "Install cider...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/parseclj"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/parseedn"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/cider"))

        (autoload-if-found '(cider cider-format-buffer cider-switch-to-last-clojure-buffer) "cider" nil t)
        (add-hook 'before-save-hook #'cider-format-buffer t t)

        (defun my/cider-switch-to-last-clojure-buffer ()
          (interactive)
          (let* ((window (split-window-right))
                 (buffer (current-buffer)))
            (set-window-buffer window buffer)
            (cider-switch-to-last-clojure-buffer)))

        (with-eval-after-load 'cider-mode
          (define-key cider-mode-map (kbd "C-c C-z") #'my/cider-switch-to-last-clojure-buffer)
          (setq cider-font-lock-dynamically '(macro core function var)))

        (with-eval-after-load 'cider-repl
          (setq cider-repl-buffer-size-limit 1000000)
          (setq cider-repl-wrap-history t)
          (setq cider-repl-history-size 10000)
          (setq cider-repl-tab-command #'indent-for-tab-command)
          (setq cider-repl-display-in-current-window t))

        (with-eval-after-load 'nrepl-client
          (setq nrepl-use-ssh-fallback-for-remote-hosts t))

        (with-eval-after-load 'cider-eval
          (setq cider-show-error-buffer nil)
          (setq cider-auto-select-error-buffer nil)))
    #+END_SRC
*** clojure-cheatsheet
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'clojure-cheatsheet
                   :url "https://github.com/clojure-emacs/clojure-cheatsheet.git"))

  (with-delayed-execution
    (message "Install clojure-cheatsheet...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/clojure-cheatsheet"))
    (autoload-if-found '(clojure-cheatsheet) "clojure-cheatsheet" nil t))
#+end_src
*** kibit-helper
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'kibit-helper))

  (with-delayed-execution
    (message "Install kibit-helper...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/kibit-helper"))
    (autoload-if-found '(kibit kibit-current-file kibit-accept-proposed-change) "kibit-helper" nil t))
#+end_src
*** clj-refactor
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'clj-refactor))

  (with-delayed-execution
    (message "Install clj-refactor...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/clj-refactor"))
    ;; (when (autoload-if-found '(clj-refactor-mode cljr-add-keybindings-with-prefix) "clj-refactor" nil t)
    ;;   (add-hook 'clojure-mode-hook #'(lambda ()
    ;;                                    (clj-refactor-mode 1)
    ;;                                    (cljr-add-keybindings-with-prefix "C-c C-m"))))
    )
#+end_src
*** inf-clojure
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'inf-clojure
                   :url "https://github.com/clojure-emacs/inf-clojure.git"))

  (with-delayed-execution
    (message "Install inf-clojure...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/inf-clojure"))
    (autoload-if-found '(inf-clojure) "inf-clojure" nil t))
#+end_src
* Awesome Package
** Check
*** flycheck
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'flycheck))

      (with-delayed-execution
        (message "Install flycheck...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/flycheck"))
        (autoload-if-found '(flycheck-mode) "flycheck" nil t))
    #+end_src
** Search
*** el-get
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle abo-abo/swiper))

      (with-delayed-execution-priority-high
        (message "Install swiper...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/swiper")))
    #+end_src
*** swiper
    #+BEGIN_SRC emacs-lisp
      (with-delayed-execution
        (autoload-if-found '(my/swiper) "swiper" nil t)
        (defun my/swiper ()
          (interactive)
          (let ((word (thing-at-point 'symbol 'no-properties)))
            (swiper word)))
        (global-set-key (kbd "C-o") #'my/swiper))
    #+END_SRC
*** counsel
    #+begin_src emacs-lisp
      (with-delayed-execution-priority-high
        (when (autoload-if-found '(counsel-mode counsel-compile) "counsel" nil t)
          (counsel-mode 1))
        (global-set-key (kbd "C-x m") 'counsel-compile))
    #+end_src
*** ivy
    #+begin_src emacs-lisp
      (with-delayed-execution-priority-high
        (autoload-if-found '(ivy-mode ivy-read ivy-completing-read) "ivy" nil t)
        (add-hook 'minibuffer-setup-hook #'ivy-mode)
        (with-eval-after-load 'ivy
          (setq enable-recursive-minibuffers t)
          (setq ivy-use-virtual-buffers t)))
    #+end_src
*** ivy-rich
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'ivy-rich))

      (with-delayed-execution-priority-high
        (message "Install ivy-rich...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/ivy-rich"))
        (when (autoload-if-found '(ivy-rich-mode) "ivy-rich" nil t)
          (ivy-rich-mode 1))
        (with-eval-after-load 'ivy-rich
          (setq ivy-rich-path-style 'abbrev)))
    #+END_SRC
** Theme
*** all-the-icons
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'all-the-icons))

      (with-delayed-execution-priority-high
        (message "Install all-the-icons...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/all-the-icons")))
    #+END_SRC
*** all-the-icons-dired
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'all-the-icons-dired))

      (with-delayed-execution-priority-high
        (message "Install all-the-icons-dired...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/all-the-icons-dired"))
        (autoload-if-found '(all-the-icons-dired-mode) "all-the-icons-dired")
        (with-eval-after-load 'dired
          (add-hook 'dired-mode-hook #'all-the-icons-dired-mode)))
    #+end_src
*** all-the-icons-ivy-rich
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'all-the-icons-ivy-rich))

      (with-delayed-execution-priority-high
        (message "Install all-the-icons-ivy-rich...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/all-the-icons-ivy-rich"))
        (when (autoload-if-found '(all-the-icons-ivy-rich-mode) "all-the-icons-ivy-rich" nil t)
          (all-the-icons-ivy-rich-mode 1))
        (with-eval-after-load 'all-the-icons-ivy-rich
          (setq all-the-icons-ivy-rich-icon t)
          (setq all-the-icons-ivy-rich-color-icon t)
          (setq all-the-icons-ivy-rich-icon-size 1.0)
          (setq all-the-icons-ivy-rich-project t)
          (setq all-the-icons-ivy-rich-field-width 80)
          (setq inhibit-compacting-font-caches t)))
    #+end_src
*** dashboard
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'dashboard))

      (with-delayed-execution-priority-high
        (message "Install dashboard...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/dashboard"))
        (autoload-if-found '(dashboard-refresh-buffer) "dashboard" nil t)
        (with-eval-after-load 'dashboard
          (setq dashboard-startup-banner 'logo)
          (setq dashboard-set-file-icons t)
          (setq dashboard-startup-banner 4)
          (setq dashboard-items '((recents . 10)))))
    #+end_src
*** dimmer
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'dimmer))

  (with-eval-after-load 'dimmer
    (message "Install dimmer...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/dimmer"))
    (when (autoload-if-found '(dimmer-configure-which-key
                               dimmer-configure-org
                               dimmer-configure-company-box
                               dimmer-mode)
                             "dimmer" nil t)
      (dimmer-configure-which-key)
      (dimmer-configure-org)
      (dimmer-configure-company-box)
      (dimmer-mode t)))
#+end_src
*** doom-themes
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'doom-themes))

      (with-delayed-execution-priority-high
        (add-to-list 'load-path (locate-user-emacs-file "el-get/doom-themes"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/doom-themes/extensions"))

        (when (require 'doom-themes)
          (load-theme 'doom-dracula t))

        (with-eval-after-load 'doom-themes
          (setq doom-themes-enable-bold t)
          (setq doom-themes-enable-italic t))

        (when (autoload-if-found '(doom-themes-enable-org-fontification) "doom-themes-ext-org" nil t)
          (doom-themes-enable-org-fontification))

        (when (autoload-if-found '(doom-themes-neotree-config) "doom-themes-ext-neotree" nil t)
          (doom-themes-neotree-config)))

    #+END_SRC
*** doom-modeline
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'doom-modeline))

      (with-delayed-execution-priority-high
        (add-to-list 'load-path (locate-user-emacs-file "el-get/doom-modeline"))
        (when (autoload-if-found '(doom-modeline-mode) "doom-modeline" nil t)
          (doom-modeline-mode 1)
          (line-number-mode 0)
          (column-number-mode 0))
        (with-eval-after-load 'doom-modeline
          (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
          (setq doom-modeline-icon t)
          (setq doom-modeline-major-mode-icon t)
          (setq doom-modeline-minor-modes nil)
          (setq inhibit-compacting-font-caches t)))
    #+END_SRC
*** hl-line
    #+BEGIN_SRC emacs-lisp
      (with-delayed-execution
        (when (autoload-if-found '(global-hl-line-mode) "hl-line-mode" nil t)
          (when (not window-system)
            (global-hl-line-mode)))
        (with-eval-after-load 'hl-line
          (set-face-attribute 'hl-line nil :inherit nil)
          (set-face-background 'hl-line "#444642")))
    #+END_SRC
*** neotree
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'neotree))

      (with-delayed-execution-priority-high
        (message "Install neotree...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/neotree"))

        (autoload-if-found '(neotree-hide neotree-dir) "neotree" nil t)

        (defun my/neotree-toggle ()
          (interactive)
          (let ((default-directory (locate-dominating-file default-directory ".git")))
            (if (and (fboundp 'neo-global--window-exists-p)
                     (neo-global--window-exists-p))
                (neotree-hide)
              (neotree-dir default-directory))))

        (if window-system
            (defun neo-buffer--insert-fold-symbol (name &optional file-name)
              (or
               (and
                (equal name 'open)
                (insert
                 (format " %s "
                         (all-the-icons-icon-for-dir file-name "down"))))
               (and
                (equal name 'close)
                (insert
                 (format " %s "
                         (all-the-icons-icon-for-dir file-name "right"))))
               (and
                (equal name 'leaf)
                (insert
                 (format " %s "
                         (all-the-icons-icon-for-file file-name)))))))

        (global-set-key (kbd "C-q") #'my/neotree-toggle)

        (with-eval-after-load 'neotree
          (setq neo-autorefresh nil)
          (setq neo-theme 'nerd2)
          (setq neo-show-hidden-files t)
          (setq neo-window-fixed-size nil)))

    #+END_SRC
*** nyan-mode
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'nyan-mode))

      (with-delayed-execution-priority-high
        (message "Install nyan-mode...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/nyan-mode"))
        (when (autoload-if-found '(nyan-mode) "nyan-mode" nil t)
          (nyan-mode))
        (with-eval-after-load 'nyan-mode
          (setq nyan-cat-face-number 5)
          (setq nyan-animate-nyancat t)))
    #+END_SRC
*** redacted
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'redacted
                       :url "https://github.com/bkaestner/redacted.el.git"))

      (with-delayed-execution
        (message "Install redacted...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/redacted"))
        (autoload-if-found '(my/redacted-mode redacted-mode) "redacted" nil t)
        (defun my/redacted-mode ()
          (interactive)
          (read-only-mode (if redacted-mode -1 1))
          (redacted-mode (if redacted-mode -1 1))))
    #+end_src
*** volatile-highlights
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'volatile-highlights))

  (with-delayed-execution
    (message "Install volatile-highlights...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/volatile-highlights"))
    (when (autoload-if-found '(volatile-highlights-mode) "volatile-highlights" nil t)
      (volatile-highlights-mode t)))
#+end_src
** Project
*** projectile
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'projectile))

      (with-delayed-execution-priority-high
        (message "Install projectile...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/projectile"))

        (when (autoload-if-found '(projectile-mode my/update-projectile-known-projects) "projectile" nil t)
          (projectile-mode +1))

        (defun my/update-projectile-known-projects ()
          (interactive)
          (setq projectile-known-projects (mapcar
                                           (lambda (x)
                                             (abbreviate-file-name (concat x "/")))
                                           (split-string (shell-command-to-string "ghq list --full-path")))))

        (with-eval-after-load 'projectile
          (global-set-key (kbd "M-p") #'projectile-command-map)
          (global-set-key (kbd "C-c p") #'projectile-command-map)
          (add-hook 'projectile-mode-hook #'my/update-projectile-known-projects)
          (setq projectile-switch-project-action 'projectile-dired)
          (setq projectile-enable-caching t)))
    #+end_src
*** counsel-projectile
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'counsel-projectile))

      (with-delayed-execution-priority-high
        (message "Install counsel-projectile...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/counsel-projectile"))

        (when (autoload-if-found '(counsel-projectile-mode) "counsel-projectile" nil t)
          (counsel-projectile-mode +1))

        (with-eval-after-load 'counsel-projectile
          (setq counsel-projectile-grep-initial-input '(ivy-thing-at-point))
          (setq counsel-projectile-ag-initial-input '(ivy-thing-at-point))
          (setq counsel-projectile-rg-initial-input '(ivy-thing-at-point))))
    #+end_src
** Refactor
*** emr
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'iedit)
        (el-get-bundle 'emr))

      (with-delayed-execution
        (message "Install emr...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/iedit"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/emr"))

        (autoload-if-found '(emr-show-refactor-menu) "emr" nil t)

        (with-eval-after-load 'prog-mode
          (define-key prog-mode-map (kbd "M-RET") #'emr-show-refactor-menu)))
    #+END_SRC
** Completion
*** company
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company))

      (with-delayed-execution
        (message "Install company...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company"))

        (when (autoload-if-found '(global-company-mode) "company" nil t)
          (global-company-mode))

        (with-eval-after-load 'company
          (define-key company-active-map (kbd "C-n") #'company-select-next)
          (define-key company-active-map (kbd "C-p") #'company-select-previous)
          (setq company-minimum-prefix-length 2)
          (setq company-idle-delay 0.5))

        (with-eval-after-load 'company-css
          (push 'company-css company-backends))

        (with-eval-after-load 'company-elisp
          (push 'company-elisp company-backends)))
    #+END_SRC
*** company-box
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'company-box))

  (with-delayed-execution
    (message "Install company-box...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/company-box"))
    (autoload-if-found '(company-box-mode) "company-box" nil t)

    (with-eval-after-load 'company-mode
      (when window-system
        (add-hook 'company-mode-hook 'company-box-mode)))

    (with-eval-after-load 'company-box-doc
      (setq company-box-doc-enable nil)))
#+end_src
*** company-dockerfile
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-dockerfile
          :url "https://github.com/takeokunn/company-dockerfile.git"))

      (with-delayed-execution
        (message "Install company-dockerfile...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-dockerfile"))
        (autoload-if-found '(company-dockerfile) "company-dockerfile" nil t)
        (with-eval-after-load 'company
          (push 'company-dockerfile company-backends)))
    #+end_src
*** company-glsl
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-glsl))

      (with-delayed-execution
        (message "Install company-glsl...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-glsl"))
        (autoload-if-found '(company-glsl) "company-glsl" nil t)
        (with-eval-after-load 'company
          (push 'company-glsl company-backends)))
    #+END_SRC
*** company-c-headers
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-c-headers))

      (with-delayed-execution
        (message "Install company-c-headers...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-c-headers"))
        (autoload-if-found '(company-c-headers) "company-c-headers" nil t)
        (with-eval-after-load 'company
          (push 'company-c-headers company-backends)))
    #+end_src
*** company-shell
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle "takeokunn/company-shell"))

      (with-delayed-execution
        (message "Install company-shell...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-shell"))
        (autoload-if-found '(company-shell company-shell-env company-fish-shell) "company-shell" nil t)
        (with-eval-after-load 'company
          (push 'company-shell company-backends)
          (push 'company-shell-env company-backends)
          (push 'company-fish-shell company-backends)))
    #+end_src
*** company-terraform
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-terraform))

      (with-delayed-execution
        (message "Install company-terraform...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-terraform"))
        (autoload-if-found '(company-terraform) "company-terraform" nil t)
        (with-eval-after-load 'company
          (push 'company-terraform company-backends)))
    #+end_src
*** company-nginx
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-nginx))

      (with-delayed-execution
        (message "Install company-nginx...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-nginx"))
        (autoload-if-found '(company-nginx) "company-nginx" nil t)
        (with-eval-after-load 'company
          (push 'company-nginx company-backends)))
    #+end_src
*** company-gemoji
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-gemoji
                       :url "https://github.com/takeokunn/company-gemoji.git"))

      (with-delayed-execution
        (message "Install company-gemoji...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-gemoji"))
        (autoload-if-found '(company-gemoji) "company-gemoji" nil t)
        (with-eval-after-load 'company
          (push 'company-gemoji company-backends)))
    #+end_src
** Prescient
*** prescient
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'prescient))

  (with-delayed-execution-priority-high
    (message "Install prescient...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/prescient"))
    (when (autoload-if-found '(prescient-persist-mode) "prescient" nil t)
      (prescient-persist-mode))
    (with-eval-after-load 'prescient
      (setq prescient-aggressive-file-save t)))
#+end_src
*** ivy-prescient
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'ivy-prescient))

  (with-delayed-execution-priority-high
    (message "Install ivy-prescient...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/ivy-prescient"))
    (when (autoload-if-found '(ivy-prescient-mode) "ivy-prescient" nil t)
      (ivy-prescient-mode)))
#+end_src
*** company-prescient
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'company-prescient))

  (with-delayed-execution
    (message "Install company-prescient...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/company-prescient"))
    (when (autoload-if-found '(company-prescient-mode) "company-prescient" nil t)
      (company-prescient-mode)))
#+end_src
** Snippet
*** yasnippet
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle "yasnippet"))

      (with-delayed-execution
        (message "Install yasnippet...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/yasnippet"))
        (when (autoload-if-found '(yas-global-mode) "yasnippet" nil t)
          (yas-global-mode 1)))
    #+end_src
*** ivy-yasnippet
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle "mkcms/ivy-yasnippet"))

      (with-delayed-execution
        (message "Install ivy-yasnippet...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/ivy-yasnippet"))
        (autoload-if-found '(ivy-yasnippet) "ivy-yasnippet" nil t)
        (global-set-key (kbd "C-c y") #'ivy-yasnippet)
        (global-set-key (kbd "C-c C-y") #'ivy-yasnippet))
    #+end_src
** LSP
*** lsp-mode
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle lsp-mode))

      (with-delayed-execution
        (message "Install lsp-mode...")

        (add-to-list 'load-path (locate-user-emacs-file "el-get/lsp-mode"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/lsp-mode/clients"))

        (autoload-if-found '(lsp lsp-deferred) "lsp-mode" nil t)
        (autoload-if-found '(lsp-lens) "lsp-lens" nil t)
        (autoload-if-found '(lsp-diagnostics-mode) "lsp-diagnostics" nil t)
        (autoload-if-found '(lsp-completion-mode) "lsp-completion" nil t)
        (autoload-if-found '(lsp-dired-mode) "lsp-dired" nil t)
        (autoload-if-found '(lsp-modeline-code-actions-mode lsp-modeline-diagnostics-mode) "lsp-modeline" nil t)
        (autoload-if-found '(lsp-headerline-breadcrumb-mode) "lsp-headerline" nil t)

        (with-eval-after-load 'lsp-mode
          ;; hook
          (add-hook 'lsp-mode-hook #'lsp-lens-mode)
          (add-hook 'lsp-mode-hook #'lsp-diagnostics-mode)
          (add-hook 'lsp-mode-hook #'lsp-completion-mode)
          (add-hook 'lsp-mode-hook #'lsp-dired-mode)
          (add-hook 'lsp-mode-hook #'lsp-modeline-code-actions-mode)
          (add-hook 'lsp-mode-hook #'lsp-modeline-diagnostics-mode)
          (add-hook 'lsp-mode-hook #'lsp-headerline-breadcrumb-mode)

          ;; ignore path
          (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]vendor")
          (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]storage")
          (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]docs")

          ;; enable flycheck
          (add-hook 'lsp-mode-hook #'flycheck-mode)

          (setq lsp-idle-delay 0.8)
          (setq lsp-enable-links nil)
          (setq lsp-log-io nil))

        (with-eval-after-load 'lsp-completion
          (setq lsp-completion-no-cache t)
          (setq lsp-prefer-capf t))

        (with-eval-after-load 'lsp-diagnostics
          (setq lsp-diagnostics-provider :flycheck))

        (with-eval-after-load 'lsp-icons
          (unless window-system
            (setq lsp-headerline-breadcrumb-icons-enable nil)))

        (with-eval-after-load 'lsp-php
          (setq lsp-intelephense-clear-cache t)
          (setq lsp-intelephense-php-version "8.1")
          (setq lsp-intelephense-telemetry-enabled t)))
    #+END_SRC
*** lsp-php-key
-----BEGIN PGP MESSAGE-----

jA0ECQMCrkfrMEfad/300sABAUtPyC55UH5zmHhnm81lbwRhKH01wNFmgxQt3lIh
QTeR40jICDbTu/CJLngDJnq26GThQdDztg0OJkVHJ17mytWreilBbXPUnKo2axQ4
5NN5TJjfnPKutro6dARd6aK8Cy1AEk6JEHDu3l/TvRNaJ5u8LgId0poaTd7e5cfu
jsZecntGEc5ThntAGuqIQmTFDothZR2awQrde2pWUDebMpnlE+smp5MC4Qv6iufc
R7RToxAHjWYMDUAwLCG/njsPjQ==
=j0CZ
-----END PGP MESSAGE-----
*** lsp-treemacs
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'lsp-treemacs))

  (with-delayed-execution
    (message "Install lsp-treemacs...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/lsp-treemacs"))

    (with-eval-after-load 'lsp-treemacs
      (setq lsp-treemacs-error-list-current-project-only t)))
#+end_src
*** lsp-docker
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'lsp-docker))

  (with-delayed-execution
    (message "Install lsp-docker...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/lsp-docker")))
#+end_src
*** dap-mode
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'dap-mode))

      (with-delayed-execution
        (message "Install dap-mode...")

        (add-to-list 'load-path (locate-user-emacs-file "el-get/dap-mode"))

        (autoload-if-found '(dap-mode dap-breakpoint-toggle) "dap-mode" nil t)
        (autoload-if-found '(dap-ui-mode dap-ui-controls-mode) "dap-ui" nil t)
        (autoload-if-found '(dap-tooltip-mode) "dap-mouse" nil t)
        (autoload-if-found '(dap-php-setup) "dap-php" nil t)
        (autoload-if-found '(dap-node-setup) "dap-node" nil t)
        (autoload-if-found '(dap-go-setup) "dap-go" nil t)
        (autoload-if-found '(dap-ruby-setup) "dap-ruby" nil t)

        (with-eval-after-load 'lsp-mode
          (add-hook 'lsp-mode-hook #'dap-mode))

        (with-eval-after-load 'dap-mode
          (define-key dap-mode-map (kbd "C-c d") #'dap-breakpoint-toggle)
          (add-hook 'dap-mode-hook #'dap-ui-mode)
          (add-hook 'dap-mode-hook #'dap-ui-controls-mode)
          (add-hook 'dap-mode-hook #'tooltip-mode)
          (add-hook 'dap-mode-hook #'dap-tooltip-mode))

        (with-eval-after-load 'php-mode
          (add-hook 'php-mode-hook #'dap-php-setup))

        (with-eval-after-load 'dap-php
          (dap-register-debug-template "Laravel Run Configuration"
                                       (list :type "php"
                                             :request "launch"
                                             :mode "remote"
                                             :host "localhost"
                                             :port "9003"))
          (setq dap-php-debug-path "~/.ghq/github.com/xdebug/vscode-php-debug")
          (setq dap-php-debug-program `("node" ,(f-join dap-php-debug-path "out/phpDebug.js"))))

        (with-eval-after-load 'js2-mode
          (add-hook 'js2-mode-hook #'dap-node-setup))

        (with-eval-after-load 'go-mode
          (add-hook 'go-mode-hook #'dap-go-setup))

        (with-eval-after-load 'ruby-mode
          (add-hook 'ruby-mode-hook #'dap-ruby-setup)))
    #+END_SRC
*** lsp-ui
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle lsp-ui))

      (with-delayed-execution
        (message "Install lsp-ui...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/lsp-ui"))

        (autoload-if-found '(lsp-ui-mode) "lsp-ui" nil t)

        ;; hook
        (with-eval-after-load 'lsp-mode
          (add-hook 'lsp-mode-hook #'lsp-ui-mode))

        ;; lsp-ui-doc
        (with-eval-after-load 'lsp-ui-doc
          (setq lsp-ui-doc-enable t)
          (setq lsp-ui-doc-show-with-cursor t)
          (setq lsp-ui-doc-use-webkit t)
          (setq lsp-ui-doc-include-signature t)
          (setq lsp-ui-doc-delay 1)
          (setq lsp-ui-doc-max-height 30))

        ;; lsp-ui-peek
        (autoload-if-found '(lsp-ui-peek-find-references lsp-ui-peek-find-definitions lsp-ui-peek-find-implementation) "lsp-ui-peek" nil t)
        (with-eval-after-load 'lsp-ui-peek
          (setq lsp-ui-peek-enable t)
          (setq lsp-ui-peek-peek-height 30)
          (setq lsp-ui-peek-list-width 60)
          (setq lsp-ui-peek-fontify 'on-demand))

        ;; lsp-ui-imenu
        (autoload-if-found '(lsp-ui-imenu) "lsp-ui-imenu" nil t)
        (with-eval-after-load 'lsp-ui-imenu
          (setq lsp-ui-imenu-enable t)
          (setq lsp-ui-imenu-kind-position 'top))

        ;; lsp-ui-sideline
        (autoload-if-found '(lsp-ui-sideline-mode) "lsp-ui-sideline" nil t)
        (with-eval-after-load 'lsp-ui-sideline
          (setq lsp-ui-sideline-enable nil)
          (setq lsp-ui-sideline-show-hover t))

        ;; keybind
        (with-eval-after-load 'lsp-mode
          (define-key lsp-mode-map (kbd "C-c C-r") #'lsp-ui-peek-find-references)
          (define-key lsp-mode-map (kbd "C-c C-j") #'lsp-ui-peek-find-definitions)
          (define-key lsp-mode-map (kbd "C-c C-i") #'lsp-ui-peek-find-implementation)
          (define-key lsp-mode-map (kbd "C-c C-m") #'lsp-ui-imenu)
          (define-key lsp-mode-map (kbd "C-c C-s") #'lsp-ui-sideline-mode)
          (define-key lsp-mode-map (kbd "C-c C-d") #'lsp-ui-doc-mode)))
    #+END_SRC
** Git
*** magit
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle magit/transient)
        (el-get-bundle magit/ghub)
        (el-get-bundle magit/magit-popup)
        (el-get-bundle magit/with-editor)
        (el-get-bundle magit/magit))

      (with-delayed-execution-priority-high
        (message "Install magit...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/transient/lisp"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/ghub/lisp"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/magit-pop"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/with-editor/lisp"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/magit/lisp"))

        (when (autoload-if-found '(global-git-commit-mode) "git-commit" nil t)
          (global-git-commit-mode))

        (autoload-if-found '(magit-status magit-blame) "magit")

        (defun my/magit-status ()
          (interactive)
          (let ((default-directory (locate-dominating-file default-directory ".git")))
            (magit-status)))

        (global-set-key (kbd "C-x g") #'my/magit-status)
        (global-set-key (kbd "C-x G") #'magit-blame)

        (with-eval-after-load 'magit
          (setq magit-refresh-status-buffer nil)))
    #+END_SRC
*** magit-forge
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle "magit/forge"))

      (with-delayed-execution
        (add-to-list 'load-path (locate-user-emacs-file "el-get/forge/lisp"))
        (add-hook 'magit-mode-hook #'(lambda ()
                                       (require 'forge))))
    #+end_src
** Shell
*** exec-path-from-shell
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle exec-path-from-shell))

      (with-delayed-execution-priority-high
        (message "Install exec-path-from-shell...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/exec-path-from-shell"))

        (when (autoload-if-found '(exec-path-from-shell-initialize) "exec-path-from-shell")
          (exec-path-from-shell-initialize))

        (with-eval-after-load 'exec-path-from-shell
          (setq exec-path-from-shell-variables '("PATH" "GEM_HOME" "GOROOT" "GOPATH" "LSP_USE_PLISTS"))))
    #+END_SRC
** Cpp
*** clang-format
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'clang-format))

      (with-delayed-execution
        (message "Install clang-format...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/clang-format"))
        (autoload-if-found '(clang-format-buffer) "clang-format" nil t)
        (with-eval-after-load 'clang-format
          (add-hook 'before-save-hook #'(lambda ()
                                          (when (member major-mode '(c-mode c++-mode))
                                            (clang-format-buffer))))))
    #+end_src
*** inferior-cling
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle "brianqq/inferior-cling"))

      (with-delayed-execution
        (message "Install inferior-cling...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/inferior-cling")))
    #+end_src
** JavaScript/TypeScript
*** js2-refactor
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'js2-refactor))

      (with-delayed-execution
        (add-to-list 'load-path (locate-user-emacs-file "el-get/js2-refactor"))
        (autoload-if-found '(js2-refactor-mode) "js2-refactor" nil t)

        (with-eval-after-load 'js2-mode
          (add-hook 'js2-mode-hook #'js2-refactor-mode))

        (with-eval-after-load 'typescript-mode
          (add-hook 'typescript-mode-hook #'js2-refactor-mode)))
    #+END_SRC
*** tree-sitter
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'tsc)
        (el-get-bundle "emacs-tree-sitter/tree-sitter-langs")
        (el-get-bundle 'tree-sitter))

      (with-delayed-execution
        (message "Install tree-sitter...")

        (add-to-list 'load-path (locate-user-emacs-file "el-get/tsc"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/tree-sitter-langs"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/tree-sitter"))

        (when (autoload-if-found '(tree-sitter-mode tree-sitter-require tree-sitter-hl-add-patterns) "tree-sitter" nil t)
          (when (require 'tree-sitter-langs)
            (tree-sitter-require 'tsx))
          (tree-sitter-hl-add-patterns 'tsx
            [(call_expression
              ;; styled.div``
              function: (member_expression
                         object: (identifier) @function.call
                         (.eq? @function.call "styled"))
              arguments: ((template_string) @property.definition
                          (.offset! @property.definition 0 1 0 -1)))
             (call_expression
              ;; styled(Component)``
              function: (call_expression
                         function: (identifier) @function.call
                         (.eq? @function.call "styled"))
              arguments: ((template_string) @property.definition
                          (.offset! @property.definition 0 1 0 -1)))])

          (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx)))

        (with-eval-after-load 'typescript-mode
          (add-hook 'typescript-tsx-mode-hook #'tree-sitter-mode))

        (when (autoload-if-found '(tree-sitter-hl-mode) "tree-sitter-hl" nil t)
          (add-hook 'tree-sitter-after-on-hook 'tree-sitter-hl-mode)))
    #+end_src
** Ruby
*** robe
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'robe))

      (with-delayed-execution
        (message "Install robe...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/robe"))
        (autoload-if-found '(robe-mode inf-ruby-console-auto) "robe" nil t)
        (with-eval-after-load 'company
          (push 'company-robe company-backends))
        (with-eval-after-load 'ruby-mode
          (add-hook 'ruby-mode-hook #'robe-mode)))
    #+end_src
*** rubocop
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'rubocop))

      (with-delayed-execution
        (message "Install rubocop...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/rubocop"))
        (autoload-if-found '(rubocop-mode) "rubocop" nil t)
        (with-eval-after-load 'ruby-mode
          (add-hook 'ruby-mode-hook #'rubocop-mode)))
    #+end_src
*** ruby-refactor
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'ruby-refactor))

      (with-delayed-execution
        (message "Install ruby-refactor...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/ruby-refactor"))
        (autoload-if-found '(ruby-refactor-mode-launch) "ruby-refactor" nil t)
        (with-eval-after-load 'ruby-mode
          (add-hook 'ruby-mode-hook #'ruby-refactor-mode-launch)))
    #+END_SRC
*** inf-ruby
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'inf-ruby))

      (with-delayed-execution
        (message "Install inf-ruby...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/inf-ruby"))
        (autoload-if-found '(inf-ruby inf-ruby-minor-mode) "inf-ruby" nil t)
        (defun my/irb-history ()
          (interactive)
          (when (and (fboundp '-distinct)
                     (fboundp 's-lines)
                     (fboundp 'f-read-text))
            (insert
             (completing-read
              "choose history: "
              (mapcar #'list (-distinct (s-lines (f-read-text "~/.irb_history"))))))))
        (with-eval-after-load 'ruby-mode
          (add-hook 'ruby-mode-hook #'inf-ruby-minor-mode)))
    #+END_SRC
** SQL
*** sql-indent
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'sql-indent))

      (with-delayed-execution
        (message "Install sql-indent...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/sql-indent"))
        (autoload-if-found '(sqlind-setup sqlind-minor-mode) "sql-indent" nil t)
        (with-eval-after-load 'sql-mode
          (add-hook 'sql-mode-hook (lambda ()
                                         (sqlind-setup)
                                         (sqlind-minor-mode)))))
    #+END_SRC
** PHP
*** psysh
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'psysh))

      (with-delayed-execution
        (message "Install psysh...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/psysh")))
    #+end_src
*** laravel-tinker-repl
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle "takeokunn/laravel-tinker-repl.el")
        (el-get-bundle 'xcscope)
        (el-get-bundle "takeokunn/company-laravel-tinker-repl"))

      (with-delayed-execution
        (message "Install laravel-tinker-repl...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/laravel-tinker-repl.el"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/xcscope"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-laravel-tinker-repl"))

        (autoload-if-found '(laravel-tinker-repl) "laravel-tinker-repl" nil t)
        (autoload-if-found '(ac-php-remake-tags-all) "ac-php-core" nil t)
        (autoload-if-found '(company-ac-php-backend) "company-php" nil t)

        (with-eval-after-load 'company
          (push 'company-ac-php-backend company-backends))

        (with-eval-after-load 'laravel-tinker-repl
          (define-key laravel-tinker-repl-mode-map (kbd "TAB") #'completion-at-point)
          (define-key laravel-tinker-repl-mode-map (kbd "C-c C-c") #'laravel-tinker-repl-quit-or-cancel))

        (with-eval-after-load 'php-mode
          (define-key php-mode-map (kbd "C-c C-c") #'laravel-tinker-repl-send-line)
          (define-key php-mode-map (kbd "C-c C-z") #'laravel-tinker-repl-switch-to-repl)))
    #+end_src
*** emacs-php-doc-block
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle "moskalyovd/emacs-php-doc-block"))

  (with-delayed-execution
    (message "Install emacs-php-doc-block...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/emacs-php-doc-block"))
    (autoload-if-found '(php-doc-block) "php-doc-block" nil t))
#+end_src
*** phpstan
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'phpstan
                   :url "https://github.com/emacs-php/phpstan.el.git"))

  (with-delayed-execution
    (message "Install phpstan...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/phpstan"))
    (autoload-if-found '(phpstan-analyze-file phpstan-analyze-this-file) "phpstan" nil t))
#+end_src
** Markdown
*** poly-markdown
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'polymode)
        (el-get-bundle 'poly-markdown))

      (with-delayed-execution
        (add-to-list 'load-path (locate-user-emacs-file "el-get/polymode"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/poly-markdown"))
        (when (autoload-if-found '(poly-markdown-mode) "poly-markdown" nil t)
          (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))))
    #+end_src
*** markdown-preview-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'markdown-preview-mode))

  (with-delayed-execution
    (message "Install markdown-preview-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/markdown-preview-mode"))

    (autoload-if-found '(markdown-preview-open-browser markdown-preview-mode) "markdown-preview-mode" nil t)

    (with-eval-after-load 'markdown-preview-mode
      (setq markdown-preview-stylesheets (list "http://thomasf.github.io/solarized-css/solarized-light.min.css"))))
#+end_src
** Fish
*** fish-repl
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'fish-repl
                       :url "https://github.com/takeokunn/fish-repl.el.git"))

      (with-delayed-execution
        (message "Install fish-repl...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/fish-repl"))
        (autoload-if-found '(fish-repl) "fish-repl" nil t))
    #+end_src
** NodeJS
*** nodejs-repl
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'nodejs-repl
                       :url "https://github.com/abicky/nodejs-repl.el.git"))

      (with-delayed-execution
        (message "Install nodejs-repl...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/nodejs-repl"))
        (autoload-if-found '(nodejs-repl
                             nodejs-repl-send-last-expression
                             nodejs-repl-send-line
                             nodejs-repl-send-region
                             nodejs-repl-send-buffer
                             nodejs-repl-load-file
                             nodejs-repl-switch-to-repl) "nodejs-repl" nil t)

        (with-eval-after-load 'js2-mode
          (define-key js2-mode-map (kbd "C-x C-e") #'nodejs-repl-send-last-expression)
          (define-key js2-mode-map (kbd "C-c C-j") #'nodejs-repl-send-line)
          (define-key js2-mode-map (kbd "C-c C-r") #'nodejs-repl-send-region)
          (define-key js2-mode-map (kbd "C-c C-c") #'nodejs-repl-send-buffer)
          (define-key js2-mode-map (kbd "C-c C-l") #'nodejs-repl-load-file)
          (define-key js2-mode-map (kbd "C-c C-z") #'nodejs-repl-switch-to-repl)))
    #+end_src
** File
*** recentf
    #+BEGIN_SRC emacs-lisp
      (with-delayed-execution
        (when (autoload-if-found '(recentf-mode) "recentf" nil t)
          (recentf-mode 1))
        (with-eval-after-load 'recentf
          (setq recentf-max-saved-items 10000)
          (setq recentf-auto-cleanup 'never)
          (setq recentf-save-file  "~/.emacs.d/.recentf")
          (setq recentf-exclude '(".recentf"))))
    #+END_SRC
*** open-junk-file
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'open-junk-file))

      (with-delayed-execution
        (message "Install open-junk-file...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/open-junk-file"))

        (autoload-if-found '(open-junk-file) "open-junk-file" nil t)

        (defun my/open-junk-file ()
          (interactive)
          (ivy-mode 0)
          (let ((default-directory (format-time-string "~/.emacs.d/.junk/%Y-%m%d-%H%M%S." (current-time))))
            (open-junk-file))
          (ivy-mode 1))

        (global-set-key (kbd "C-x j") #'my/open-junk-file)

        (with-eval-after-load 'open-junk-file
          (setq open-junk-file-format "")))
    #+END_SRC
** Cursor
*** multiple-cursors
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'multiple-cursors))

      (with-delayed-execution
        (add-to-list 'load-path (locate-user-emacs-file "el-get/multiple-cursors"))
        (autoload-if-found '(mc/mark-next-like-this mc/mark-previous-like-this mc/mark-all-like-this) "multiple-cursors" nil t)
        (global-set-key (kbd "C->") #'mc/mark-next-like-this)
        (global-set-key (kbd "C-<") #'mc/mark-previous-like-this)
        (global-set-key (kbd "C-c C-<") #'mc/mark-all-like-this))
    #+END_SRC
** Avy
*** avy
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'avy))

      (with-delayed-execution
        (message "Install avy...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/avy"))
        (autoload-if-found '(avy-goto-word-1) "avy" nil t)
        (global-set-key (kbd "C-:") 'avy-goto-word-1)
        (with-eval-after-load 'avy
          (setq avy-all-windows nil)
          (setq avy-background t)))
    #+end_src
*** avy-zap
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'avy-zap))

      (with-delayed-execution
        (message "Install avy-zap...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/avy-zap"))
        (autoload-if-found '(avy-zap-up-to-char-dwim) "avy-zap" nil t)
        (global-set-key (kbd "M-z") 'avy-zap-up-to-char-dwim))
    #+end_src
** ddskk
*** ddskk
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'ddskk))

      (with-delayed-execution-priority-high
        (message "Install ddskk...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/ddskk"))
        (autoload-if-found '(skk-mode) "skk" nil t)

        (global-set-key (kbd "C-x C-j") #'skk-mode)

        (with-eval-after-load 'skk
          (setq skk-preload t)
          (setq default-input-method "japanese-skk"))

        (with-eval-after-load 'skk-vars
          (setq skk-byte-compile-init-file t)
          (setq skk-isearch-mode-enable 'always)))
    #+END_SRC
*** ddskk-posframe
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'ddskk-posframe))

  (with-delayed-execution
    (message "Install ddskk-posframe...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/ddskk-posframe"))
    (autoload-if-found '(ddskk-posframe-mode) "ddskk-posframe" nil t)
    (with-eval-after-load 'skk
      (add-hook 'skk-mode-hook #'ddskk-posframe-mode)))
#+end_src
** Other
*** ansi-color
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install ansi-color...")
    (autoload 'ansi-color-for-comint-mode-on "ansi-color" "Set `ansi-color-for-comint-mode' to t." t)
    (autoload-if-found '(ansi-color-for-comint-mode-on) "ansi-color" nil t)

    (with-eval-after-load 'shell-mode
      (add-hook 'shell-mode-hook #'ansi-color-for-comint-mode-on))

    (with-eval-after-load 'compile
      (add-hook 'compilation-filter-hook #'(lambda ()
                                             (ansi-color-apply-on-region (point-min) (point-max))))))
#+end_src
*** auto-insert
#+begin_src emacs-lisp
  (with-delayed-execution
    (autoload-if-found '(auto-insert-mode define-auto-insert) "autoinsert" nil t)
    (auto-insert-mode)
    (define-auto-insert "\.php" "template.php")
    (with-eval-after-load 'autoinsert
      (setq auto-insert-directory "~/.emacs.d/auto-insert")))
#+end_src
*** auto-save-buffers-enhanced
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'auto-save-buffers-enhanced))

      (with-delayed-execution
        (message "Install auto-save-buffers-enhanced...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/auto-save-buffers-enhanced"))
        (autoload-if-found '(auto-save-buffers-enhanced) "auto-save-buffers-enhanced" nil t)
        (with-eval-after-load 'auto-save-buffers-enhanced
          (setq auto-save-buffers-enhanced-interval 10)))
    #+end_src
*** amx
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'amx))

      (with-delayed-execution-priority-high
        (message "Install amx...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/amx"))
        (with-eval-after-load 'amx
          (setq amx-history-length 100)))
    #+END_SRC
*** browse-url
#+begin_src emacs-lisp
  (with-eval-after-load 'browse-url
    (setq browse-url-browser-function 'eww-browse-url))
#+end_src
*** define-word
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'define-word))

      (with-delayed-execution
        (message "Install define-word...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/define-word"))
        (defun my/define-word ()
          (interactive)
          (if (use-region-p)
              (call-interactively #'define-word-at-point)
            (call-interactively #'define-word)))
        (with-eval-after-load 'define-word
          (setq define-word-displayfn-alist
                '((wordnik . takeokunn/define-word--display-in-buffer)
                  (openthesaurus . takeokunn/define-word--display-in-buffer)
                  (webster . takeokunn/define-word--display-in-buffer)
                  (weblio . takeokunn/define-word--display-in-buffer)))))
    #+end_src
*** delsel
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install ddskk-delsel...")
    (when (autoload-if-found '(delete-selection-mode) "delsel" nil t)
      (delete-selection-mode)))
#+end_src
*** editorconfig
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'editorconfig))

      (with-delayed-execution
        (message "Install editorconfig...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/editorconfig"))
        (when (autoload-if-found '(editorconfig-mode) "editorconfig" nil t)
          (when (require 'editorconfig-core)
            (editorconfig-mode 1))))
    #+END_SRC
*** embark
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'embark))

  (with-delayed-execution
    (message "Install embark...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/embark"))
    (autoload-if-found '(embark-act embark-prefix-help-command) "embark" nil t)
    (global-set-key (kbd "C-.") #'embark-act)
    (with-eval-after-load 'embark
      (setq prefix-help-command #'embark-prefix-help-command)))
#+end_src
*** esup
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'esup))

      (with-delayed-execution
        (message "Install esup...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/esup"))
        (autoload-if-found '(esup) "esup" nil t))
    #+END_SRC
*** epa-file
#+begin_src emacs-lisp
  (with-delayed-execution
    (when (autoload-if-found '(epa-file-enable) "epa-file" nil t)
      (epa-file-enable)))
#+end_src
*** expand-region
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'expand-region))

  (with-delayed-execution
    (message "Install expand-region...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/expand-region"))
    (autoload-if-found '(er/expand-region) "expand-region" nil t)
    (transient-mark-mode)
    (global-set-key (kbd "C-M-@") 'er/expand-region))
#+end_src
*** fancy-narrow
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'fancy-narrow))

  (with-delayed-execution
    (message "Install fancy-narrow...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/fancy-narrow"))
    (when (autoload-if-found '(fancy-narrow-mode) "fancy-narrow" nil t)
      (fancy-narrow-mode)))
#+end_src
*** font-lock-studio
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'font-lock-studio))

      (with-delayed-execution
        (message "Install font-lock-studio...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/font-lock-studio")))
    #+END_SRC
*** gcmh
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'gcmh))

  (with-delayed-execution
    (message "Install gcmh...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/gcmh"))
    (when (autoload-if-found '(gcmh-mode) "gcmh" nil t)
      (gcmh-mode 1))

    (defvar my/gcmh-status nil)

    (advice-add #'garbage-collect
                :before
                (defun my/gcmh-log-start (&rest _)
                  (when gcmh-verbose
                    (setq my/gcmh-status "Running GC..."))))

    (advice-add #'gcmh-message
                :override
                (defun my/gcmh-message (format-string &rest args)
                  (setq my/gcmh-status
                        (apply #'format-message format-string args))
                  (run-with-timer 2 nil
                                  (lambda ()
                                    (setq my/gcmh-status nil)))))

    (with-eval-after-load 'gcmh
      (setq gcmh-verbose t)
      (setq gcmh-idle-delay 15)))
#+end_src
*** google-this
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'google-this))

      (with-delayed-execution
        (message "Install google-this...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/google-this"))
        (autoload-if-found '(google-this) "google-this" nil t)
        (global-set-key (kbd "M-g") 'google-this))
    #+END_SRC
*** goto-addr
    #+BEGIN_SRC emacs-lisp
      (with-delayed-execution
        (autoload-if-found '(goto-address-prog-mode goto-address-mode) "goto-address" nil t)
        (with-eval-after-load 'prog-mode
          (add-hook 'prog-mode-hook #'goto-address-prog-mode))
        (with-eval-after-load 'text-mode
          (add-hook 'text-mode-hook #'goto-address-mode)))
    #+END_SRC
*** hl-todo
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'hl-todo))

  (with-delayed-execution
    (message "Install hl-todo...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/hl-todo"))
    (when (autoload-if-found '(global-hl-todo-mode) "hl-todo" nil t)
      (global-hl-todo-mode))
    (with-eval-after-load 'hl-todo
      (setq hl-todo-keyword-faces
            '(("TODO" . "#cc9393")
              ("FIXME" . "#cc9393")
              ("NOW" . "#dca3a3")
              ("WAIT" . "#d0bf8f")
              ("DONE" . "#afd8af")))))

#+end_src
*** highlight-indent-guides
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'highlight-indent-guides))

  (with-delayed-execution
    (message "Install highlight-indent-guides...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/highlight-indent-guides"))
    (autoload-if-found '(highlight-indent-guides-mode) "highlight-indent-guides" nil t)
    (with-eval-after-load 'yaml-mode
      (add-hook 'yaml-mode-hook #'highlight-indent-guides-mode))
    (with-eval-after-load 'highlight-indent-guides
      (setq highlight-indent-guides-method 'bitmap)))
#+end_src
*** htmlize
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'htmlize))

      (with-delayed-execution
        (message "Install htmlize...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/htmlize"))
        (with-eval-after-load 'htmlize))
    #+end_src
*** keyfreq
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'keyfreq))

      (with-delayed-execution
        (message "Install keyfreq...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/keyfreq"))
        (when (autoload-if-found '(keyfreq-mode keyfreq-autosave-mode) "keyfreq" nil t)
          (keyfreq-mode 1)
          (keyfreq-autosave-mode 1)))
    #+end_src
*** lorem ipsum
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'lorem-ipsum))

      (with-delayed-execution
        (message "Install lorem-ipsum...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/lorem-ipsum"))
        (autoload-if-found '(lorem-ipsum-insert-sentences lorem-ipsum-insert-paragraphs lorem-ipsum-insert-list) "lorem-ipsum" nil t)
        (global-set-key (kbd "C-c C-l s") #'lorem-ipsum-insert-sentences)
        (global-set-key (kbd "C-c C-l p") #'lorem-ipsum-insert-paragraphs)
        (global-set-key (kbd "C-c C-l l") #'lorem-ipsum-insert-list))
    #+end_src
*** minimap
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'minimap))

      (with-delayed-execution
        (message "Install minimap...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/minimap"))
        (autoload-if-found '(minimap-mode) "minimap" nil t)

        (global-set-key (kbd "C-c m") #'minimap-mode)

        (with-eval-after-load 'minimap
          (setq minimap-window-location 'right)
          (setq minimap-update-delay 0.2)
          (setq minimap-minimum-width 20)
          (setq minimap-major-modes '(prog-mode org-mode))))
    #+end_src
*** origami
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'origami))

      (with-delayed-execution
        (message "Install origami...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/origami"))

        (when (autoload-if-found '(global-origami-mode origami-recursively-toggle-node origami-recursively-toggle-node) "origami" nil t)
          (global-origami-mode))

        (global-set-key (kbd "C-c t") #'origami-recursively-toggle-node)
        (global-set-key (kbd "C-c C-t") #'origami-recursively-toggle-node))
    #+end_src
*** persistent-scratch
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'persistent-scratch))

      (with-delayed-execution
        (message "Install persistent-scratch...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/persistent-scratch"))

        (when (autoload-if-found '(persistent-scratch-setup-default) "persistent-scratch" nil t)
          (persistent-scratch-setup-default))

        (with-eval-after-load 'persistent-scratch
          (setq persistent-scratch-autosave-interval 100)))
    #+end_src
*** popwin
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'popwin))

      (with-delayed-execution
        (message "Install popwin...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/popwin"))
        (when (autoload-if-found '(popwin-mode) "popwin" nil t)
          (popwin-mode 1)))
    #+end_src
*** power-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'power-mode
                   :url "https://github.com/elizagamedev/power-mode.el.git"))

  (with-delayed-execution
    (message "Install power-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/power-mode"))
    (autoload-if-found '(power-mode) "power-mode" nil t))
#+end_src
*** proced
#+begin_src emacs-lisp
  (with-delayed-execution
    (autoload-if-found '(proced) "proced" nil t)
    (add-hook 'proced-mode-hook #'(lambda ()
                                    (proced-toggle-auto-update 1)))
    (with-eval-after-load 'proced
      (setq proced-format 'long)))
#+end_src
*** smartparens
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'smartparens))

      (with-delayed-execution
        (message "Install smartparens...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/smartparens"))
        (with-eval-after-load 'smartparens))
    #+END_SRC
*** smart-jump
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'smart-jump))

      (with-delayed-execution
        (message "Install smart-jump...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/smart-jump"))
        (with-eval-after-load 'smart-jump))
    #+end_src
*** string-inflection
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'string-inflection
                   :url "https://github.com/akicho8/string-inflection.git"))

  (with-delayed-execution
    (message "Install string-inflection...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/string-inflection"))
    (autoload-if-found '(string-inflection-all-cycle) "string-inflection" nil t))
#+end_src
*** subword
    #+begin_src emacs-lisp
      (with-delayed-execution
        (autoload-if-found '(my/delete-forward-block) "subword" nil t)
        (global-set-key (kbd "M-d") #'my/delete-forward-block)
        (defun my/delete-forward-block ()
          (interactive)
          (if (eobp)
              (message "End of buffer")
            (let* ((syntax-move-point
                    (save-excursion
                      (skip-syntax-forward (string (char-syntax (char-after))))
                      (point)))
                   (subword-move-point
                    (save-excursion
                      (subword-forward)
                      (point))))
              (kill-region (point) (min syntax-move-point subword-move-point))))))
    #+end_src
*** syntax-subword
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'syntax-subword
                   :url "https://github.com/jpkotta/syntax-subword.git"))

  (with-delayed-execution
    (message "Install syntax-subword...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/syntax-subword"))
    (when (autoload-if-found '(global-syntax-subword-mode) "syntax-subword" nil t)
      (global-syntax-subword-mode)))
#+end_src
*** tab-bar
#+begin_src emacs-lisp
  (with-delayed-execution-priority-high
    (when (autoload-if-found '(tab-bar-mode tab-bar-history-mode) "tab-bar" nil t)
      (tab-bar-mode 1)
      (tab-bar-history-mode 1))

    (with-eval-after-load 'tab-bar
      (global-set-key (kbd "C-x C-t") tab-prefix-map)
      (setq tab-bar-close-button-show nil)
      (setq tab-bar-close-last-tab-choice nil)
      (setq tab-bar-close-tab-select 'left)
      (setq tab-bar-history-mode nil)
      (setq tab-bar-new-tab-choice "*scratch*")
      (setq tab-bar-new-button-show nil)
      (setq tab-bar-tab-name-truncated-max 12)
      (setq tab-bar-separator " | "))

    (with-eval-after-load 'ivy
      (defun my/advice-completing-read-to-ivy (orig-func &rest args)
        (interactive
         (let* ((recent-tabs (mapcar (lambda (tab)
                                       (alist-get 'name tab))
                                     (tab-bar--tabs-recent))))
           (list (ivy-completing-read "Switch to tab by name (default recent): "
                                      recent-tabs nil nil nil nil recent-tabs))))
        (apply orig-func args))
      (advice-add #'tab-bar-switch-to-tab :around #'my/advice-completing-read-to-ivy))

    (with-eval-after-load 'projectile
      (defun my/tab-bar-rename-tab ()
        (interactive)
        (let ((proj-name (projectile-project-name)))
          (tab-bar-rename-tab proj-name)))
      (define-key tab-prefix-map (kbd "r") #'my/tab-bar-rename-tab))

    (with-eval-after-load 'neotree
      (advice-add 'tab-new :before #'(lambda (&rest _) (neotree-hide)))
      (advice-add 'tab-next :before #'(lambda (&rest _) (neotree-hide)))
      (advice-add 'tab-bar-switch-to-tab :before #'(lambda (&rest _) (neotree-hide)))))
#+end_src
*** undo-tree
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'undo-tree))

      (with-delayed-execution
        (message "Install undo-tree...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/undo-tree"))
        (when (autoload-if-found '(global-undo-tree-mode) "undo-tree" nil t)
          (global-undo-tree-mode))
        (with-eval-after-load 'undo-tree
          (setq undo-tree-auto-save-history nil)))
    #+end_src
*** uuid
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'uuid
                       :url "https://github.com/nicferrier/emacs-uuid.git"))

      (with-delayed-execution
        (message "Install uuid...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/uuid"))
        (autoload-if-found '(uuid-string) "uuid" nil t)
        (defun my/uuid ()
          (interactive)
          (insert (uuid-string)))
        (defalias 'my/uuid 'uuid))
    #+end_src
*** view-lock-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'view-lock-mode
                   :url "https://github.com/s-fubuki/view-lock-mode.git"))

  (with-delayed-execution
    (message "Install view-lock-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/view-lock-mode"))
    (autoload-if-found '(view-lock-timer-setup) "view-lock-mode" nil t)
    (add-hook 'view-mode-hook #'view-lock-timer-setup))
#+end_src
*** TODO wanderlust
    #+begin_src emacs-lisp
      ;; (eval-when-compile
      ;;   (el-get-bundle 'wanderlust
      ;;                  :url "https://github.com/wanderlust/wanderlust.git"))

      ;; (with-delayed-execution
      ;;   (message "Install wanderlust...")
      ;;   (add-to-list 'load-path (locate-user-emacs-file "el-get/wanderlust"))
      ;;   (with-eval-after-load 'wanderlust
      ;;     (eval-and-compile
      ;;       (setq ssl-certificate-verification-policy 1))))
    #+end_src
*** which-key
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'which-key))

      (with-delayed-execution
        (message "Install which-key...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/which-key"))
        (when (autoload-if-found '(which-key-mode) "which-key" nil t)
          (which-key-mode)))
    #+end_src
*** whitespace
    #+BEGIN_SRC emacs-lisp
      (with-delayed-execution
        (when (autoload-if-found '(global-whitespace-mode) "whitespace" nil t)
          (if window-system
              (global-whitespace-mode 1)))
        (with-eval-after-load 'whitespace
          (setq whitespace-style '(face tabs tab-mark spaces space-mark))
          (setq whitespace-display-mappings '((space-mark ?\u3000 [?\u25a1])
                                              (tab-mark ?\t [?\xBB ?\t] [?\\ ?\t])))))
    #+END_SRC
*** woman
    #+begin_src emacs-lisp
      (autoload 'woman
        "woman" "Decode and browse a UN*X man page." t)

      (autoload 'woman-find-file "woman"
        "Find, decode and browse a specific UN*X man-page file." t)
    #+end_src
*** writeroom-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'writeroom-mode))

  (with-delayed-execution
    (message "Install writeroom-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/writeroom-mode"))
    (autoload-if-found '(writeroom-mode
                         writeroom-decrease-width
                         writeroom-increase-width
                         writeroom-adjust-width
                         writeroom-width)
                       "writeroom-mode" nil t)

    (with-eval-after-load 'writeroom-mode
      (add-hook 'writeroom-mode-hook #'(lambda ()
                                       (linum-mode -1)
                                       (display-line-numbers-mode)))
      (define-key writeroom-mode-map (kbd "C-M-<") #'writeroom-decrease-width)
      (define-key writeroom-mode-map (kbd "C-M->") #'writeroom-increase-width)
      (define-key writeroom-mode-map (kbd "C-M-=") #'writeroom-adjust-width)
      (setq writeroom-width 200)
      (setq writeroom-maximize-window nil)))
#+end_src
*** zoom-window
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'zoom-window))

  (with-delayed-execution
    (message "Install zoom-window...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/zoom-window"))
    (autoload-if-found '(zoom-window-zoom) "zoom-window" nil t)
    (global-set-key (kbd "C-c C-z") #'zoom-window-zoom))
#+end_src
* Elfeed
** elfeed
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'elfeed))

     (with-delayed-execution
       (message "Install elfeed...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/elfeed"))

       (defconst my/elfeed-search-filter "@1-week-ago +unread")

       (autoload-if-found '(elfeed) "elfeed" nil t)
       (global-set-key (kbd "C-x w") #'elfeed)

       (with-eval-after-load 'elfeed
         (define-key elfeed-search-mode-map (kbd "+") #'my/elfeed-ivy-filter)
         (setq elfeed-search-filter my/elfeed-search-filter)
         (setq browse-url-browser-function 'eww-browse-url))

       (with-eval-after-load 'elfeed-curl
         (setq elfeed-curl-max-connections 8))

       (with-eval-after-load 'ivy
         (defun my/elfeed-ivy-filter ()
           (interactive)
           (let ((filtered-tag (ivy-completing-read "Choose Tags: " (elfeed-db-get-all-tags))))
             (setq elfeed-search-filter (concat my/elfeed-search-filter " +" filtered-tag))
             (elfeed-search-update--force)))))
   #+end_src
** elfeed-org
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'elfeed-org))

     (with-delayed-execution
       (message "Install elfeed-org...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/elfeed-org"))
       (when (autoload-if-found '(elfeed-org) "elfeed-org" nil t)
         (elfeed-org))
       (with-eval-after-load 'elfeed-org
         (setq rmh-elfeed-org-files '("~/.emacs.d/elfeed.org"))
         (setq rmh-elfeed-org-auto-ignore-invalid-feeds t)))
   #+end_src
* Eshell
** basic
   #+begin_src emacs-lisp
     (with-delayed-execution
       ;; shell function
       (defun eshell/ff (&rest args)
         (find-file (car args)))

       (defun eshell/new()
         (eshell 'N))

       ;; configurations
       (with-eval-after-load 'esh-mode
         (define-key eshell-mode-map (kbd "C-c b") #'my/eshell-send-detached-input)
         (define-key eshell-mode-map (kbd "M-p") #'eshell-previous-matching-input-from-input))

       (with-eval-after-load 'em-cmpl
         (setq eshell-cmpl-ignore-case t))

       (with-eval-after-load 'em-glob
         (setq eshell-glob-include-dot-files t)
         (setq eshell-glob-include-dot-dot nil)
         (setq eshell-glob-show-progress t))

       (with-eval-after-load 'em-hist
         (setq eshell-history-size 100000)
         (setq eshell-hist-ignoredups t))

       (with-eval-after-load 'eshell-mode
         (setq eshell-command-aliases-list '(("ll" "ls -la")
                                             ("cdd" "cd ~/Desktop")))))
   #+end_src
** eshell-z
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'eshell-z))

     (with-delayed-execution
       (message "Install eshell-z...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/eshell-z"))
       (autoload-if-found '(eshell-z) "eshell-z" nil t)
       (with-eval-after-load 'esh-mode
         (define-key eshell-mode-map (kbd "C-c C-q") #'eshell-z)))
   #+end_src
** eshell-did-you-mean
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'eshell-did-you-mean))

  (with-delayed-execution
    (message "Install eshell-did-you-mean...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/eshell-did-you-mean"))
    (autoload-if-found '(eshell-did-you-mean-setup) "eshell-did-you-mean" nil t)
    (with-eval-after-load 'esh-mode
      (add-hook 'eshell-mode-hook #'eshell-did-you-mean-setup)))
#+end_src
** eshell-prompt-extras
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'eshell-prompt-extras))

  (with-delayed-execution
    (message "Install eshell-prompt-extras...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/eshell-prompt-extras"))
    (autoload-if-found '(epe-theme-lambda) "eshell-prompt-extras" nil t)
    (with-eval-after-load 'em-prompt
      (setq eshell-prompt-function #'epe-theme-lambda)))
#+end_src
** aweshell
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'aweshell
                      :url "https://github.com/takeokunn/aweshell.git"))

     (with-delayed-execution
       (add-to-list 'load-path (locate-user-emacs-file "el-get/aweshell"))
       (autoload-if-found '(aweshell-parse-shell-history aweshell-autosuggest) "aweshell" nil t)
       (defun my/ivy-aweshell-history ()
         (interactive)
         (insert (ivy-read "Aweshell history: " (aweshell-parse-shell-history))))
       (with-eval-after-load 'company
         (push 'aweshell-autosuggest company-backends))
       (with-eval-after-load 'esh-mode
         (define-key eshell-mode-map (kbd "C-c C-r") #'my/ivy-aweshell-history)))
   #+END_SRC
** emacs-fish-completion
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'emacs-fish-completion
                   :url "https://github.com/Ambrevar/emacs-fish-completion.git"))

  (with-delayed-execution
    (message "Install emacs-fish-completion")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/emacs-fish-completion"))
    (autoload-if-found '(global-fish-completion-mode) "fish-completion" nil t)
    (when (and (executable-find "fish"))
      (global-fish-completion-mode)))
#+end_src
* Org Mode
** org
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'org
       (define-key org-mode-map (kbd "C-c ,") #'org-insert-structure-template)
       (define-key org-mode-map (kbd "C-c C-,") #'org-insert-structure-template)
       (setq org-directory "~/org")
       (setq org-agenda-files '("~/org/agenda"))
       (setq org-todo-keywords '((sequence "TODO(t)" "NOW(n)" "WAIT(w)" "|" "DONE(d)")))
       (setq org-startup-folded 'fold)
       (setq org-startup-truncated nil)
       (setq org-archive-location `,(format (expand-file-name "archive/%s.org::" org-directory)
                                            (format-time-string "%Y-%m-%d" (current-time)))))
   #+END_SRC
** org-babel
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ob-fish :url "https://github.com/takeokunn/ob-fish.git")
       (el-get-bundle 'ob-go)
       (el-get-bundle 'ob-rust)
       (el-get-bundle 'ob-typescript))

     (with-delayed-execution
       (message "Install ob-*...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ob-fish"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ob-go"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ob-rust"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ob-typescript"))

       (with-eval-after-load 'ob-core
         (setq org-confirm-babel-evaluate nil))

       (with-eval-after-load 'ob-babel
         (org-babel-do-load-languages 'org-babel-load-languages
                                      '((shell . t)
                                        (emacs-lisp . t)
                                        (lisp . t)
                                        (ruby . t)
                                        (fish . t)
                                        (go . t)
                                        (rust . t)
                                        (typescript . t)))))
   #+end_src
** ob-async
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'ob-async))

  (with-delayed-execution
    (message "Install ob-async...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/ob-async"))
    (when (autoload-if-found '(ob-async-org-babel-execute-src-block) "ob-async" nil t)
      (defalias 'org-babel-execute-src-block:async 'ob-async-org-babel-execute-src-block)))
#+end_src
** org-link
#+begin_src emacs-lisp
  (autoload-if-found '(org-store-link) "ol" nil t)
  (global-set-key (kbd "C-c l") #'org-store-link)
#+end_src
** org-faces
#+begin_src emacs-lisp
  (with-eval-after-load 'org-faces
    (setq org-link '(t (:foreground "#ebe087" :underline t))))
#+end_src
** org-agenda
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)

  (with-eval-after-load 'org-agenda
    (setq org-agenda-span 'day)
    (setq org-agenda-start-on-weekday 0)
    (setq org-agenda-todo-ignore-with-date t))
#+end_src
** org-super-agenda
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'org-super-agenda))

  (with-delayed-execution
    (message "Install org-super-agenda...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/org-super-agenda"))
    (autoload-if-found '(org-super-agenda-mode) "org-super-agenda" nil t)
    (with-eval-after-load 'org-super-agenda
      (add-hook 'org-agenda-mode-hook #'org-super-agenda-mode)
      (setq org-super-agenda-groups '((:name "NOW" :time-grid t)
                                      (:todo "TODO" :order 8)
                                      (:todo "WAITING" :order 8)
                                      (:todo "WAITING" :order 8)))))
#+end_src
** org-clock
#+begin_src emacs-lisp
  (with-eval-after-load 'org-clock
    (setq org-clock-out-remove-zero-time-clocks t)
    (setq org-clock-clocked-in-display 'mode-line))
#+end_src
** org-keys
#+begin_src emacs-lisp
  (with-eval-after-load 'org-keys
    (setq org-use-extra-keys t)
    (setq org-use-speed-commands t))
#+end_src
** org-capture
#+begin_src emacs-lisp
  (with-delayed-execution
    (autoload-if-found '(org-capture) "org-capture" nil t)
    (global-set-key (kbd "C-c c") #'org-capture)
    (with-eval-after-load 'org-capture
      (setq org-capture-templates `(("t" "Todo" entry (file+datetree ,(expand-file-name "todo.org" org-directory))
                                     "* %?")
                                    ("m" "Memo" entry (file ,(expand-file-name "memo.org" org-directory))
                                     "* %?")
                                    ("j" "Journal" entry (file+datetree ,(expand-file-name "journal.org" org-directory))
                                     "* %?\nEntered on %U\n  %i\n  %a")))))
#+end_src
** org-id
   #+begin_src emacs-lisp
     (with-delayed-execution
       (message "Install org-id...")
       (autoload-if-found '(org-id-store-link) "org-id" nil t)
       (with-eval-after-load 'org-id
         (setq org-id-locations-file (expand-file-name ".org-id-locations" org-directory))
         (setq org-id-extra-files (append org-agenda-text-search-extra-files))
         (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)))
   #+end_src
** org-crypt
   #+begin_src emacs-lisp
     (with-delayed-execution
       (when (autoload-if-found '(org-encrypt-entry org-decrypt-entry org-crypt-use-before-save-magic) "org-crypt" nil t)
           (org-crypt-use-before-save-magic))
       (with-eval-after-load 'org-crypt
         (setq org-crypt-key nil)
         (setq org-tags-exclude-from-inheritance '("crypt"))))
   #+end_src
** org-journal
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'org-journal))

     (with-delayed-execution
       (message "Install org-journal...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/org-journal"))
       (with-eval-after-load 'org-journal
         (setq org-journal-dir (expand-file-name "journal" org-directory))
         (setq org-journal-start-on-weekday 7)
         (setq org-journal-prefix-key "C-c j")))
   #+end_src
** org-superstar
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'org-superstar))

     (with-delayed-execution-priority-high
       (message "Install org-superstar...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/org-superstar"))
       (autoload-if-found '(org-superstar-mode) "org-superstar")

       (with-eval-after-load 'org
         (add-hook 'org-mode-hook #'org-superstar-mode))

       (with-eval-after-load 'org-superstar
         (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿"))
         (setq org-superstar-leading-bullet " ")))
   #+end_src
** org-generate
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'org-generate))

     (with-delayed-execution
       (message "Install org-generate...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/org-generate"))
       (autoload-if-found '(org-generate) "org-generate" nil t)
       (defun my/org-generate ()
         (interactive)
         (org-generate "snippet/default"))
       (with-eval-after-load 'org-generate
         (setq org-generate-file `,(locate-user-emacs-file "yasnippets.org"))
         (setq org-generate-root "snippets")))
   #+end_src
** org-pomodoro
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle "jwiegley/alert")
       (el-get-bundle 'org-pomodoro))

     (with-delayed-execution
       (message "Install org-pomodoro...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/org-pomodoro"))
       (autoload-if-found '(org-pomodoro) "org-pomodoro" nil t))
   #+end_src
** org-view-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle org-view-mode))

     (with-delayed-execution
       (message "Install org-view-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/org-view-mode"))
       (autoload-if-found '(org-view-mode) "org-view-mode" nil t))
   #+end_src
** org-random-todo
#+begin_src emacs-lisp
  (eval-when-compile
    (el-get-bundle 'org-random-todo))

  (with-delayed-execution
    (message "Install org-random-todo...")
    (add-to-list 'load-path (locate-user-emacs-file "el-get/org-random-todo"))
    (autoload-if-found '(org-random-todo org-random-todo-goto-current) "org-random-todo" nil t))
#+end_src
* EAF
** basic
#+begin_src emacs-lisp
  ;; (add-to-list 'load-path "~/.ghq/github.com/emacs-eaf/emacs-application-framework")
  ;; (require 'eaf)

  ;; (require 'eaf-demo)
  ;; (require 'eaf-file-sender)
  ;; (require 'eaf-music-player)
  ;; (require 'eaf-camera)
  ;; (require 'eaf-rss-reader)
  ;; (require 'eaf-terminal)
  ;; (require 'eaf-image-viewer)
  ;; (require 'eaf-pdf-viewer)
  ;; (require 'eaf-browser)
  ;; (require 'eaf-markdown-previewer)
  ;; (require 'eaf-file-browser)
  ;; (require 'eaf-mermaid)
  ;; (require 'eaf-file-manager)
  ;; (require 'eaf-mindmap)
  ;; (require 'eaf-video-player)
  ;; (require 'eaf-org-previewer)
  ;; (require 'eaf-airshare)
  ;; (require 'eaf-netease-cloud-music)
  ;; (require 'eaf-git)
  ;; (require 'eaf-system-monitor)
#+end_src
* MyFunc
** my/beginning-of-intendation
   #+BEGIN_SRC emacs-lisp
     (defun my/beginning-of-intendation ()
       "move to beginning of line, or indentation"
       (interactive)
       (back-to-indentation))
   #+END_SRC
** my/before-set-auto-mode
   #+BEGIN_SRC emacs-lisp
     (defun my/before-set-auto-mode ()
       (when (or (and buffer-file-name
                      (> (or (file-attribute-size (file-attributes buffer-file-name)) 0) 1000000))
                 (> (line-number-at-pos (point-max)) 100000))
         (prog1 t
           (prog-mode))))

     (advice-add 'set-auto-mode :before-until #'my/before-set-auto-mode)
   #+END_SRC
** my/copy-buffer
   #+begin_src emacs-lisp
     (defun my/copy-buffer ()
       (interactive)
       (save-excursion
         (mark-whole-buffer)
         (copy-region-as-kill (region-beginning) (region-end))))

     (defalias 'copy-buffer 'my/copy-buffer)
   #+end_src
** my/ghq-get
   #+begin_src emacs-lisp
     (defun my/ghq-get ()
       (interactive)
       (let ((url (read-string "url > ")))
         (message
          (shell-command-to-string
           (mapconcat #'shell-quote-argument
                      (list "ghq" "get" url)
                      " ")))))

     (defalias 'ghq-get 'my/ghq-get)
   #+end_src
** my/gh-browse
   #+begin_src emacs-lisp
     (defun my/gh-browse ()
       (interactive)
       (message
        (shell-command-to-string
         (mapconcat #'shell-quote-argument
                    (list "gh" "browse")
                    " "))))

     (defalias 'gh-browse 'my/gh-browse)
   #+end_src
** my/indent-all
   #+begin_src emacs-lisp
     (defun my/indent-buffer ()
       (interactive)
       (save-excursion
         (mark-whole-buffer)
         (indent-region (region-beginning) (region-end))))

     (defalias 'indent-buffer 'my/indent-buffer)
   #+end_src
** my/move-line
   #+begin_src emacs-lisp
     (defun my/move-line (arg)
       (interactive)
       (let ((col (current-column)))
         (unless (eq col 0)
           (move-to-column 0))
         (save-excursion
           (forward-line)
           (transpose-lines arg))
         (forward-line arg)))

     (defun my/move-line-down ()
       (interactive)
       (my/move-line 1))

     (defun my/move-line-up ()
       (interactive)
       (my/move-line -1))

     (global-set-key (kbd "M-N") #'my/move-line-down)
     (global-set-key (kbd "M-P") #'my/move-line-up)
   #+end_src
** my/reload-major-mode
   #+BEGIN_SRC emacs-lisp
     (defun my/reload-major-mode ()
       "Reload current major mode."
       (interactive)
       (let ((current-mode major-mode))
         (fundamental-mode)
         (funcall current-mode)
         current-mode))
   #+END_SRC
** my/toggle-read-only-mode
   #+begin_src emacs-lisp
     (defun my/toggle-read-only-mode ()
       (interactive)
       (read-only-mode))

     (global-set-key (kbd "C-x C-q") #'my/toggle-read-only-mode)
   #+end_src
** my/toggle-kill-emacs
   #+begin_src emacs-lisp
     (defvar my/kill-emacs-keybind-p t)

     (defun my/toggle-kill-emacs ()
       (interactive)
       (if my/kill-emacs-keybind-p
           (progn
             (message "C-x C-c save-buffers-kill-emacs OFF")
             (setq my/kill-emacs-keybind-p nil)
             (global-set-key (kbd "C-x C-c") nil))
         (progn
           (message "C-x C-c save-buffers-kill-emacs ON")
           (setq my/kill-emacs-keybind-p t)
           (global-set-key (kbd "C-x C-c") 'save-buffers-kill-emacs))))
   #+end_src
** my/get-class-name-by-file-name
#+begin_src emacs-lisp
  (defun my/get-class-name-by-file-name ()
    (interactive)
    (insert
     (file-name-nondirectory
      (file-name-sans-extension (or (buffer-file-name)
                                    (buffer-name (current-buffer)))))))
#+end_src
* footer
** Magic File Name を有効にする
   #+begin_src emacs-lisp
     (setq file-name-handler-alist my/saved-file-name-handler-alist)
   #+end_src
** profilerを終了する
 #+begin_src emacs-lisp
   (when my/enable-profile
     (profiler-report)
     (profiler-stop))
 #+end_src
