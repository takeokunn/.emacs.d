#+title: Configurations for GNU Emacs
#+author: takeokunn
#+email: bararararatty@gmail.com
#+startup: content
#+startup: nohideblocks
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

* はじめに
** 基本情報
   - repo: [[http://github.com/takeokunn/.emacs.d][takeokunn/.emacs.d]]
   - twitter: [[https://twitter.com/takeokunn][たけてぃ@takeokunn]]
   - blog: [[https://takeokunn.xyz][https://takeokunn.xyz]]
* boot
** header
   #+begin_src emacs-lisp
     ;; init.el --- My init.el -*- lexical-binding: t -*-
     ;; Configurations for Emacs
     ;;                                         Takeo Obara  <bararararatty@gmail.com>
   #+end_src
** env
   #+begin_src emacs-lisp
     (defconst my/loading-profile-p t
       "If non-nil, use built-in profiler.el.")

     ;; (require 'utility-autoloads nil t)
     ;; (require 'profiler)
     ;; (profiler-start 'cpu)
   #+end_src
** 起動時間計測
   #+begin_src emacs-lisp
     (defconst my/before-load-init-time (current-time))

     ;;;###autoload
     (defun my/load-init-time ()
       "Loading time of user init files including time for `after-init-hook'."
       (let ((time1 (float-time
                     (time-subtract after-init-time my/before-load-init-time)))
             (time2 (float-time
                     (time-subtract (current-time) my/before-load-init-time))))
         (message (concat "Loading init files: %.0f [msec], "
                          "of which %.f [msec] for `after-init-hook'.")
                  (* 1000 time1) (* 1000 (- time2 time1)))))
     (add-hook 'after-init-hook #'my/load-init-time t)

     (defvar my/tick-previous-time my/before-load-init-time)

     ;;;###autoload
     (defun my/tick-init-time (msg)
       "Tick boot sequence at loading MSG."
       (when my/loading-profile-p
         (let ((ctime (current-time)))
           (message "---- %5.2f[ms] %s"
                    (* 1000 (float-time
                             (time-subtract ctime my/tick-previous-time)))
                    msg)
           (setq my/tick-previous-time ctime))))
   #+end_src
   #+begin_src emacs-lisp
     (defun my/emacs-init-time ()
       "Emacs booting time in msec."
       (interactive)
       (message "Emacs booting time: %.0f [msec] = `emacs-init-time'."
                (* 1000
                   (float-time (time-subtract
                                after-init-time
                                before-init-time)))))

     (add-hook 'after-init-hook #'my/emacs-init-time)
   #+end_src
** common lispを使う
   #+begin_src emacs-lisp
     (eval-when-compile
       (require 'cl-lib nil t))
   #+end_src
** el-get
   #+begin_src emacs-lisp
     (eval-and-compile
       (add-to-list 'load-path (locate-user-emacs-file "el-get/el-get"))

       (with-current-buffer
           (url-retrieve-synchronously
            "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
         (goto-char (point-max))
         (eval-print-last-sexp))

       (setq el-get-git-shallow-clone t
             el-get-verbose nil
             el-get-silent-update t
             el-get-default-process-sync t))
   #+end_src
* Basic
** early-init
   #+BEGIN_SRC emacs-lisp
     (if (version< emacs-version "27")
         (progn
           (menu-bar-mode -1)
           (tool-bar-mode -1)
           (toggle-scroll-bar -1)))
   #+END_SRC
** dired-use-ls-dired
   #+begin_src emacs-lisp
     (when (string= system-type "darwin")
       (setq dired-use-ls-dired nil))
   #+end_src
** スタートアップメッセージを非表示
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** 末尾のスペースを可視化する
   #+BEGIN_SRC emacs-lisp
     (setq-default show-trailing-whitespace t)

     (dolist
         (mode '(comint-mode
                 eshell-mode
                 eww-mode
                 term-mode
                 twittering-mode
                 minibuffer-inactive-mode
                 dashboard-mode))
       (add-hook (intern (concat (symbol-name mode) "-hook"))
                 '(lambda () (setq show-trailing-whitespace nil))))
   #+END_SRC
** 行番号を表示する
   #+BEGIN_SRC emacs-lisp
     (global-linum-mode t)
   #+END_SRC
** 自動生成ファイルを無効にする
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
     (setq auto-save-list-file-prefix nil)
     (setq create-lockfiles nil)
   #+END_SRC
** C-kで行削除
   #+BEGIN_SRC emacs-lisp
     (setq kill-whole-line t)
   #+END_SRC
** カッコの中をハイライトする
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode t)
     (setq-default show-paren-style 'mixed)
   #+END_SRC
** カッコが自動的に作られるようにする
   #+BEGIN_SRC emacs-lisp
     (electric-pair-mode 1)
   #+END_SRC
** time locale
   #+BEGIN_SRC emacs-lisp
     (setq system-time-locale "C")
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     (set-fontset-font t 'japanese-jisx0208 "TakaoPGothic")
     (add-to-list 'face-font-rescale-alist '(".*Takao P.*" . 0.85))
   #+END_SRC
** GC/Memory
   #+BEGIN_SRC emacs-lisp
     ;;; gcc
     (setq gc-cons-threshold (* 128 1024 1024))
     (setq garbage-collection-messages t)

     ;;; memory
     (setq read-process-output-max (* 4 1024 1024))
   #+END_SRC
** indent
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC
** ビープ音を消す
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src
** デフォルトのpathをかえる
   #+begin_src emacs-lisp
     (setq default-directory "~/")
     (setq command-line-default-directory "~/")
   #+end_src
** coding system
   #+begin_src emacs-lisp
     ;; language and locale
     (set-language-environment "Japanese")
     (setq system-time-locale "C")

     ;; coding system
     (set-default-coding-systems 'utf-8-unix)
     (prefer-coding-system 'utf-8-unix)
     (set-selection-coding-system 'utf-8-unix)

     ;; prefer-coding-system take effect equally to follows
     (set-buffer-file-coding-system 'utf-8-unix)
     (set-file-name-coding-system 'utf-8-unix)
     (set-terminal-coding-system 'utf-8-unix)
     (set-keyboard-coding-system 'utf-8-unix)
     (setq locale-coding-system 'utf-8-unix)
   #+end_src
** global-auto-revert-mode
   #+begin_src emacs-lisp
     (global-auto-revert-mode t)
   #+end_src
** yes/no to y/n
   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src
** killできないようにする
   #+begin_src emacs-lisp
     (with-current-buffer "*scratch*"
       (emacs-lock-mode 'kill))
     (with-current-buffer "*Messages*"
       (emacs-lock-mode 'kill))
   #+end_src
** confirm-save-buffers-kill-emacs
   #+begin_src emacs-lisp
     (defun confirm-save-buffers-kill-emacs (&optional arg)
       (interactive "P")
       (cond (arg (save-buffers-kill-emacs))
             (t (when (yes-or-no-p "Are you sure to quit Emacs now? ")
                  (save-buffers-kill-emacs)))))
   #+end_src
** keybind
   #+BEGIN_SRC emacs-lisp
     (keyboard-translate ?\C-h ?\C-?)

     (global-set-key (kbd "M-¥") '(lambda () (interactive) (insert "\\")))
     (global-set-key (kbd "C-h") 'backward-delete-char)
     (global-set-key (kbd "C-z") 'undo)
     (global-set-key (kbd "C-?") 'help-command)
     (global-set-key (kbd "C-a") 'back-to-indentation)
     (global-set-key (kbd "C-c i") 'find-function)
     (global-set-key (kbd "C-x C-o") 'other-window)
     (global-set-key (kbd "C-x C-k") nil)
     ;; (global-set-key (kbd "C-x C-c") nil)
   #+END_SRC
* Utility
** dash
   #+begin_src emacs-lisp
     (eval-and-compile
       (el-get-bundle 'dash))
   #+end_src
** mustache
   #+begin_src emacs-lisp
     (eval-and-compile
       (el-get-bundle 'mustache))
   #+end_src
** f
   #+begin_src emacs-lisp
     (eval-and-compile
       (el-get-bundle 'f))
   #+end_src
** s
   #+begin_src emacs-lisp
     (eval-and-compile
       (el-get-bundle 's))
   #+end_src
** ht
   #+begin_src emacs-lisp
     (eval-and-compile
       (el-get-bundle 'ht))
   #+end_src
** lv
   #+begin_src emacs-lisp
     (eval-and-compile
       (el-get-bundle 'lv))
   #+end_src
** spinner
   #+begin_src emacs-lisp
     (eval-and-compile
       (el-get-bundle 'spinner))
   #+end_src
** tree-mode
   #+begin_src emacs-lisp
     (eval-and-compile
       (el-get-bundle emacsorphanage/tree-mode))

     ;; (add-hook 'emacs-startup-hook (lambda () (require 'tree-mode)))
   #+end_src
* Language
** c++-mode
   #+begin_src emacs-lisp
     (add-hook 'c++-mode-hook 'lsp)
   #+end_src
** c-mode
   #+begin_src emacs-lisp
     (add-hook 'c-mode-hook 'lsp)
   #+end_src
** clojure-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'clojure-mode))

     (push '("\\.clj$" . clojure-mode) auto-mode-alist)
     (push '("\\.cljs$" . clojure-mode) auto-mode-alist)
   #+END_SRC
** cmake-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'cmake-mode))

     (push '("\\.cmake$" . cmake-mode) auto-mode-alist)
   #+END_SRC
** coffee-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'coffee-mode))

     (push '("\\.coffee$" . coffee-mode) auto-mode-alist)
   #+END_SRC
** csharp-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'csharp-mode))

     (push '("\\.cs$" . csharp-mode) auto-mode-alist)
   #+END_SRC
** csv-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'csv-mode))

     (push '("\\.csv$" . csv-mode) auto-mode-alist)
   #+END_SRC
** dart-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'dart-mode))

     (push '("\\.dart$" . dart-mode) auto-mode-alist)
   #+end_src
** dhall-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'dhall-mode))

     (push '("\\.dhall$" . dhall-mode) auto-mode-alist)
   #+END_SRC
** docker-compose-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'docker-compose-mode))

     (push '("\\docker-compose*" . docker-compose-mode) auto-mode-alist)
   #+end_src
** dockerfile-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'dockerfile-mode))

     (push '("Dockerfile\\'" . dockerfile-mode) auto-mode-alist)
   #+END_SRC
** emmet-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'emmet-mode))

     (add-hook 'web-mode-hook 'emmet-mode)
     (add-hook 'css-mode-hook  'emmet-mode)

     (with-eval-after-load 'emmet-mode
       (when (boundp 'emmet-mode-keymap)
         (define-key emmet-mode-keymap (kbd "C-j") nil)
         (define-key emmet-mode-keymap (kbd "M-j") 'emmet-expand-line)))
   #+END_SRC
** fish-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'fish-mode))

     (push '("\\.fish$" . fish-mode) auto-mode-alist)

     (with-eval-after-load 'fish-mode
       (eval-and-compile
         (setq fish-enable-auto-indent t)))
   #+END_SRC
** fundamental-mode
   #+begin_src emacs-lisp
     (push '("\\.~undo-tree~$" . fundamental-mode) auto-mode-alist)
   #+end_src
** git-modes
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'git-modes))

     (push '("\\.dockerignore$" . gitignore-mode) auto-mode-alist)
   #+end_src
** glsl-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'glsl-mode))

     (push '("\\.vsh$" . glsl-mode) auto-mode-alist)
     (push '("\\.fsh$" . glsl-mode) auto-mode-alist)
   #+END_SRC
** go-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'go-mode))

     (add-hook 'go-mode-hook 'lsp)
   #+END_SRC
** gradle-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'gradle-mode))

     (push '("\\.gradle$" . java-mode) auto-mode-alist)
   #+END_SRC
** graphql-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'graphql-mode))

     (with-eval-after-load 'graphql-mode
       (eval-and-compile
         (setq graphql-indent-level 4)))
   #+end_src
** haskell-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle "haskell/haskell-mode"))

     (push '("\\.hs$" . haskell-mode) auto-mode-alist)
     (push '("\\.cable$" . haskell-mode) auto-mode-alist)
   #+END_SRC
** js2-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'js2-mode))

     (push '("\\.js$" . js2-mode) auto-mode-alist)

     (add-hook 'js2-mode-hook 'lsp)
   #+END_SRC
** json-mode
   #+BEGIN_SRC emacs-lisp
     (eval-and-compile
       (el-get-bundle "Sterlingg/json-snatcher")
       (el-get-bundle "joshwnj/json-mode"))

     (push '("\\.json$" . json-mode) auto-mode-alist)
   #+END_SRC
** lisp-mode
   #+BEGIN_SRC emacs-lisp
     (push '("\\.lemrc$" . lisp-mode) auto-mode-alist)
     (push '("\\.Cask$" . lisp-mode) auto-mode-alist)
   #+END_SRC
** markdown-mode
   #+BEGIN_SRC emacs-lisp
     (eval-and-compile
       (el-get-bundle markdown-mode))

     (push '("\\.md$" . markdown-mode) auto-mode-alist)
     (push '("\\.markdown$" . markdown-mode) auto-mode-alist)
   #+END_SRC
** nginx-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'nginx-mode))

     (push '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode) auto-mode-alist)
   #+END_SRC
** php-mode
   #+BEGIN_SRC emacs-lisp
     (eval-and-compile
       (el-get-bundle "emacs-php/php-mode"))

     (push '("\\.php$" . php-mode) auto-mode-alist)

     (add-to-list 'load-path (locate-user-emacs-file "el-get/php-mode/lisp"))

     (add-hook 'php-mode-hook 'lsp)
     (add-hook 'emacs-startup-hook (lambda ()
                                     (require 'php-mode)))

     (with-eval-after-load 'php-mode)
   #+END_SRC
** phpt-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'phpt-mode))

     (push '("\\.phpt$" . phpt-mode) auto-mode-alist)
   #+end_src
** plantuml-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'plantuml-mode))

     (push '("\\.pu$" . plantuml-mode) auto-mode-alist)
   #+END_SRC
** prisma-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'prisma-mode :url "https://github.com/pimeys/emacs-prisma-mode.git"))

     (push '("\\.prisma" . prisma-mode) auto-mode-alist)
   #+end_src
** processing-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'processing-mode))

     (push '("\\.pde$" . processing-mode) auto-mode-alist)

     (with-eval-after-load 'processing-mode
       (eval-and-compile
         (setq-default processing-location "/opt/processing/processing-java")
         (setq-default processing-output-dir "/tmp")))
   #+END_SRC
** python-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'python-mode))

     (push '("\\.py$" . python-mode) auto-mode-alist)
   #+END_SRC
** ruby-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ruby-mode))

     (push '("\\.rb$" . ruby-mode) auto-mode-alist)
     (push '("Capfile" . ruby-mode) auto-mode-alist)
     (push '("Gemfile" . ruby-mode) auto-mode-alist)
     (push '("Schemafile" . ruby-mode) auto-mode-alist)
     (push '(".pryrc" . ruby-mode) auto-mode-alist)
     (push '("Fastfile" . ruby-mode) auto-mode-alist)
     (push '("Matchfile" . ruby-mode) auto-mode-alist)
     (push '(".git-pr-template" . ruby-mode) auto-mode-alist)

     (with-eval-after-load 'ruby-mode
       (eval-and-compile
         (setq-default ruby-insert-encoding-magic-comment nil)))
   #+END_SRC
** rust-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'rust-mode))

     (push '("\\.rs$" . rust-mode) auto-mode-alist)
   #+END_SRC
** scala-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'scala-mode))

     (push '("\\.scala$" . scala-mode) auto-mode-alist)
   #+END_SRC
** scss-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'scss-mode))
   #+end_src
** slim-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'slim-mode))

     (push '("\\.slim$" . slim-mode) auto-mode-alist)
   #+END_SRC
** solidity-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'solidity-mode))

     (push '("\\.sol$" . solidity-mode) auto-mode-alist)
   #+end_src
** ssh-config-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ssh-config-mode))

     (push '("/\\.ssh/config\\(\\.d/.*\\.conf\\)?\\'" . ssh-config-mode) auto-mode-alist)
     (push '("/sshd?_config\\(\\.d/.*\\.conf\\)?\\'" . ssh-config-mode) auto-mode-alist)
     (push '("/known_hosts\\'" . ssh-known-hosts-mode) auto-mode-alist)
     (push '("/authorized_keys2?\\'" . ssh-authorized-keys-mode) auto-mode-alist)
   #+END_SRC
** sql-mode
   #+begin_src emacs-lisp
     (with-eval-after-load 'sql-mode
       (eval-and-compile
         (setq sql-indent-offset t)))
   #+end_src
** swift-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'swift-mode))

     (push '("\\.swift$" . swift-mode) auto-mode-alist)
   #+end_src
** terraform-mode
   #+BEGIN_SRC emacs-lisp
     (eval-and-compile
       (el-get-bundle 'terraform-mode))

     (push '("\\.tf$" . terraform-mode) auto-mode-alist)
   #+END_SRC
** toml-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'toml-mode))

     (push '("\\.toml$" . toml-mode) auto-mode-alist)
   #+END_SRC
** typescript-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'typescript-mode))

     (push '("\\.ts$" . typescript-mode) auto-mode-alist)

     (with-eval-after-load 'typescript-mode
       (eval-and-compile
         (define-derived-mode typescript-tsx-mode typescript-mode "tsx")
         (add-to-list 'auto-mode-alist (cons (rx ".tsx" string-end) #'typescript-tsx-mode))
         (add-hook 'typescript-mode-hook 'lsp)
         (add-hook 'typescript-tsx-mode-hook 'lsp)))
   #+END_SRC
** vue-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ssass-mode)
       (el-get-bundle 'vue-html-mode)
       (el-get-bundle "purcell/mmm-mode")
       (el-get-bundle 'vue-mode))

     (push '("\\.vue$" . vue-mode) auto-mode-alist)
   #+END_SRC
** vimrc-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'vimrc-mode))

     (push '("\\.vim\\(rc\\)?\\'" . vimrc-mode) auto-mode-alist)
   #+end_src
** web-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'web-mode))

     (push '("\\.html?\\'" . web-mode) auto-mode-alist)
     (push '("\\.erb?\\'" . web-mode) auto-mode-alist)
     (push '("\\.gsp?\\'" . web-mode) auto-mode-alist)
   #+END_SRC
** yaml-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'yaml-mode))

     (push '("\\.ya?ml$" . yaml-mode) auto-mode-alist)
     (push '("phpstan.neon" . yaml-mode) auto-mode-alist)
   #+END_SRC
* Lisp
** Basic
*** paredit
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'paredit))

      (autoload 'paredit-forward-barf-sexp "paredit")

      (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
      (add-hook 'lisp-interacton-mode-hook 'enable-paredit-mode)

      (global-set-key (kbd "C-c f") 'paredit-forward-slurp-sexp)

      (with-eval-after-load 'paredit
        (show-paren-mode 1))
    #+END_SRC
*** rainbow-delimiter
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'rainbow-delimiters))

      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode-enable)
    #+END_SRC
** CommonLisp
*** TODO HyperSpec
    #+BEGIN_SRC emacs-lisp
      ;; (global-set-key "C-c h" 'hyperspec-lookup)

      ;; (defvar common-lisp-hyperspec-root "~/.roswell/HyperSpec/")
      ;; (defvar common-lisp-hyperspec--reader-macros nil)
      ;; (defvar common-lisp-hyperspec--format-characters nil)

      ;; (defun common-lisp-hyperspec (symbol-name)
      ;;   (interactive (list (common-lisp-hyperspec-read-symbol-name)))
      ;;   (let ((name (common-lisp-hyperspec--strip-cl-package
      ;;                (downcase symbol-name))))
      ;;     (cl-maplist (lambda (entry)
      ;;                   (eww-open-file (concat common-lisp-hyperspec-root "Body/"
      ;;                                          (car entry)))
      ;;                   (when (cdr entry)
      ;;                     (sleep-for 1.5)))
      ;;                 (or (common-lisp-hyperspec--find name)
      ;;                     (error "The symbol `%s' is not defined in Common Lisp"
      ;;                            symbol-name)))))

      ;; (defun common-lisp-hyperspec-lookup-reader-macro (macro)
      ;;   (interactive
      ;;    (list
      ;;     (let ((completion-ignore-case t))
      ;;       (completing-read "Look up reader-macro: "
      ;;                        common-lisp-hyperspec--reader-macros nil t
      ;;                        (common-lisp-hyperspec-reader-macro-at-point)))))
      ;;   (eww-open-file
      ;;    (concat common-lisp-hyperspec-root "Body/"
      ;;            (gethash macro common-lisp-hyperspec--reader-macros))))

      ;; (defun common-lisp-hyperspec-format (character-name)
      ;;   (interactive (list (common-lisp-hyperspec--read-format-character)))
      ;;   (cl-maplist (lambda (entry)
      ;;                 (eww-open-file (common-lisp-hyperspec-section (car entry))))
      ;;               (or (gethash character-name
      ;;                            common-lisp-hyperspec--format-characters)
      ;;                   (error "The symbol `%s' is not defined in Common Lisp"
      ;;                          character-name))))

      ;; (defadvice common-lisp-hyperspec (around common-lisp-hyperspec-around activate)
      ;;   (let ((buf (current-buffer)))
      ;;     ad-do-it
      ;;     (switch-to-buffer buf)
      ;;     (pop-to-buffer "*eww*")))

      ;; (defadvice common-lisp-hyperspec-lookup-reader-macro (around common-lisp-hyperspec-lookup-reader-macro-around activate)
      ;;   (let ((buf (current-buffer)))
      ;;     ad-do-it
      ;;     (switch-to-buffer buf)
      ;;     (pop-to-buffer "*eww*")))

      ;; (defadvice common-lisp-hyperspec-format (around common-lisp-hyperspec-format activate)
      ;;   (let ((buf (current-buffer)))
      ;;     ad-do-it
      ;;     (switch-to-buffer buf)
      ;;     (pop-to-buffer "*eww*")))
    #+END_SRC
*** slime
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'slime
        (load (expand-file-name "~/.roswell/helper.el"))
        (defvar slime-net-coding-system 'utf-8-unix))
    #+END_SRC
*** TODO takeokunn/slime-history
    #+BEGIN_SRC emacs-lisp
      ;; (defun takeokunn/slime-history ()
      ;;   (interactive)
      ;;   (insert
      ;;    (completing-read
      ;;     "choice history: "
      ;;     (-distinct (read (f-read-text "~/.slime-history.eld"))))))

      ;; (general-define-key
      ;;  :keymaps 'slime-repl-mode-map
      ;;  "C-c C-r" 'takeokunn/slime-history)
    #+END_SRC
** EmacsLisp
*** elisp-slime-nav
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'elisp-slime-nav))

      (add-hook 'emacs-lisp-mode-hook 'elisp-slime-nav-mode)
      (add-hook 'ielm-mode-hook 'elisp-slime-nav-mode)
    #+END_SRC
*** nameless
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'nameless))

      (add-hook 'ielm-mode-hook 'nameless-mode)
      (add-hook 'emacs-lisp-mode-hook 'nameless-mode)
    #+END_SRC
*** my/ielm-history
    #+BEGIN_SRC emacs-lisp
      (defun my/ielm-history ()
        (interactive)
        (insert
         (completing-read
          "choice history: "
          (progn
            (let ((history nil)
                  (comint-input-ring nil))
              (if (and (fboundp 'ring-length)
                       (fboundp 'ring-ref))
                  (dotimes (index (ring-length comint-input-ring))
                    (push (ring-ref comint-input-ring index) history)))
              history)))))
    #+END_SRC
** Clojure
*** cider
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'cider))

      (with-eval-after-load 'cider)
    #+END_SRC
* Awesome Package
** Theme
*** dashboard
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle 'dashboard))

      (add-hook 'after-init-hook 'dashboard-setup-startup-hook)
    #+end_src
*** all-the-icons
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle 'all-the-icons))

      (with-eval-after-load 'all-the-icons)
    #+END_SRC
*** all-the-icons-dired
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle 'all-the-icons-dired))

      (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

      (with-eval-after-load 'all-the-icons-dired-mode)
    #+end_src
*** all-the-icons-ivy
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle 'all-the-icons-ivy))

      (with-eval-after-load 'all-the-icons-ivy
        (if window-system
            (all-the-icons-ivy-setup)))
    #+END_SRC
*** doom-theme
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle 'doom-themes))

      (load-theme 'tango-dark t)

      (with-eval-after-load 'doom-themes)
    #+END_SRC
*** doom-modeline
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle 'doom-modeline))

      (add-hook 'after-init-hook (lambda ()
                                   (doom-modeline-mode 1)
                                   (line-number-mode 0)
                                   (column-number-mode 0)))

      (with-eval-after-load 'doom-modeline
        (eval-and-compile
          (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
          (setq doom-modeline-icon t)
          (setq doom-modeline-major-mode-icon nil)
          (setq doom-modeline-minor-modes nil)
          (setq inhibit-compacting-font-caches t)))
    #+END_SRC
*** hl-line
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'hl-line
        (global-hl-line-mode)
        (set-face-attribute 'hl-line nil :inherit nil)
        (set-face-background 'hl-line "#444642"))
    #+END_SRC
*** neotree
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'neotree))

      (autoload 'neotree-toggle "neotree")

      (defun my/neotree-toggle ()
        (interactive)
        (let ((default-directory (locate-dominating-file default-directory ".git")))
          (if (and (fboundp 'neo-global--window-exists-p)
                   (neo-global--window-exists-p))
              (neotree-hide)
            (neotree-dir default-directory))))

      (global-set-key (kbd "C-q") 'my/neotree-toggle)

      (with-eval-after-load 'neotree
        (eval-and-compile
          (setq neo-theme 'nerd2)
          (setq neo-show-hidden-files t)
          (setq neo-window-fixed-size nil))
        (if window-system
            (defun neo-buffer--insert-fold-symbol (name &optional file-name)
              (or
               (and
                (equal name 'open)
                (insert
                 (format " %s "
                         (all-the-icons-icon-for-dir file-name "down"))))
               (and
                (equal name 'close)
                (insert
                 (format " %s "
                         (all-the-icons-icon-for-dir file-name "right"))))
               (and
                (equal name 'leaf)
                (insert
                 (format " %s "
                         (all-the-icons-icon-for-file file-name))))))))
    #+END_SRC
*** nyan-mode
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'nyan-mode))

      (add-hook 'doom-modeline-mode-hook 'nyan-mode)

      (with-eval-after-load 'nyan-mode
        (eval-and-compile
          (setq nyan-cat-face-number 4)
          (setq nyan-animate-nyancat t)))
    #+END_SRC
** Project
*** projectile
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle 'projectile))

      (global-set-key (kbd "C-c p") 'projectile-command-map)

      (autoload 'projectile-mode "projectile" nil t)
      (autoload 'projectile-command-map "projectile" nil t)

      (add-hook 'emacs-startup-hook (lambda ()
                                      (projectile-mode +1)
                                      (my/reaload-projectile-known-projects)))

      (eval-and-compile
        (require 'projectile)
        (defun my/reaload-projectile-known-projects ()
          (interactive)
          (when (executable-find "ghq")
            (setq projectile-known-projects (mapcar
                                             (lambda (x)
                                               (abbreviate-file-name (concat x "/")))
                                             (split-string (shell-command-to-string "ghq list --full-path")))))))

      (with-eval-after-load 'projectile
        (eval-and-compile
          (setq projectile-switch-project-action 'projectile-dired)))
    #+end_src
** Refactor
*** emr
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'emr))

      (with-eval-after-load 'emr
        (define-key prog-mode-map (kbd "M-RET") 'emr-show-refactor-menu))
    #+END_SRC
** Completion
*** company
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle 'company))

      (add-hook 'after-init-hook (lambda ()
                                   (global-company-mode)))

      (autoload 'global-company-mode "company" nil t)

      (with-eval-after-load 'company
        (eval-and-compile
          (when (require 'company)
            (push 'company-capf company-backends)
            (push 'company-yasnippet company-backends)
            (define-key company-active-map (kbd "C-n") 'company-select-next)
            (define-key company-active-map (kbd "C-p") 'company-select-previous))))
    #+END_SRC
*** company-dockerfile
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-dockerfile :url "https://github.com/takeokunn/company-dockerfile.git"))

      (with-eval-after-load 'company
        (when (require 'company-dockerfile nil t)
          (push 'company-dockerfile company-backends)))
    #+end_src
*** company-glsl
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-glsl))

      (with-eval-after-load 'company
        (when (require 'company-glsl nil t)
          (push 'company-glsl company-backends)))
    #+END_SRC
*** TODO slime-company
    #+begin_src emacs-lisp
      ;; (eval-when-compile
      ;;   (el-get-bundle "anwyn/slime-company"))

      ;; (with-eval-after-load 'slime-company
      ;;   (when (require 'slime-company)
      ;;     (push 'company-slime company-backends))
      ;;   (eval-and-compile
      ;;     (setq slime-company-completion 'fuzzy)
      ;;     (setq slime-company-after-completion 'slime-company-just-one-space)))
    #+end_src
*** company-c-headers
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-c-headers))

      (with-eval-after-load 'company
        (when (require 'company-c-headers nil t)
          (push 'company-c-headers company-backends)))
    #+end_src
*** company-shell
    #+begin_src emacs-lisp
      ;; (eval-when-compile
      ;;   (el-get-bundle "takeokunn/company-shell"))

      ;; (with-eval-after-load 'company
      ;;   (when (require 'company-shell nil t)
      ;;     (push 'company-shell company-backends)
      ;;     (push 'company-shell-env company-backends)
      ;;     (push 'company-fish-shell company-backends)))
    #+end_src
*** company-terraform
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-terraform))

      (with-eval-after-load 'company
        (when (require 'company-terraform nil t)
          (push 'company-terraform company-backends)))
    #+end_src
** Search
*** el-get
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle abo-abo/swiper))
    #+end_src
*** swiper
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (require 'swiper)

        (defun my/swiper ()
          (interactive)
          (let ((word (thing-at-point 'symbol 'no-properties)))
            (swiper word)))

        (global-set-key (kbd "C-o") 'my/swiper))

    #+END_SRC
*** counsel
    #+begin_src emacs-lisp
      (eval-and-compile
        (require 'counsel)
        (global-set-key (kbd "C-x m") 'counsel-compile)
        (counsel-mode 1))
    #+end_src
*** ivy
    #+begin_src emacs-lisp
      (eval-and-compile
        (require 'ivy)
        (ivy-mode 1))

      (with-eval-after-load 'ivy
        (eval-and-compile
          (setq ivy-use-virtual-buffers t)))
    #+end_src
*** TODO ivy-ghq
    #+BEGIN_SRC emacs-lisp
      ;; (eval-and-compile
      ;;   (el-get-bundle ivy-ghq
      ;;     :url "https://github.com/analyticd/ivy-ghq.git"
      ;;     :features ivy-ghq))

      ;; (defun my/ivy-ghq-open-and-fzf ()
      ;;   (interactive)
      ;;   (ivy-ghq-open)
      ;;   (counsel-fzf))

      ;; (global-set-key (kbd "M-o") 'my/ivy-ghq-open-and-fzf)

      ;; (with-eval-after-load 'ivy-ghq
      ;;   (eval-and-compile
      ;;     (setq ivy-ghq-short-list t)))
    #+END_SRC
*** ivy-rich
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'ivy-rich))

      (with-eval-after-load 'ivy-rich
        (ivy-rich-mode 1))
    #+END_SRC
** Snippet
*** yasnippet
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle "yasnippet"))

      (with-eval-after-load 'yasnippet
        (yas-global-mode 1))
    #+end_src
*** ivy-yasnippet
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle "mkcms/ivy-yasnippet"))

      (global-set-key (kbd "C-c y") 'ivy-yasnippet)
      (global-set-key (kbd "C-c C-y") 'ivy-yasnippet)
    #+end_src
** LSP
*** lsp-mode
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle lsp-mode))

      (with-eval-after-load 'lsp-mode
        (eval-and-compile
          (setq lsp-keymap-prefix "C-c l")
          (setq lsp-completion-provider t)))
    #+END_SRC
*** dap-mode
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle dap-mode))

      (add-hook 'dap-stopped-hook (lambda () (call-interactively #'dap-hydra)))

      (with-eval-after-load 'dap-mode
        (when (require 'dap-mode)
          ;; (define-key dap-mode-map (kbd "C-c d") 'dap-breakpoint-toggle)
          (dap-mode 1)
          (dap-ui-mode 1)
          (dap-auto-configure-mode 1)))
    #+END_SRC
*** lsp-ui
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle lsp-ui))

      (add-hook 'lsp-mode-hook 'lsp-ui-mode)

      (with-eval-after-load 'lsp-mode
        (eval-and-compile
          (setq lsp-ui-doc-enable t)
          (setq lsp-ui-doc-max-height 15)
          (setq lsp-ui-sideline-enable nil)
          (setq lsp-ui-imenu-enable nil)
          (setq lsp-ui-sideline-enable nil)))
    #+END_SRC
** Git
*** magit
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle magit/transient)
        (el-get-bundle magit/ghub)
        (el-get-bundle magit/magit-popup)
        (el-get-bundle magit/magit))

      (add-to-list 'load-path (locate-user-emacs-file "el-get/magit/lisp"))

      (global-set-key (kbd "C-x g") 'magit-status)

      (autoload 'magit-status "magit")

      (with-eval-after-load 'magit
        (eval-and-compile
          (setq magit-refresh-status-buffer nil)))
    #+END_SRC
*** magit-forge
    #+begin_src emacs-lisp
      ;; (eval-when-compile
      ;;   (el-get-bundle 'magit-forge))

      ;; (with-eval-after-load 'magit-forge)
    #+end_src
** Shell
*** exec-path-from-shell
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle exec-path-from-shell))

      (add-hook 'after-init-hook 'exec-path-from-shell-initialize)

      (with-eval-after-load 'exec-path-from-shell
        (eval-and-compile
          (setq exec-path-from-shell-variables '("PATH" "GEM_HOME" "GOROOT" "GOPATH"))))
    #+END_SRC
** Rust
*** TODO racer
    #+BEGIN_SRC emacs-lisp
      ;; (eval-and-compile
      ;;   (el-get-bundle 'emacs-racer))

      ;; ;; (when (require 'racer)
      ;; ;;   (add-hook 'rust-mode-hook #'racer-mode)
      ;; ;;   (add-hook 'racer-mode-hook #'eldoc-mode))
    #+END_SRC
*** TODO rustic
    #+BEGIN_SRC emacs-lisp
      ;; (leaf rustic
      ;;   :ensure t
      ;;   :after (rust-mode))
    #+END_SRC
** Cpp
*** clang-format
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'clang-format))

      (add-hook 'before-save-hook (lambda ()
                                    (when (and (require 'clang-format)
                                               (member major-mode '(c-mode c++-mode)))
                                      (clang-format-buffer))))
    #+end_src
*** inferior-cling
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle "brianqq/inferior-cling"))
    #+end_src
** C#
*** TODO omnisharp
    #+BEGIN_SRC emacs-lisp
      ;; (leaf omnisharp
      ;;   :ensure t
      ;;   :after company flycheck
      ;;   :hook (csharp-mode-hook . flycheck-mode)
      ;;   :config
      ;;   (add-to-list 'company-backends 'company-omnisharp))
    #+END_SRC
** JavaScript/TypeScript
*** el-get
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'js2-refactor)
        (el-get-bundle 'tree-sitter))
    #+end_src
*** js2-refactor
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'js2-refactor
        (add-hook 'js2-mode-hook 'js2-refactor-mode)
        (add-hook 'typescript-mode-hook 'js2-refactor-mode))
    #+END_SRC
*** tree-sitter
    #+begin_src emacs-lisp
      (with-eval-after-load 'tree-sitter
        (global-tree-sitter-mode)
        (when (boundp 'tree-sitter-major-mode-language-alist)
          (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx)))

        (tree-sitter-hl-add-patterns 'tsx
          [(call_expression
            ;; styled.div``
            function: (member_expression
                       object: (identifier) @function.call
                       (.eq? @function.call "styled"))
            arguments: ((template_string) @property.definition
                        (.offset! @property.definition 0 1 0 -1)))
           (call_expression
            ;; styled(Component)``
            function: (call_expression
                       function: (identifier) @function.call
                       (.eq? @function.call "styled"))
            arguments: ((template_string) @property.definition
                        (.offset! @property.definition 0 1 0 -1)))]))
    #+end_src
** Ruby
*** robe
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'robe))

      (add-hook 'ruby-mode-hook 'robe-mode)

      (with-eval-after-load 'company
        (when (require 'company-robe nil t)
          (push 'company-robe company-backends)))
    #+end_src
*** rubocop
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'rubocop))

      (add-hook 'ruby-mode-hook 'rubocop-mode)
    #+end_src
*** ruby-refactor
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'ruby-refactor))

      (add-hook 'ruby-mode-hook 'ruby-refactor-mode-launch)
    #+END_SRC
*** inf-ruby
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'inf-ruby))

      (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)

      ;; (defun takeokunn/irb-history ()
      ;;   (interactive)
      ;;   (require 'dash)
      ;;   (require 's)
      ;;   (require 'f)
      ;;   (insert
      ;;    (completing-read
      ;;     "choose history: "
      ;;     (mapcar #'list (-distinct (s-lines (f-read-text "~/.irb_history")))))))
    #+END_SRC
** SQL
*** sql-indent
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'sql-indent))

      (add-hook 'sql-mode-hook 'sqlind-minor-mode)
    #+END_SRC
** PHP
*** TODO phpactor
    #+begin_src emacs-lisp
      ;; (eval-when-compile
      ;;   (el-get-bundle 'phpactor))

      ;; (leaf phpactor
      ;;   :ensure t
      ;;   :disabled t
      ;;   :after (f php-mode smart-jump)
      ;;   :bind
      ;;   (:php-mode-map
      ;;    ("M-." . phpactor-goto-definition)
      ;;    ("M-?" . phpactor-find-references))
      ;;   :setq
      ;;   ((eldoc-documentation-function . 'phpactor-hover)
      ;;    (phpactor-history-size . 100000))
      ;;   :config
      ;;   (phpactor-smart-jump-register))
    #+end_src
*** psysh
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'psysh))
    #+end_src
** Markdown
*** poly-markdown
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'poly-markdown))

      (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))
    #+end_src
** Fish
*** fish-repl
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'fish-repl :url "https://github.com/takeokunn/fish-repl.el.git"))

      (with-eval-after-load 'fish-repl)
    #+end_src
** File
*** recentf
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'recentf
        (recentf-mode 1)
        (eval-and-compile
          (setq recentf-max-saved-items 10000)
          (setq recentf-auto-cleanup 'never)
          (setq recentf-save-file  "~/.emacs.d/.recentf")
          (setq recentf-exclude '(".recentf"))))
    #+END_SRC
*** open-junk-file
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle 'open-junk-file))

      (autoload 'open-junk-file "open-junk-file")

      (global-set-key (kbd "C-x j") 'open-junk-file)

      (with-eval-after-load 'open-junk-file
        (eval-and-compile
          (setq open-junk-file-format `,(locate-user-emacs-file ".junk/%Y-%m%d-%H%M%S."))))
    #+END_SRC
** Check
*** flycheck
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'flycheck))

      ;; (add-hook 'ruby-mode-hook 'flycheck-mode)
      ;; (add-hook 'org-mode-hook 'flycheck-mode)
    #+end_src
*** TODO flycheck-textlint
    #+begin_src emacs-lisp
      ;; (leaf flycheck-textlint
      ;;   :after flycheck
      ;;   :config
      ;;   (flycheck-define-checker textlint
      ;;     "A linter for Markdown."
      ;;     :command ("textlint" "--format" "unix" source)
      ;;     :error-patterns
      ;;     ((warning line-start (file-name) ":" line ":" column ": "
      ;;               (id (one-or-more (not (any " "))))
      ;;               (message (one-or-more not-newline)
      ;;                        (zero-or-more "\n" (any " ") (one-or-more not-newline)))
      ;;               line-end))
      ;;     :modes (text-mode markdown-mode))
      ;;   (add-to-list 'flycheck-checkers 'textlint))
    #+end_src
** Cursor
*** smartrep/multiple-cursors
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle 'smartrep)
        (el-get-bundle 'multiple-cursors))

      (global-unset-key (kbd "C-t"))

      (require 'smartrep)
      (require 'multiple-cursors)

      (with-eval-after-load 'smartrep
        (when (fboundp 'smartrep-define-key)
          (smartrep-define-key global-map "C-t"
                               '(("C-t" quote mc/mark-next-like-this)
                                 ("n" quote mc/mark-next-like-this)
                                 ("p" quote mc/mark-previous-like-this)
                                 ("m" quote mc/mark-more-like-this-extended)
                                 ("u" quote mc/unmark-next-like-this)
                                 ("U" quote mc/unmark-previous-like-this)
                                 ("s" quote mc/skip-to-next-like-this)
                                 ("S" quote mc/skip-to-previous-like-this)
                                 ("*" quote mc/mark-all-like-this)
                                 ("d" quote mc/mark-all-like-this-dwim)
                                 ("i" quote mc/insert-numbers)
                                 ("o" quote mc/sort-regions)
                                 ("O" quote mc/reverse-regions)))))
    #+END_SRC
** Other
*** auto-save-buffers-enhanced
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'auto-save-buffers-enhanced))

      (with-eval-after-load 'auto-save-buffers-enhanced
        (auto-save-buffers-enhanced t)
        (eval-and-compile
          (setq auto-save-buffers-enhanced-interval 10)))
    #+end_src
*** amx
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'amx))

      (with-eval-after-load 'amx)
    #+END_SRC
*** avy
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'avy)
        (el-get-bundle 'avy-zap))

      (global-set-key (kbd "C-:") 'avy-goto-char-timer)
      (global-set-key (kbd "M-z") 'avy-zap-up-to-char-dwim)
    #+end_src
*** define-word
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'define-word))

      (defun my/define-word ()
        (interactive)
        (if (use-region-p)
            (call-interactively #'define-word-at-point)
          (call-interactively #'define-word)))

      (with-eval-after-load 'define-word
        (eval-and-compile
          (setq define-word-displayfn-alist
                '((wordnik . takeokunn/define-word--display-in-buffer)
                  (openthesaurus . takeokunn/define-word--display-in-buffer)
                  (webster . takeokunn/define-word--display-in-buffer)
                  (weblio . takeokunn/define-word--display-in-buffer)))))
    #+end_src
*** ddskk
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle 'ddskk))

      (autoload 'skk-mode "ddskk")

      (global-set-key (kbd "C-x C-j") 'skk-mode)

      (with-eval-after-load 'ddskk
        (eval-and-compile
          (setq skk-byte-compile-init-file t)
          (setq skk-isearch-mode-enable 'always)
          (setq skk-preload t)
          (setq default-input-method "japanese-skk")))
    #+END_SRC
*** editorconfig
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'editorconfig))

      ;; (with-eval-after-load 'editorconfig
      ;;   (when (require 'editorconfig)
      ;;     (editorconfig-mode 1)))
    #+END_SRC
*** esup
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (el-get-bundle 'esup))

      (with-eval-after-load 'esup)
    #+END_SRC
*** elfeed
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'elfeed))

      (with-eval-after-load 'elfeed
        (eval-and-compile
          (setq elfeed-search-filter "@3-days-ago +unread")
          (setq browse-url-browser-function 'eww-browse-url)))
    #+end_src
*** elfeed-org
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'elfeed-org))

      (with-eval-after-load 'elfeed-org
        (elfeed-org)
        (eval-and-compile
          (setq rmh-elfeed-org-files '("~/.emacs.d/elfeed.org"))))
    #+end_src
*** font-lock-studio
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'font-lock-studio))
    #+END_SRC
*** google-this
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'google-this))

      (global-set-key (kbd "M-g") 'google-this)
    #+END_SRC
*** goto-addr
    #+BEGIN_SRC emacs-lisp
      (add-hook 'prog-mode-hook 'goto-address-prog-mode)
      (add-hook 'text-mode-hook 'goto-address-mode)
    #+END_SRC
*** htmlize
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'htmlize))

      (with-eval-after-load 'htmlize)
    #+end_src
*** keyfreq
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'keyfreq))

      (with-eval-after-load 'keyfreq
        (keyfreq-mode 1)
        (keyfreq-autosave-mode 1))
    #+end_src
*** lorem ipsum
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'lorem-ipsum))

      (with-eval-after-load 'lorem-ipsum
        (global-set-key (kbd "C-c C-l s") 'lorem-ipsum-insert-sentences)
        (global-set-key (kbd "C-c C-l p") 'lorem-ipsum-insert-paragraphs)
        (global-set-key (kbd "C-c C-l l") 'lorem-ipsum-insert-list))
    #+end_src
*** origami
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle 'origami))

      (global-set-key (kbd "C-c t") 'origami-recursively-toggle-node)
      (global-set-key (kbd "C-c C-t") 'origami-recursively-toggle-node)

      (with-eval-after-load 'origami
        (global-origami-mode))
    #+end_src
*** popwin
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'popwin))

      (eval-and-compile
        (when (require 'popwin nil t)
          (popwin-mode 1)))
    #+end_src
*** smartparens
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'smartparens))

      (with-eval-after-load 'smartparens)
    #+END_SRC
*** smart-jump
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'smart-jump))

      (with-eval-after-load 'smart-jump)
    #+end_src
*** subword
    #+begin_src emacs-lisp
      (eval-and-compile
        (when (require 'subword nil t)
          (defun my/delete-forward-block ()
            (interactive)
            (if (eobp)
                (message "End of buffer")
              (let* ((syntax-move-point
                      (save-excursion
                        (skip-syntax-forward (string (char-syntax (char-after))))
                        (point)))
                     (subword-move-point
                      (save-excursion
                        (subword-forward)
                        (point))))
                (kill-region (point) (min syntax-move-point subword-move-point)))))))

      (global-set-key (kbd "M-d") 'my/delete-forward-block)

      (with-eval-after-load 'subword)
    #+end_src
*** undo-tree
    #+begin_src emacs-lisp
      (eval-and-compile
        (el-get-bundle 'undo-tree))

      (with-eval-after-load 'undo-tree
        (global-undo-tree-mode))
    #+end_src
*** uuid
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'uuid :url "https://github.com/nicferrier/emacs-uuid.git"))

      ;; (when (and (require 'uuid nil t)
      ;;            (boundp 'uuid-string))
      ;;   (defun my/uuid ()
      ;;     (interactive)
      ;;     (insert (uuid-string)))
      ;;   (defalias 'my/uuid 'uuid))
    #+end_src
*** which-key
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'which-key))

      (add-hook 'after-init-hook 'which-key-mode)

      (with-eval-after-load 'which-key)
    #+end_src
*** whitespace
    #+BEGIN_SRC emacs-lisp
      ;; (with-eval-after-load 'whitespace
      ;;   (global-whitespace-mode 1)
      ;;   (eval-and-compile
      ;;     (setq whitespace-style '(face tabs tab-mark spaces space-mark))
      ;;     (setq whitespace-display-mappings '((space-mark ?\u3000 [?\u25a1])
      ;;                                         (tab-mark ?\t [?\xBB ?\t] [?\\ ?\t])))))
    #+END_SRC
*** wanderlust
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'wanderlust))

      (with-eval-after-load 'wanderlust
        (eval-and-compile
          (setq ssl-certificate-verification-policy 1)))
    #+end_src
* Eshell
** basic
   #+begin_src emacs-lisp
     (with-eval-after-load 'eshell
       ;; function
       (defun eshell/ff (&rest args)
         (find-file (car args)))

       ;; config
       (defvar eshell-cmpl-ignore-case t)
       (defvar eshell-glob-include-dot-dot nil)
       (defvar eshell-ask-to-save-history (quote always))
       (defvar eshell-history-size 100000)
       (defvar eshell-hist-ignoredups t)


       ;; alias
       (defvar *shell-alias* '(("ll" "ls -la")
                               ("cdd" "cd ~/Desktop")))
       (defvar eshell-command-aliases-list (append *shell-alias*)))
   #+end_src
** TODO eshell-z
   #+begin_src emacs-lisp
     ;; (eval-and-compile
     ;;   (el-get-bundle xuchunyang/eshell-z
     ;;     (define-key eshell-mode-map (kbd "C-c C-q") 'eshell-z)))
   #+end_src
** TODO aweshell
   #+BEGIN_SRC emacs-lisp
     ;; (leaf aweshell
     ;;   :after eshell
     ;;   :config
     ;;   (defun takeokunn/aweshell-setup ()
     ;;     (interactive)
     ;;     (shell-command-to-string "ghq get https://github.com/takeokunn/aweshell.git"))

     ;;   (when (file-directory-p "~/.ghq/github.com/takeokunn/aweshell")
     ;;     (add-to-list 'load-path (expand-file-name "~/.ghq/github.com/takeokunn/aweshell"))
     ;;     (require 'esh-mode)
     ;;     (require 'aweshell)
     ;;     (with-eval-after-load 'aweshell
     ;;       (defun takeokunn/counsel-aweshell-history ()
     ;;         (interactive)
     ;;         (insert (ivy-read "Aweshell history: " (aweshell-parse-shell-history))))

     ;;       (defvar eshell-mode-map nil)
     ;;       (defvar aweshell-auto-suggestion-p nil)
     ;;       (defvar eshell-highlight-prompt t)
     ;;       (setq eshell-prompt-function 'epe-theme-lambda)
     ;;       (add-hook 'eshell-mode-hook
     ;;                 (lambda () (define-key eshell-mode-map (kbd "C-c C-r") 'takeokunn/counsel-aweshell-history))))))
   #+END_SRC
* Org Mode
** basic
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c a") 'org-agenda)
     (global-set-key (kbd "C-c c") 'org-capture)

     (with-eval-after-load 'org
       (eval-and-compile
         (setq org-use-speed-commands t)
         (setq org-agenda-todo-ignore-with-date t)
         (setq org-directory "~/org")
         (setq org-agenda-files '("~/org/agenda"))
         (setq org-todo-keywords '((sequence "TODO(t)" "TODAY" "WAIT(w)" "|" "DONE(d)")))
         (setq org-capture-templates '(("t" "Todo" entry (file+datetree "~/org/todo.org")
                                        "* %?")
                                       ("m" "Memo" entry (file "~/org/memo.org")
                                        "* %?")))
         (setq org-startup-folded 'fold)
         (setq org-archive-location `,(format "~/org/archive/%s.org"
                                              (format-time-string "%Y" (current-time))))
         (setq org-link '(t (:foreground "#ebe087" :underline t)))))
   #+END_SRC
** org-babel
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ob-fish :url "https://github.com/takeokunn/ob-fish.git")
       (el-get-bundle 'ob-go)
       (el-get-bundle 'ob-rust)
       (el-get-bundle 'ob-typescript))

     (with-eval-after-load 'ob-core
       (eval-and-compile
         (setq org-confirm-babel-evaluate nil)))

     (with-eval-after-load 'ob-babel
       (org-babel-do-load-languages 'org-babel-load-languages
                                    '((shell . t)
                                      (emacs-lisp . t)
                                      (lisp . t)
                                      (ruby . t)
                                      (fish . t)
                                      (go . t)
                                      (rust . t)
                                      (typescript . t))))
   #+end_src
** org-journal
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'org-journal))

     (with-eval-after-load 'org-journal
       (eval-and-compile
         (setq org-journal-dir "~/org/journal")
         (setq org-journal-file-type 'weekly)
         (setq org-journal-prefix-key "C-c j")))
   #+end_src
** org-superstar
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'org-superstar))

     (add-hook 'org-mode-hook 'org-superstar-mode)

     (with-eval-after-load 'org-superstar
       (eval-and-compile
         (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿"))
         (setq org-superstar-leading-bullet " ")))
   #+end_src
** org-generate
   #+begin_src emacs-lisp
     (eval-and-compile
       (el-get-bundle 'org-generate))

     (with-eval-after-load 'org-generate
       (eval-and-compile
         (setq org-generate-file `,(locate-user-emacs-file "yasnippets.org"))
         (setq org-generate-root "yasnippets")))
   #+end_src
** TODO org-pomodoro
   #+begin_src emacs-lisp
     ;; (eval-when-compile
     ;;   (el-get-bundle "marcinkoziej/org-pomodoro"))

     ;; (with-eval-after-load 'org-pomodoro)
   #+end_src
** TODO org-roam
   #+begin_src emacs-lisp
     ;; (leaf org-roam
     ;;   :disabled t
     ;;   :ensure t
     ;;   :hook (after-init-hook . org-roam-mode)
     ;;   :custom ((org-roam-db-update-method . 'immediate)
     ;;            (org-roam-db-location . "~/org/roam/org-roam.db")
     ;;            (org-roam-directory . "~/org/roam")
     ;;            (org-roam-index-file . "~/org/roam/index.org"))
     ;;   :custom
     ;;   (org-roam-graph-viewer . #'eww-open-file)
     ;;   :setq
     ;;   ((org-roam-v2-ack . nil))
     ;;   :bind
     ;;   (("C-c n l" . org-roam)
     ;;    ("C-c n f" . org-roam-find-file)
     ;;    ("C-c n g" . org-roam-graph)
     ;;    (:org-mode-map
     ;;     (("C-c n i" . org-roam-insert)
     ;;      ("C-c n I" . org-roam-insert-immediate)))))
   #+end_src
** TODO org-tree-slide
   #+begin_src emacs-lisp
     ;; (leaf org-tree-slide
     ;;   :ensure t
     ;;   :bind
     ;;   (("<f8>" . org-tree-slide-mode)
     ;;    ("S-<f8>" . org-tree-slide-skip-done-toggle)))
   #+end_src
** TODO org-ql
   #+begin_src emacs-lisp
     ;; (eval-when-compile
     ;;   (el-get-bundle 'org-ql))

     ;; (with-eval-after-load 'org-ql
     ;;   (eval-and-compile
     ;;     (setq org-agenda-custom-commands `(("i" "Today's agenda"
     ;;                                         ((org-ql-block '(and (todo "TODAY"))
     ;;                                                        ((org-ql-block-header "TODAY's agenda")))))))))
   #+end_src
* MyFunc
** my/beginning-of-intendation
   #+BEGIN_SRC emacs-lisp
     (defun my/beginning-of-intendation ()
       "move to beginning of line, or indentation"
       (interactive)
       (back-to-indentation))
   #+END_SRC
** my/before-set-auto-mode
   #+BEGIN_SRC emacs-lisp
     ;; (defun my/before-set-auto-mode ()
     ;;   (when (or (and buffer-file-name
     ;;                  (> (or (file-attribute-size (file-attributes buffer-file-name)) 0) 1000000))
     ;;             (> (line-number-at-pos (point-max)) 100000))
     ;;     (prog1 t
     ;;       (prog-mode))))

     ;; (advice-add 'set-auto-mode :before-until my/before-set-auto-mode)
   #+END_SRC
** my/reload-major-mode
   #+BEGIN_SRC emacs-lisp
     (defun my/reload-major-mode ()
       "Reload current major mode."
       (interactive)
       (let ((current-mode major-mode))
         (fundamental-mode)
         (funcall current-mode)
         current-mode))
   #+END_SRC
** my/move-line
   #+begin_src emacs-lisp
     (defun my/move-line (arg)
       (interactive)
       (let ((col (current-column)))
         (unless (eq col 0)
           (move-to-column 0))
         (save-excursion
           (forward-line)
           (transpose-lines arg))
         (forward-line arg)))

     (defun my/move-line-down ()
       (interactive)
       (my/move-line 1))

     (defun my/move-line-up ()
       (interactive)
       (my/move-line -1))

     (global-set-key (kbd "M-N") 'my/move-line-down)
     (global-set-key (kbd "M-P") 'my/move-line-up)
   #+end_src
** my/toggle-read-only-mode
   #+begin_src emacs-lisp
     (defun my/toggle-read-only-mode ()
       (interactive)
       (read-only-mode))

     (global-set-key (kbd "C-x C-q") 'my/toggle-read-only-mode)
   #+end_src
** my/ghq-get
   #+begin_src emacs-lisp
     (defun my/ghq-get ()
       (interactive)
       (let ((url (read-string "url > ")))
         (message
          (shell-command-to-string
           (mapconcat #'shell-quote-argument
                      (list "ghq" "get" url)
                      " ")))))

     (defalias 'ghq-get 'my/ghq-get)
   #+end_src
** footer
  #+begin_src emacs-lisp
    ;; (profiler-report)
    ;; (profiler-stop)
  #+end_src
