#+title: Configurations for GNU Emacs
#+author: takeokunn
#+email: bararararatty@gmail.com
#+startup: content
#+startup: nohideblocks
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

* はじめに
** 基本情報
   - repo: [[http://github.com/takeokunn/.emacs.d][takeokunn/.emacs.d]]
   - twitter: [[https://twitter.com/takeokunn][たけてぃ@takeokunn]]
   - blog: [[https://takeokunn.xyz][https://takeokunn.xyz]]
* boot
** header
   #+begin_src emacs-lisp
     ;; init.el --- My init.el -*- lexical-binding: t -*-
     ;; Configurations for Emacs
     ;;                                         Takeo Obara  <bararararatty@gmail.com>
   #+end_src
** env
   #+begin_src emacs-lisp
     (defconst my/loading-profile-p t
       "If non-nil, use built-in profiler.el.")

     (require 'utility-autoloads nil t)
     ;; (require 'profiler)
     ;; (profiler-start 'cpu)
   #+end_src
** 起動時間計測
   #+begin_src emacs-lisp
     (defconst my/before-load-init-time (current-time))

     ;;;###autoload
     (defun my/load-init-time ()
       "Loading time of user init files including time for `after-init-hook'."
       (let ((time1 (float-time
                     (time-subtract after-init-time my/before-load-init-time)))
             (time2 (float-time
                     (time-subtract (current-time) my/before-load-init-time))))
         (message (concat "Loading init files: %.0f [msec], "
                          "of which %.f [msec] for `after-init-hook'.")
                  (* 1000 time1) (* 1000 (- time2 time1)))))
     (add-hook 'after-init-hook #'my/load-init-time t)

     (defvar my/tick-previous-time my/before-load-init-time)

     ;;;###autoload
     (defun my/tick-init-time (msg)
       "Tick boot sequence at loading MSG."
       (when my/loading-profile-p
         (let ((ctime (current-time)))
           (message "---- %5.2f[ms] %s"
                    (* 1000 (float-time
                             (time-subtract ctime my/tick-previous-time)))
                    msg)
           (setq my/tick-previous-time ctime))))
   #+end_src
   #+begin_src emacs-lisp
     (defun my/emacs-init-time ()
       "Emacs booting time in msec."
       (interactive)
       (message "Emacs booting time: %.0f [msec] = `emacs-init-time'."
                (* 1000
                   (float-time (time-subtract
                                after-init-time
                                before-init-time)))))

     (add-hook 'after-init-hook #'my/emacs-init-time)
   #+end_src
** async
   #+begin_src emacs-lisp
     (defvar my/delayed-configurations '())
     (defvar my/delayed-configuration-timer nil)

     (add-hook 'emacs-startup-hook
               (lambda ()
                 (setq my/delayed-configuration-timer
                       (run-with-timer
                        0.1 0.01
                        (lambda ()
                          (if my/delayed-configurations
                              (eval (pop my/delayed-configurations))
                            (progn
                              (cancel-timer my/delayed-configuration-timer)
                              (message "Finish!!!"))))))))

     (defmacro with-delayed-execution (&rest body)
       (declare (indent 0))
       `(setq my/delayed-configurations
              (append my/delayed-configurations ',body)))
   #+end_src
** autoload-if-found
   #+begin_src emacs-lisp
     ;;;###autoload
     (defun autoload-if-found (functions file &optional docstring interactive type)
       "set autoload iff. FILE has found."
       (when (locate-library file)
         (dolist (f functions)
           (autoload f file docstring interactive type))
         t))
   #+end_src
** el-get
   #+begin_src emacs-lisp
     (eval-when-compile
       (add-to-list 'load-path (locate-user-emacs-file "el-get/el-get"))
       (with-current-buffer
           (url-retrieve-synchronously
            "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
         (goto-char (point-max))
         (eval-print-last-sexp)))

     (with-delayed-execution
       (message "Install el-get...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/el-get"))
       (require 'el-get)
       (with-eval-after-load 'el-get
         (eval-and-compile
           (setq el-get-git-shallow-clone t
                 el-get-verbose nil
                 el-get-silent-update t
                 el-get-default-process-sync t))))
   #+end_src
* Basic
** early-init
   #+BEGIN_SRC emacs-lisp
     (if (version< emacs-version "27")
         (progn
           (menu-bar-mode -1)
           (tool-bar-mode -1)
           (toggle-scroll-bar -1)))
   #+END_SRC
** スタートアップメッセージを非表示
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** 末尾のスペースを可視化する
   #+BEGIN_SRC emacs-lisp
     (setq-default show-trailing-whitespace t)

     (dolist
         (mode '(comint-mode
                 eshell-mode
                 eww-mode
                 term-mode
                 twittering-mode
                 minibuffer-inactive-mode
                 dashboard-mode))
       (add-hook (intern (concat (symbol-name mode) "-hook"))
                 '(lambda () (setq show-trailing-whitespace nil))))
   #+END_SRC
** 行番号を表示する
   #+BEGIN_SRC emacs-lisp
     (global-linum-mode t)
   #+END_SRC
** 自動生成ファイルを無効にする
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
     (setq auto-save-list-file-prefix nil)
     (setq create-lockfiles nil)
   #+END_SRC
** C-kで行削除
   #+BEGIN_SRC emacs-lisp
     (setq kill-whole-line t)
   #+END_SRC
** カッコの中をハイライトする
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode t)
     (setq-default show-paren-style 'mixed)
   #+END_SRC
** カッコが自動的に作られるようにする
   #+BEGIN_SRC emacs-lisp
     (electric-pair-mode 1)
   #+END_SRC
** time locale
   #+BEGIN_SRC emacs-lisp
     (setq system-time-locale "C")
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     (set-fontset-font t 'japanese-jisx0208 "TakaoPGothic")
     (add-to-list 'face-font-rescale-alist '(".*Takao P.*" . 0.85))
   #+END_SRC
** GC/Memory
   #+BEGIN_SRC emacs-lisp
     ;;; gcc
     (setq gc-cons-threshold (* 128 1024 1024))
     (setq garbage-collection-messages t)

     ;;; memory
     (setq read-process-output-max (* 4 1024 1024))
   #+END_SRC
** indent
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC
** ビープ音を消す
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src
** デフォルトのpathをかえる
   #+begin_src emacs-lisp
     (setq default-directory "~/")
     (setq command-line-default-directory "~/")
   #+end_src
** coding system
   #+begin_src emacs-lisp
     ;; language and locale
     (set-language-environment "Japanese")
     (setq system-time-locale "C")

     ;; coding system
     (set-default-coding-systems 'utf-8-unix)
     (prefer-coding-system 'utf-8-unix)
     (set-selection-coding-system 'utf-8-unix)

     ;; prefer-coding-system take effect equally to follows
     (set-buffer-file-coding-system 'utf-8-unix)
     (set-file-name-coding-system 'utf-8-unix)
     (set-terminal-coding-system 'utf-8-unix)
     (set-keyboard-coding-system 'utf-8-unix)
     (setq locale-coding-system 'utf-8-unix)
   #+end_src
** global-auto-revert-mode
   #+begin_src emacs-lisp
     (global-auto-revert-mode t)
   #+end_src
** yes/no to y/n
   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src
** killできないようにする
   #+begin_src emacs-lisp
     (with-current-buffer "*scratch*"
       (emacs-lock-mode 'kill))
     (with-current-buffer "*Messages*"
       (emacs-lock-mode 'kill))
   #+end_src
** dired-use-ls-dired
   #+begin_src emacs-lisp
     (when (string= system-type "darwin")
       (setq dired-use-ls-dired nil))
   #+end_src
** keybind
   #+BEGIN_SRC emacs-lisp
     (keyboard-translate ?\C-h ?\C-?)

     (global-set-key (kbd "M-¥") '(lambda () (interactive) (insert "\\")))
     (global-set-key (kbd "C-h") 'backward-delete-char)
     (global-set-key (kbd "C-z") 'undo)
     (global-set-key (kbd "C-?") 'help-command)
     (global-set-key (kbd "C-a") 'back-to-indentation)
     (global-set-key (kbd "C-c i") 'find-function)
     (global-set-key (kbd "C-x C-o") 'other-window)
     (global-set-key (kbd "C-x C-k") nil)
     ;; (global-set-key (kbd "C-x C-c") nil)
   #+END_SRC
** common lispを使う
   #+begin_src emacs-lisp
     (eval-when-compile
       (setq byte-compile-warnings '(cl-functions))
       (require 'cl-lib nil t))

     (with-delayed-execution
       (message "install cl-lib....")
       (require 'cl-lib))
   #+end_src
* Utility
** dash
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'dash))

     (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/dash")))
   #+end_src
** mustache
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'mustache))

     (with-delayed-execution
       (message "Install mustache...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/mustache"))))
   #+end_src
** f
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'f))

     (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/f")))
   #+end_src
** s
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 's))

     (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/s")))
   #+end_src
** ht
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ht))

     (with-delayed-execution
       (message "Install ht...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/ht"))))
   #+end_src
** lv
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'lv))

     (with-delayed-execution
       (message "Install lv...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/lv"))))
   #+end_src
** spinner
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'spinner))

     (with-delayed-execution
       (message "Install spinner...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/spinner"))))
   #+end_src
** shrink-path
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'shrink-path))

     (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/shrink-path")))
   #+end_src
* Language
** buffer-mode
   #+begin_src emacs-lisp
     (setq initial-scratch-message nil)
     (setq initial-major-mode 'org-mode)
   #+end_src
** c++-mode
   #+begin_src emacs-lisp
     (with-eval-after-load 'c++-mode
       (add-hook 'c++-mode-hook 'lsp-deferred))
   #+end_src
** c-mode
   #+begin_src emacs-lisp
     (with-eval-after-load 'c-mode
       (add-hook 'c-mode-hook 'lsp-deferred))
   #+end_src
** clojure-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'clojure-mode))

     (with-delayed-execution
       (message "Install clojure-mode")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/clojure-mode")))
       (when (autoload-if-found '(clojure-mode) "clojure-mode" nil t)
         (push '("\\.clj$" . clojure-mode) auto-mode-alist)
         (push '("\\.cljs$" . clojure-mode) auto-mode-alist)))
   #+END_SRC
** cmake-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'cmake-mode))

     (with-delayed-execution
       (message "Install cmake...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/cmake-mode")))
       (when (autoload-if-found '(cmake-mode) "cmake-mode" nil t)
         (push '("\\.cmake$" . cmake-mode) auto-mode-alist)))
   #+END_SRC
** coffee-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'coffee-mode))

     (with-delayed-execution
       (message "Install coffee-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/coffee-mode")))
       (when (autoload-if-found '(coffee-mode) "coffee-mode" nil t)
         (push '("\\.coffee$" . coffee-mode) auto-mode-alist)))
   #+END_SRC
** csharp-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'csharp-mode))

     (with-delayed-execution
       (message "Install csharp-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/csharp-mode")))
       (when (autoload-if-found '(csharp-mode) "csharp-mode" nil t)
         (push '("\\.cs$" . csharp-mode) auto-mode-alist)))
   #+END_SRC
** csv-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'csv-mode))

     (with-delayed-execution
       (message "Install csv-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/csv-mode")))
       (when (autoload-if-found '(csv-mode) "csv-mode" nil t)
         (push '("\\.csv$" . csv-mode) auto-mode-alist)))
   #+END_SRC
** dart-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'dart-mode))

     (with-delayed-execution
       (message "Install dart-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/dart-mode")))
       (when (autoload-if-found '(dart-mode) "dart-mode" nil t)
         (push '("\\.dart$" . dart-mode) auto-mode-alist)))
   #+end_src
** docker-compose-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'docker-compose-mode))

     (with-delayed-execution
       (message "Install docker-comopse-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/docker-compose-mode")))
       (when (autoload-if-found '(docker-compose-mode) "docker-compose-mode" nil t)
         (push '("\\docker-compose*" . docker-compose-mode) auto-mode-alist)))
   #+end_src
** dockerfile-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'dockerfile-mode))

     (with-delayed-execution
       (message "Install dockerfile-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/dockerfile-mode")))
       (when (autoload-if-found '(dockerfile-mode) "dockerfile-mode" nil t)
         (push '("Dockerfile\\'" . dockerfile-mode) auto-mode-alist)))
   #+END_SRC
** emmet-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'emmet-mode))

     (with-delayed-execution
       (message "Install emmet-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/emmet-mode")))
       (when (autoload-if-found '(emmet-mode) "emmet-mode" nil t)
         (add-hook 'web-mode-hook 'emmet-mode)
         (add-hook 'css-mode-hook 'emmet-mode)
         (add-hook 'typescript-tsx-mode-hook 'emmet-mode)
         (with-eval-after-load 'emmet-mode
           (when (boundp 'emmet-mode-keymap)
             (define-key emmet-mode-keymap (kbd "C-j") nil)
             (define-key emmet-mode-keymap (kbd "M-j") 'emmet-expand-line)))))
   #+END_SRC
** fish-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'fish-mode))

     (with-delayed-execution
       (message "Install fish-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/fish-mode")))
       (when (autoload-if-found '(fish-mode) "fish-mode" nil t)
         (push '("\\.fish$" . fish-mode) auto-mode-alist)
         (with-eval-after-load "fish-mode"
           (eval-and-compile
             (setq fish-enable-auto-indent t)))))
   #+END_SRC
** git-modes
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'git-modes))

     (with-delayed-execution
       (message "Install git-modes...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/git-modes")))
       (when (autoload-if-found '(gitignore-mode gitconfig-mode) "git-modes" nil t)
         (push '("\\.dockerignore$" . gitignore-mode) auto-mode-alist)
         (push '("\\.gitignore$" . gitignore-mode) auto-mode-alist)
         (push '("\\.prettierignore$" . gitignore-mode) auto-mode-alist)
         (push '("\\.editorconfig$" . gitconfig-mode) auto-mode-alist)))
   #+end_src
** glsl-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'glsl-mode))

     (with-delayed-execution
       (message "Install glsl-mode")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/glsl-mode")))
       (when (autoload-if-found '(glsl-mode) "glsl-mode" nil t)
         (push '("\\.vsh$" . glsl-mode) auto-mode-alist)
         (push '("\\.fsh$" . glsl-mode) auto-mode-alist)))
   #+END_SRC
** go-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'go-mode))

     (with-delayed-execution
       (message "Install go-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/go-mode")))
       (when (autoload-if-found '(go-mode) "go-mode" nil t)
         (push '("\\.go$" . go-mode) auto-mode-alist)
         (with-eval-after-load 'go-mode
           (add-hook 'go-mode-hook 'lsp-deferred)
           (add-hook 'before-save-hook 'gofmt-before-save)
           (eval-and-compile
             (setq gofmt-command "goimports")))))
   #+END_SRC
** gradle-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'gradle-mode))

     (with-delayed-execution
       (message "Install gradle-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/gradle-mode")))
       (when (autoload-if-found '(java-mode) "gradle-mode" nil t)
         (push '("\\.gradle$" . java-mode) auto-mode-alist)))
   #+END_SRC
** graphql-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'graphql-mode))

     (with-delayed-execution
       (message "Install graphql-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/graphql-mode")))
       (with-eval-after-load 'graphql-mode
         (eval-and-compile
           (setq graphql-indent-level 4))))
   #+end_src
** haskell-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle "haskell/haskell-mode"))

     (with-delayed-execution
       (message "Install haskell-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/haskell-mode")))
       (when (autoload-if-found '(haskell-mode) "haskell-mode" nil t)
         (push '("\\.hs$" . haskell-mode) auto-mode-alist)
         (push '("\\.cable$" . haskell-mode) auto-mode-alist)))
   #+END_SRC
** js2-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'js2-mode))

     (with-delayed-execution
       (message "Install js2-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/js2-mode")))
       (when (autoload-if-found '(js2-mode) "js2-mode" nil t)
         (push '("\\.js$" . js2-mode) auto-mode-alist)
         (with-eval-after-load 'js2-mode
           (add-hook 'js2-mode-hook 'lsp-deferred))))
   #+END_SRC
** json-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle "Sterlingg/json-snatcher")
       (el-get-bundle "joshwnj/json-mode"))

     (with-delayed-execution
       (message "Install json-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/json-snatcher")))
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/json-mode")))
       (when (autoload-if-found '(json-mode) "json-mode" nil t)
         (push '("\\.json$" . json-mode) auto-mode-alist)))
   #+END_SRC
** lisp-mode
   #+BEGIN_SRC emacs-lisp
     (when (autoload-if-found '(lisp-mode) "lisp-mode" nil t)
       (push '("\\.lemrc$" . lisp-mode) auto-mode-alist)
       (push '("\\.Cask$" . lisp-mode) auto-mode-alist))
   #+END_SRC
** markdown-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle markdown-mode))

     (with-delayed-execution
       (message "Install markdown-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/poly-markdown")))
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/markdown-mode")))
       (when (autoload-if-found '(markdown-mode) "markdown-mode" nil t)
         (push '("\\.md$" . markdown-mode) auto-mode-alist)
         (push '("\\.markdown$" . markdown-mode) auto-mode-alist)))
   #+END_SRC
** nginx-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'nginx-mode))

     (with-delayed-execution
       (message "Install nginx-mode...")
       (add-to-list 'load-path (locate-user-emacs-file (concat "el-get/nginx-mode")))
       (when (autoload-if-found '(nginx-mode) "nginx-mode" nil t)
         (push '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode) auto-mode-alist)))
   #+END_SRC
** php-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle "emacs-php/php-mode"))

     (with-delayed-execution
       (message "Install php-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/php-mode/lisp"))
       (when (autoload-if-found '(php-mode) "php-mode" nil t)
         (push '("\\.php$" . php-mode) auto-mode-alist)
         (with-eval-after-load 'php-mode
           (add-hook 'php-mode-hook 'lsp-deferred))))
   #+END_SRC
** phpt-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'phpt-mode))

     (with-delayed-execution
       (message "Install phpt-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/phpt-mode"))
       (when (autoload-if-found '(phpt-mode) "phpt-mode" nil t)
         (push '("\\.phpt$" . phpt-mode) auto-mode-alist)))
   #+end_src
** plantuml-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'plantuml-mode))

     (with-delayed-execution
       (message "Install plantuml-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/plantuml-mode"))
       (when (autoload-if-found '(plantuml-mode) "plantuml-mode" nil t)
         (push '("\\.pu$" . plantuml-mode) auto-mode-alist)))
   #+END_SRC
** prisma-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'prisma-mode
         :url "https://github.com/pimeys/emacs-prisma-mode.git"))

     (with-delayed-execution
       (message "Install prisma-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/prisma-mode"))
       (when (autoload-if-found '(prisma-mode) "prisma-mode" nil t)
         (push '("\\.prisma" . prisma-mode) auto-mode-alist)))
   #+end_src
** processing-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'processing-mode))

     (with-delayed-execution
       (message "Install processing-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/processing-mode"))
       (when (autoload-if-found '(processing-mode) "processing-mode" nil t)
         (push '("\\.pde$" . processing-mode) auto-mode-alist)
         (with-eval-after-load 'processing-mode
           (eval-and-compile
             (setq-default processing-location "/opt/processing/processing-java")
             (setq-default processing-output-dir "/tmp")))))
   #+END_SRC
** python-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'python-mode))

     (with-delayed-execution
       (message "Install python-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/python-mode"))
       (when (autoload-if-found '(python-mode) "python-mode" nil t)
         (push '("\\.py$" . python-mode) auto-mode-alist)))
   #+END_SRC
** ruby-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ruby-mode))

     (with-delayed-execution
       (message "Install ruby-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ruby-mode"))
       (when (autoload-if-found '(ruby-mode) "ruby-mode" nil t)
         (push '("\\.rb$" . ruby-mode) auto-mode-alist)
         (push '("Capfile" . ruby-mode) auto-mode-alist)
         (push '("Gemfile" . ruby-mode) auto-mode-alist)
         (push '("Schemafile" . ruby-mode) auto-mode-alist)
         (push '(".pryrc" . ruby-mode) auto-mode-alist)
         (push '("Fastfile" . ruby-mode) auto-mode-alist)
         (push '("Matchfile" . ruby-mode) auto-mode-alist)
         (push '(".git-pr-template" . ruby-mode) auto-mode-alist)
         (with-eval-after-load 'ruby-mode
           (eval-and-compile
             (setq-default ruby-insert-encoding-magic-comment nil)))))
   #+END_SRC
** rust-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'rust-mode))

     (with-delayed-execution
       (message "Install rust-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/rust-mode"))
       (when (autoload-if-found '(rust-mode) "rust-mode" nil t)
         (push '("\\.rs$" . rust-mode) auto-mode-alist)))
   #+END_SRC
** scala-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'scala-mode))

     (with-delayed-execution
       (message "Install scala-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/scala-mode"))
       (when (autoload-if-found '(scala-mode) "scala-mode" nil t)
         (push '("\\.scala$" . scala-mode) auto-mode-alist)))
   #+END_SRC
** scss-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'scss-mode))

     (with-delayed-execution
       (message "Install scss-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/scss-mode")))
   #+end_src
** slim-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'slim-mode))

     (with-delayed-execution
       (message "Install slim-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/slim-mode"))
       (when (autoload-if-found '(slim-mode) "slim-mode" nil t)
         (push '("\\.slim$" . slim-mode) auto-mode-alist)))
   #+END_SRC
** solidity-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'solidity-mode))

     (with-delayed-execution
       (message "Install solidity-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/solidity-mode"))
       (when (autoload-if-found '(solidity-mode) "solidity-mode" nil t)
         (push '("\\.sol$" . solidity-mode) auto-mode-alist)))
   #+end_src
** ssh-config-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ssh-config-mode))

     (with-delayed-execution
       (message "Install ssh-config-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ssh-config-mode"))
       (when (autoload-if-found '(ssh-config-mode ssh-known-hosts-mode ssh-authorized-keys-mode) "ssh-config-mode" nil t)
         (push '("/\\.ssh/config\\(\\.d/.*\\.conf\\)?\\'" . ssh-config-mode) auto-mode-alist)
         (push '("/sshd?_config\\(\\.d/.*\\.conf\\)?\\'" . ssh-config-mode) auto-mode-alist)
         (push '("/known_hosts\\'" . ssh-known-hosts-mode) auto-mode-alist)
         (push '("/authorized_keys2?\\'" . ssh-authorized-keys-mode) auto-mode-alist)))
   #+END_SRC
** sql-mode
   #+begin_src emacs-lisp
     (with-eval-after-load 'sql-mode
       (eval-and-compile
         (setq sql-indent-offset t)))
   #+end_src
** swift-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'swift-mode))

     (with-delayed-execution
       (message "Install swift-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/swift-mode"))
       (when (autoload-if-found '(swift-mode) "swift-mode" nil t)
         (push '("\\.swift$" . swift-mode) auto-mode-alist)))
   #+end_src
** terraform-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'terraform-mode))

     (with-delayed-execution
       (message "Install terraform-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/terraform-mode"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/hcl-mode"))
       (when (autoload-if-found '(terraform-mode) "terraform-mode" nil t)
         (push '("\\.tf$" . terraform-mode) auto-mode-alist)))
   #+END_SRC
** toml-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'toml-mode))

     (with-delayed-execution
       (message "Install toml-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/toml-mode"))
       (when (autoload-if-found '(toml-mode) "toml-mode" nil t)
         (push '("\\.toml$" . toml-mode) auto-mode-alist)))
   #+END_SRC
** typescript-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'typescript-mode))

     (with-delayed-execution
       (message "Install typescript-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/typescript-mode"))
       (require 'typescript-mode)
       (define-derived-mode typescript-tsx-mode typescript-mode "tsx")

       (when (autoload-if-found '(typescript-mode typescript-tsx-mode) "typescript-mode" nil t)
         (push '("\\.ts$" . typescript-mode) auto-mode-alist)
         (add-hook 'typescript-mode-hook 'lsp-deferred)

         (push '("\\.tsx$" . typescript-tsx-mode) auto-mode-alist)
         (add-hook 'typescript-tsx-mode-hook 'lsp-deferred)))
   #+END_SRC
** vue-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ssass-mode)
       (el-get-bundle 'vue-html-mode)
       (el-get-bundle "purcell/mmm-mode")
       (el-get-bundle "Fanael/edit-indirect")
       (el-get-bundle 'vue-mode))

     (with-delayed-execution
       (message "Install vue-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ssass-mode"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/vue-html-mode"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/mmm-mode"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/edit-indirect"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/vue-mode"))
       (when (autoload-if-found '(vue-mode) "vue-mode" nil t)
         (push '("\\.vue$" . vue-mode) auto-mode-alist)))
   #+END_SRC
** vimrc-mode
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'vimrc-mode))

     (with-delayed-execution
       (message "Install vimrc-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/vimrc-mode"))
       (when (autoload-if-found '(vimrc-mode) "vimrc-mode" nil t)
         (push '("\\.vim\\(rc\\)?\\'" . vimrc-mode) auto-mode-alist)))
   #+end_src
** web-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'web-mode))

     (with-delayed-execution
       (message "Install web-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/web-mode"))
       (when (autoload-if-found '(web-mode) "web-mode" nil t)
         (push '("\\.html?\\'" . web-mode) auto-mode-alist)
         (push '("\\.erb?\\'" . web-mode) auto-mode-alist)
         (push '("\\.gsp?\\'" . web-mode) auto-mode-alist)))
   #+END_SRC
** yaml-mode
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle 'yaml-mode))

     (with-delayed-execution
       (message "Install yaml-mode...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/yaml-mode"))
       (when (autoload-if-found '(yaml-mode) "yaml-mode" nil t)
         (push '("\\.ya?ml$" . yaml-mode) auto-mode-alist)
         (push '("phpstan.neon" . yaml-mode) auto-mode-alist)))
   #+END_SRC
* Lisp
** Basic
*** paredit
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'paredit))

      (with-delayed-execution
        (message "Install paredit...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/paredit"))
        (when (autoload-if-found '(enable-paredit-mode) "paredit" nil t)
          (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
          (add-hook 'lisp-interacton-mode-hook 'enable-paredit-mode)
          (global-set-key (kbd "C-c f") 'paredit-forward-slurp-sexp)
          (with-eval-after-load 'paredit
            (show-paren-mode 1))))
    #+END_SRC
*** rainbow-delimiter
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'rainbow-delimiters))

      (with-delayed-execution
        (message "Install rainbow-delimiters...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/rainbow-delimiters"))
        (with-eval-after-load 'rainbow-delimiters
          (add-hook 'prog-mode-hook 'rainbow-delimiters-mode-enable)))
    #+END_SRC
** CommonLisp
*** TODO slime
    #+BEGIN_SRC emacs-lisp
      ;; (with-eval-after-load 'slime
      ;;   (eval-when-compile
      ;;     (setq byte-compile-warnings '(cl-functions))
      ;;     (load (expand-file-name "~/.roswell/helper.el")))
      ;;   (defvar slime-net-coding-system 'utf-8-unix)

      ;;   (define-key 'lisp-mode-map (kbd "C-c h") 'hyperspec-lookup)

      ;;   (defvar common-lisp-hyperspec-root "~/.roswell/HyperSpec/")
      ;;   (defvar common-lisp-hyperspec--reader-macros nil)
      ;;   (defvar common-lisp-hyperspec--format-characters nil)

      ;;   (defun common-lisp-hyperspec (symbol-name)
      ;;     (interactive (list (common-lisp-hyperspec-read-symbol-name)))
      ;;       (let ((name (common-lisp-hyperspec--strip-cl-package
      ;;                    (downcase symbol-name))))
      ;;         (if (fboundp 'cl-maplist)
      ;;             (cl-maplist (lambda (entry)
      ;;                           (eww-open-file (concat common-lisp-hyperspec-root "Body/"
      ;;                                                  (car entry)))
      ;;                           (when (cdr entry)
      ;;                             (sleep-for 1.5)))
      ;;                         (or (common-lisp-hyperspec--find name)
      ;;                             (error "The symbol `%s' is not defined in Common Lisp"
      ;;                                    symbol-name))))))

      ;;   (defun common-lisp-hyperspec-lookup-reader-macro (macro)
      ;;     (interactive
      ;;      (list
      ;;       (let ((completion-ignore-case t))
      ;;         (completing-read "Look up reader-macro: "
      ;;                          common-lisp-hyperspec--reader-macros nil t
      ;;                          (common-lisp-hyperspec-reader-macro-at-point)))))
      ;;     (eww-open-file
      ;;      (concat common-lisp-hyperspec-root "Body/"
      ;;              (gethash macro common-lisp-hyperspec--reader-macros))))

      ;;   (defun common-lisp-hyperspec-format (character-name)
      ;;     (interactive (list (common-lisp-hyperspec--read-format-character)))
      ;;     (if (fboundp 'cl-maplist)
      ;;         (cl-maplist (lambda (entry)
      ;;                       (eww-open-file (common-lisp-hyperspec-section (car entry))))
      ;;                     (or (gethash character-name
      ;;                                  common-lisp-hyperspec--format-characters)
      ;;                         (error "The symbol `%s' is not defined in Common Lisp"
      ;;                                character-name)))))

      ;;   (defadvice common-lisp-hyperspec (around common-lisp-hyperspec-around activate)
      ;;     (let ((buf (current-buffer)))
      ;;       ad-do-it
      ;;       (switch-to-buffer buf)
      ;;       (pop-to-buffer "*eww*")))

      ;;   (defadvice common-lisp-hyperspec-lookup-reader-macro (around common-lisp-hyperspec-lookup-reader-macro-around activate)
      ;;     (let ((buf (current-buffer)))
      ;;       ad-do-it
      ;;       (switch-to-buffer buf)
      ;;       (pop-to-buffer "*eww*")))

      ;;   (defadvice common-lisp-hyperspec-format (around common-lisp-hyperspec-format activate)
      ;;     (let ((buf (current-buffer)))
      ;;       ad-do-it
      ;;       (switch-to-buffer buf)
      ;;       (pop-to-buffer "*eww*"))))
    #+END_SRC
*** TODO my/slime-history
    #+BEGIN_SRC emacs-lisp
      ;; (add-hook 'slime-mode-hook (lambda ()
      ;;                              (define-key 'slime-repl-mode-map (kbd "C-c C-r") 'my/slime-history)))

      ;; (with-eval-after-load 'slime
      ;;   (defun my/slime-history ()
      ;;     (interactive)
      ;;     (require 'f)
      ;;     (require 'dash)
      ;;     (if (and (fboundp '-distinct)
      ;;              (fboundp 'f-read-text))
      ;;         (insert
      ;;          (completing-read
      ;;           "choice history: "
      ;;           (-distinct (read (f-read-text "~/.slime-history.eld"))))))))
    #+END_SRC
** EmacsLisp
*** elisp-slime-nav
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'elisp-slime-nav))

      (with-delayed-execution
        (message "Install eslisp-slime-nav...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/elisp-slime-nav"))
        (with-eval-after-load 'elisp-slime-nav
          (add-hook 'emacs-lisp-mode-hook 'elisp-slime-nav-mode)
          (add-hook 'ielm-mode-hook 'elisp-slime-nav-mode)))
    #+END_SRC
*** nameless
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'nameless))

      (with-delayed-execution
        (message "Install nameless...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/nameless"))
        (with-eval-after-load 'nameless
          (add-hook 'ielm-mode-hook 'nameless-mode)
          (add-hook 'emacs-lisp-mode-hook 'nameless-mode)))
    #+END_SRC
*** TODO my/ielm-history
    #+BEGIN_SRC emacs-lisp
      ;; (defun my/ielm-history ()
      ;;   (interactive)
      ;;   (insert
      ;;    (completing-read
      ;;     "choice history: "
      ;;     (progn
      ;;       (let ((history nil)
      ;;             (comint-input-ring nil))
      ;;         (if (and (fboundp 'ring-length)
      ;;                  (fboundp 'ring-ref))
      ;;             (dotimes (index (ring-length comint-input-ring))
      ;;               (push (ring-ref comint-input-ring index) history)))
      ;;         history)))))
    #+END_SRC
** Clojure
*** cider
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'cider))

      (with-delayed-execution
        (message "Install cider...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/cider"))
        (with-eval-after-load 'cider))
    #+END_SRC
* Awesome Package
** Search
*** el-get
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle abo-abo/swiper))

      (with-delayed-execution
        (message "Install swiper...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/swiper")))
    #+end_src
*** swiper
    #+BEGIN_SRC emacs-lisp
      (with-delayed-execution
        (when (autoload-if-found '(my/swiper) "swiper" nil t)
          (defun my/swiper ()
            (interactive)
            (let ((word (thing-at-point 'symbol 'no-properties)))
              (swiper word)))
          (global-set-key (kbd "C-o") 'my/swiper)))
    #+END_SRC
*** counsel
    #+begin_src emacs-lisp
      (with-delayed-execution
        (when (autoload-if-found '(counsel-mode counsel-compile) "counsel" nil t)
          (global-set-key (kbd "C-x m") 'counsel-compile)
          (counsel-mode 1)))
    #+end_src
*** ivy
    #+begin_src emacs-lisp
      (with-delayed-execution
        (when (autoload-if-found '(ivy-mode) "ivy" nil t)
          (ivy-mode 1)
          (with-eval-after-load 'ivy
            (eval-and-compile
              (setq ivy-use-virtual-buffers t)))))
    #+end_src
*** ivy-rich
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'ivy-rich))

      (with-delayed-execution
        (message "Install ivy-rich...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/ivy-rich"))
        (when (autoload-if-found '(ivy-rich-mode) "ivy-rich" nil t)
          (ivy-rich-mode 1)
          (with-eval-after-load 'ivy-rich
            (eval-and-compile
              (setq ivy-rich-path-style 'abbrev)))))
    #+END_SRC
** Theme
*** all-the-icons
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'all-the-icons))

      (add-to-list 'load-path (locate-user-emacs-file "el-get/all-the-icons"))
    #+END_SRC
*** all-the-icons-dired
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'all-the-icons-dired))

      (with-delayed-execution
        (message "Install all-the-icons-dired...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/all-the-icons-dired"))
        (when (autoload-if-found '(all-the-icons-dired-mode) "all-the-icons-dired")
          (with-eval-after-load 'all-the-icons-dired-mode
            (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))))
    #+end_src
*** dashboard
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'dashboard))

      (with-delayed-execution
        (message "Install dashboard...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/dashboard"))
        (when (autoload-if-found '(dashboard-refresh-buffer) "dashboard" nil t)
          (with-eval-after-load 'dashboard
            (eval-and-compile
              (setq dashboard-startup-banner 4)
              (setq dashboard-items '((recents . 15)
                                      (projects . 5)
                                      (bookmarks . 5)))))))
    #+end_src
*** doom-themes
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'doom-themes))

      (add-to-list 'load-path (locate-user-emacs-file "el-get/doom-themes"))
      (add-to-list 'load-path (locate-user-emacs-file "el-get/doom-themes/extensions"))

      (load-theme 'tango-dark t)
    #+END_SRC
*** doom-modeline
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'doom-modeline))

      (add-to-list 'load-path (locate-user-emacs-file "el-get/doom-modeline"))

      (when (autoload-if-found '(doom-modeline-mode line-number-mode column-number-mode) "doom-modeline" nil t)
        (add-hook 'after-init-hook 'doom-modeline-mode)
        (doom-modeline-mode 1)
        (line-number-mode 0)
        (column-number-mode 0)
        (with-eval-after-load 'doom-modeline
          (eval-and-compile
            (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
            (setq doom-modeline-icon t)
            (setq doom-modeline-major-mode-icon t)
            (setq doom-modeline-minor-modes nil)
            (setq inhibit-compacting-font-caches t))))
    #+END_SRC
*** hl-line
    #+BEGIN_SRC emacs-lisp
      ;; (add-hook 'emacs-startup-hook 'global-hl-line-mode)

      (when (autoload-if-found '(global-hl-line-mode) "hl-line-mode" nil t)
        (with-eval-after-load 'hl-line
          (set-face-attribute 'hl-line nil :inherit nil)
          (set-face-background 'hl-line "#444642")))
    #+END_SRC
*** neotree
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'neotree))

      (with-delayed-execution
        (message "Install neotree...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/neotree"))
        (when (autoload-if-found '(my/neotree-toggle) "neotree" nil t)
          (global-set-key (kbd "C-q") 'my/neotree-toggle)
          (with-eval-after-load 'neotree
            (defun my/neotree-toggle ()
              (interactive)
              (let ((default-directory (locate-dominating-file default-directory ".git")))
                (if (and (fboundp 'neo-global--window-exists-p)
                         (neo-global--window-exists-p))
                    (neotree-hide)
                  (neotree-dir default-directory))))
            (eval-and-compile
              (setq neo-autorefresh nil)
              (setq neo-theme 'nerd2)
              (setq neo-show-hidden-files t)
              (setq neo-window-fixed-size nil))
            (if window-system
                (defun neo-buffer--insert-fold-symbol (name &optional file-name)
                  (or
                   (and
                    (equal name 'open)
                    (insert
                     (format " %s "
                             (all-the-icons-icon-for-dir file-name "down"))))
                   (and
                    (equal name 'close)
                    (insert
                     (format " %s "
                             (all-the-icons-icon-for-dir file-name "right"))))
                   (and
                    (equal name 'leaf)
                    (insert
                     (format " %s "
                             (all-the-icons-icon-for-file file-name))))))))))

    #+END_SRC
*** nyan-mode
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'nyan-mode))

      (add-to-list 'load-path (locate-user-emacs-file "el-get/nyan-mode"))

      (when (autoload-if-found '(nyan-mode) "nyan-mode" nil t)
        (add-hook 'doom-modeline-mode-hook 'nyan-mode)
        (with-eval-after-load 'nyan-mode
          (eval-and-compile
            (setq nyan-cat-face-number 4)
            (setq nyan-animate-nyancat t))))
    #+END_SRC
** Project
*** projectile
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'projectile))

      (with-delayed-execution
        (message "Install projectile...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/projectile"))
        (when (autoload-if-found '(projectile-mode projectile-command-map my/update-projectile-known-projects) "projectile" nil t)
          (global-set-key (kbd "M-p") 'projectile-command-map)
          (global-set-key (kbd "C-c p") 'projectile-command-map)

          (projectile-mode +1)
          (add-hook 'projectile-mode-hook 'my/update-projectile-known-projects)
          (defun my/update-projectile-known-projects ()
            (interactive)
            (setq projectile-known-projects (mapcar
                                             (lambda (x)
                                               (abbreviate-file-name (concat x "/")))
                                             (split-string (shell-command-to-string "ghq list --full-path")))))
          (with-eval-after-load 'projectile
            (eval-and-compile
              (setq projectile-switch-project-action 'projectile-dired)
              (setq projectile-enable-caching t)))))
    #+end_src
*** counsel-projectile
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'counsel-projectile))

      (with-delayed-execution
        (message "Install counsel-projectile...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/counsel-projectile"))
        (when (autoload-if-found '(counsel-projectile-mode) "counsel-projectile" nil t)
          (counsel-projectile-mode +1)))
    #+end_src
** Refactor
*** emr
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'popup)
        (el-get-bundle 'list-utils)
        (el-get-bundle 'iedit)
        (el-get-bundle 'emr))

      (with-delayed-execution
        (message "Install emr...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/popup"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/list-utils"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/iedit"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/emr"))
        (when (autoload-if-found '(emr-show-refactor-menu) "emr" nil t)
          (define-key prog-mode-map (kbd "M-RET") 'emr-show-refactor-menu)))
    #+END_SRC
** Completion
*** company
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company))

      (add-to-list 'load-path (locate-user-emacs-file "el-get/company"))

      (when (autoload-if-found '(global-company-mode company-capf company-elisp company-yasnippet) "company" nil t)
        (add-hook 'after-init-hook (lambda ()
                                     (global-company-mode)
                                     (when (boundp 'company-backends)
                                       (push 'company-capf company-backends)
                                       (push 'company-elisp company-backends)
                                       (push 'company-yasnippet company-backends))))
        (when (boundp 'company-active-map)
          (define-key company-active-map (kbd "C-n") 'company-select-next)
          (define-key company-active-map (kbd "C-p") 'company-select-previous)))
    #+END_SRC
*** company-dockerfile
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-dockerfile
          :url "https://github.com/takeokunn/company-dockerfile.git"))

      (with-delayed-execution
        (message "Install company-dockerfile...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-dockerfile"))
        (when (autoload-if-found '(company-dockerfile) "company-dockerfile" nil t)
          (when (boundp 'company-backends)
            (push 'company-dockerfile company-backends))))
    #+end_src
*** company-glsl
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-glsl))

      (with-delayed-execution
        (message "Install company-glsl...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-glsl"))
        (when (autoload-if-found '(company-glsl) "company-glsl" nil t)
          (when (boundp 'company-backends)
            (push 'company-glsl company-backends))))
    #+END_SRC
*** company-c-headers
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-c-headers))

      (with-delayed-execution
        (message "Install company-c-headers...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-c-headers"))
        (when (autoload-if-found '(company-c-headers) "company-c-headers" nil t)
          (when (boundp 'company-backends)
            (push 'company-c-headers company-backends))))
    #+end_src
*** company-shell
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle "takeokunn/company-shell"))

      (with-delayed-execution
        (message "Install company-shell...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-shell"))
        (when (autoload-if-found '(company-shell company-shell-env company-fish-shell) "company-shell" nil t)
          (when (boundp 'company-backends)
            (push 'company-shell company-backends)
            (push 'company-shell-env company-backends)
            (push 'company-fish-shell company-backends))))
    #+end_src
*** company-terraform
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-terraform))

      (with-delayed-execution
        (message "Install company-terraform...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-terraform"))
        (when (autoload-if-found '(company-terraform) "company-terraform" nil t)
          (with-eval-after-load 'company
            (when (boundp 'company-backends)
              (push 'company-terraform company-backends)))))
    #+end_src
*** company-go
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'company-go))

      (with-delayed-execution
        (message "Install company-go...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/company-go"))
        (when (autoload-if-found '(company-go) "company-go" nil t)
          (when (boundp 'company-backends)
            (push 'company-go company-backends))))
    #+end_src
*** TODO slime-company
    #+begin_src emacs-lisp
      ;; (eval-when-compile
      ;;   (el-get-bundle "anwyn/slime-company"))

      ;; (with-delayed-execution
      ;;   (message "Install slime-company...")
      ;;   (add-to-list 'load-path (locate-user-emacs-file "el-get/slime-company"))
      ;;   (when (autoload-if-found '(company-slime) "slime-company" nil t)
      ;;     (with-eval-after-load 'company
      ;;       (when (boundp 'company-backends)
      ;;         (push 'company-slime company-backends))
      ;;       (eval-and-compile
      ;;         (setq slime-company-completion 'fuzzy)
      ;;         (setq slime-company-after-completion 'slime-company-just-one-space)))))
    #+end_src
** Snippet
*** yasnippet
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle "yasnippet"))

      (with-delayed-execution
        (message "Install yasnippet...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/yasnippet"))
        (when (autoload-if-found '(yas-global-mode) "yasnippet" nil t)
          (yas-global-mode 1)))
    #+end_src
*** ivy-yasnippet
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle "mkcms/ivy-yasnippet"))

      (with-delayed-execution
        (message "Install ivy-yasnippet...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/ivy-yasnippet"))
        (when (autoload-if-found '(ivy-yasnippet) "ivy-yasnippet" nil t)
          (global-set-key (kbd "C-c y") 'ivy-yasnippet)
          (global-set-key (kbd "C-c C-y") 'ivy-yasnippet)))
    #+end_src
** LSP
*** lsp-mode
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle lsp-mode))

      (with-delayed-execution
        (message "Install lsp-mode...")

        (add-to-list 'load-path (locate-user-emacs-file "el-get/lsp-mode"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/lsp-mode/clients"))

        (defun my/load-lsp-libs ()
          (require 'lsp-mode)
          (require 'lsp-modeline)
          (require 'lsp-headerline))

        (add-hook 'lsp-mode-hook 'my/load-lsp-libs)

        (when (autoload-if-found '(lsp lsp-deferred) "lsp-mode" nil t)
          (with-eval-after-load 'lsp-mode
            (eval-and-compile
              (setq lsp-keymap-prefix "C-c l")
              (setq lsp-completion-provider t)))))
    #+END_SRC
*** dap-mode
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'bui)
        (el-get-bundle 'pfuture)
        (el-get-bundle 'treemacs)
        (el-get-bundle 'tree-mode)
        (el-get-bundle 'posframe)
        (el-get-bundle 'dap-mode))

      (with-delayed-execution
        (message "Install dap-mode...")

        (add-to-list 'load-path (locate-user-emacs-file "el-get/bui"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/pfuture"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/treemacs/src/elisp"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/tree-mode"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/posframe"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/lsp-treemacs"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/dap-mode"))

        (when (autoload-if-found '(dap-mode dap-hydra) "dap-mode" nil t)
          ;; (define-key dap-mode-map (kbd "C-c d") 'dap-breakpoint-toggle)
          ;; (add-hook 'dap-stopped-hook (lambda () (call-interactively 'dap-hydra)))
          (dap-mode 1))

        (when (autoload-if-found '(dap-ui-mode) "dap-ui" nil t)
          (dap-ui-mode 1))

        (when (autoload-if-found '(dap-tooltip-mode) "dap-mouse" nil t)
          (dap-tooltip-mode 1)))
    #+END_SRC
*** lsp-ui
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle lsp-ui))

      (with-delayed-execution
        (message "Install lsp-ui...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/lsp-ui"))
        (when (autoload-if-found '(lsp-ui-mode) "lsp-ui" nil t)
          (add-hook 'lsp-mode-hook 'lsp-ui-mode)
          (with-eval-after-load 'lsp-mode
            (eval-and-compile
              (setq lsp-ui-doc-enable t)
              (setq lsp-ui-doc-max-height 15)
              (setq lsp-ui-sideline-enable nil)
              (setq lsp-ui-imenu-enable nil)
              (setq lsp-ui-sideline-enable nil)))))
    #+END_SRC
** Git
*** magit
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle magit/transient)
        (el-get-bundle magit/ghub)
        (el-get-bundle magit/magit-popup)
        (el-get-bundle magit/with-editor)
        (el-get-bundle magit/magit))

      (add-to-list 'load-path (locate-user-emacs-file "el-get/transient/lisp"))
      (add-to-list 'load-path (locate-user-emacs-file "el-get/ghub/lisp"))
      (add-to-list 'load-path (locate-user-emacs-file "el-get/magit-pop"))
      (add-to-list 'load-path (locate-user-emacs-file "el-get/with-editor/lisp"))
      (add-to-list 'load-path (locate-user-emacs-file "el-get/magit/lisp"))

      (when (autoload-if-found '(global-git-commit-mode) "git-commit" nil t)
        (add-hook 'after-init-hook 'global-git-commit-mode))

      (when (autoload-if-found '(global-git-commit-mode magit-status) "magit")
        (global-set-key (kbd "C-x g") 'magit-status)
        (with-eval-after-load 'magit
          (eval-and-compile
            (setq magit-refresh-status-buffer nil))))
    #+END_SRC
*** magit-forge
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'treepy)
        (el-get-bundle 'yaml)
        (el-get-bundle "emacscollective/closql")
        (el-get-bundle "skeeto/emacsql")
        (el-get-bundle "magit/forge"))

      (with-delayed-execution
        (add-to-list 'load-path (locate-user-emacs-file "el-get/treepy"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/yaml"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/closql"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/emacsql"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/ghub"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/forge/lisp"))
        (add-hook 'magit-mode-hook (lambda ()
                                     (require 'forge))))
    #+end_src
** Shell
*** exec-path-from-shell
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle exec-path-from-shell))

      (add-to-list 'load-path (locate-user-emacs-file "el-get/exec-path-from-shell"))

      (when (autoload-if-found '(exec-path-from-shell-initialize) "exec-path-from-shell")
        (add-hook 'after-init-hook 'exec-path-from-shell-initialize)
        (with-eval-after-load 'exec-path-from-shell
          (eval-and-compile
            (setq exec-path-from-shell-variables '("PATH" "GEM_HOME" "GOROOT" "GOPATH")))))
    #+END_SRC
** Cpp
*** clang-format
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'clang-format))

      (with-delayed-execution
        (message "Install clang-format...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/clang-format"))
        (when (autoload-if-found '(clang-format-buffer c-mode c++-mode) "clang-format" nil t)
          (add-hook 'before-save-hook (lambda ()
                                        (when (member major-mode '(c-mode c++-mode))
                                          (clang-format-buffer))))))
    #+end_src
*** inferior-cling
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle "brianqq/inferior-cling"))

      (with-delayed-execution
        (message "Install inferior-cling...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/inferior-cling")))
    #+end_src
** JavaScript/TypeScript
*** js2-refactor
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'js2-refactor))

      (with-delayed-execution
        (add-to-list 'load-path (locate-user-emacs-file "el-get/js2-refactor"))
        (when (autoload-if-found '(js2-refactor-mode) "js2-refactor" nil t)
          (add-hook 'js2-mode-hook 'js2-refactor-mode)
          (add-hook 'typescript-mode-hook 'js2-refactor-mode)))
    #+END_SRC
*** tree-sitter
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'tsc)
        (el-get-bundle "emacs-tree-sitter/tree-sitter-langs")
        (el-get-bundle 'tree-sitter))

      (with-delayed-execution
        (message "Install tree-sitter...")

        (add-to-list 'load-path (locate-user-emacs-file "el-get/tsc"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/tree-sitter-langs"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/tree-sitter"))

        (when (autoload-if-found '(tree-sitter-mode tree-sitter-require tree-sitter-hl-add-patterns) "tree-sitter" nil t)
          (add-hook 'typescript-tsx-mode-hook 'tree-sitter-mode)
          (when (require 'tree-sitter-langs)
            (tree-sitter-require 'tsx))
          (tree-sitter-hl-add-patterns 'tsx
            [(call_expression
              ;; styled.div``
              function: (member_expression
                         object: (identifier) @function.call
                         (.eq? @function.call "styled"))
              arguments: ((template_string) @property.definition
                          (.offset! @property.definition 0 1 0 -1)))
             (call_expression
              ;; styled(Component)``
              function: (call_expression
                         function: (identifier) @function.call
                         (.eq? @function.call "styled"))
              arguments: ((template_string) @property.definition
                          (.offset! @property.definition 0 1 0 -1)))])

          (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx)))

        (when (autoload-if-found '(tree-sitter-hl-mode) "tree-sitter-hl" nil t)
          (add-hook 'tree-sitter-after-on-hook 'tree-sitter-hl-mode)))
    #+end_src
** Ruby
*** robe
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'robe))

      (with-delayed-execution
        (message "Install robe...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/robe"))
        (when (autoload-if-found '(robe-mode) "robe" nil t)
          (add-hook 'ruby-mode-hook 'robe-mode)
          (when (boundp 'company-backends)
            (push 'company-robe company-backends))))
    #+end_src
*** rubocop
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'rubocop))

      (with-delayed-execution
        (message "Install rubocop...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/rubocop"))
        (when (autoload-if-found '(rubocop-mode) "rubocop" nil t)
          (add-hook 'ruby-mode-hook 'rubocop-mode)))
    #+end_src
*** ruby-refactor
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'ruby-refactor))

      (with-delayed-execution
        (message "Install ruby-refactor...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/ruby-refactor"))
        (when (autoload-if-found '(ruby-refactor-mode-launch) "ruby-refactor" nil t)
          (add-hook 'ruby-mode-hook 'ruby-refactor-mode-launch)))
    #+END_SRC
*** inf-ruby
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'inf-ruby))

      (with-delayed-execution
        (message "Install inf-ruby...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/inf-ruby"))
        (when (autoload-if-found '(inf-ruby) "inf-ruby")
          (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
          (defun takeokunn/irb-history ()
            (interactive)
            (when (and (fboundp '-distinct)
                       (fboundp 's-lines)
                       (fboundp 'f-read-text))
              (insert
               (completing-read
                "choose history: "
                (mapcar #'list (-distinct (s-lines (f-read-text "~/.irb_history"))))))))))

    #+END_SRC
** SQL
*** sql-indent
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'sql-indent))

      (with-delayed-execution
        (message "Install sql-indent...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/sql-indent"))
        (when (autoload-if-found '(sqlind-minor-mode) "sql-indent" nil t)
          (add-hook 'sql-mode-hook 'sqlind-minor-mode)))
    #+END_SRC
** PHP
*** psysh
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'psysh))

      (with-delayed-execution
        (message "Install psysh...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/psysh")))
    #+end_src
** Markdown
*** poly-markdown
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'polymode)
        (el-get-bundle 'poly-markdown))

      (with-delayed-execution
        (add-to-list 'load-path (locate-user-emacs-file "el-get/polymode"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/poly-markdown"))
        (when (autoload-if-found '(poly-markdown-mode) "poly-markdown" nil t)
          (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))))
    #+end_src
** Fish
*** fish-repl
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'fish-repl
          :url "https://github.com/takeokunn/fish-repl.el.git"))

      (with-delayed-execution
        (message "Install fish-repl...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/fish-repl"))
        (with-eval-after-load 'fish-repl))
    #+end_src
** File
*** recentf
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found '(recentf-mode) "recentf" nil t)
        (add-hook 'emacs-startup-hook (lambda ()
                                        (recentf-mode 1)))
        (with-eval-after-load 'recentf
          (eval-and-compile
            (setq recentf-max-saved-items 10000)
            (setq recentf-auto-cleanup 'never)
            (setq recentf-save-file  "~/.emacs.d/.recentf")
            (setq recentf-exclude '(".recentf")))))
    #+END_SRC
*** open-junk-file
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'open-junk-file))

      (with-delayed-execution
        (message "Install open-junk-file...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/open-junk-file"))
        (when (autoload-if-found '(my/open-junk-file open-junk-file) "open-junk-file" nil t)
          (defun my/open-junk-file ()
            (interactive)
            (ivy-mode 0)
            (let ((default-directory (format-time-string "~/.emacs.d/.junk/%Y-%m%d-%H%M%S." (current-time))))
              (open-junk-file))
            (ivy-mode 1))
          (global-set-key (kbd "C-x j") 'my/open-junk-file)
          (eval-and-compile
            (setq open-junk-file-format ""))))
    #+END_SRC
** Check
*** flycheck
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'flycheck))

      (with-delayed-execution
        (message "Install flycheck...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/flycheck")))
    #+end_src
** Cursor
*** smartrep/multiple-cursors
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'smartrep)
        (el-get-bundle 'multiple-cursors))

      (with-delayed-execution
        (add-to-list 'load-path (locate-user-emacs-file "el-get/smartrep"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/multiple-cursors"))
        (when (autoload-if-found '(smartrep-define-key) "smartrep" nil t)
          (global-unset-key (kbd "C-t"))
          (add-hook 'emacs-startup-hook (lambda ()
                                          (when (fboundp 'smartrep-define-key)
                                            (smartrep-define-key global-map "C-t"
                                              '(("C-t" 'mc/mark-next-like-this)
                                                ("n" 'mc/mark-next-like-this)
                                                ("p" 'mc/mark-previous-like-this)
                                                ("m" 'mc/mark-more-like-this-extended)
                                                ("u" 'mc/unmark-next-like-this)
                                                ("U" 'mc/unmark-previous-like-this)
                                                ("s" 'mc/skip-to-next-like-this)
                                                ("S" 'mc/skip-to-previous-like-this)
                                                ("*" 'mc/mark-all-like-this)
                                                ("d" 'mc/mark-all-like-this-dwim)
                                                ("i" 'mc/insert-numbers)
                                                ("o" 'mc/sort-regions)
                                                ("O" 'mc/reverse-regions))))))))
    #+END_SRC
** Other
*** auto-save-buffers-enhanced
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'auto-save-buffers-enhanced))

      (with-delayed-execution
        (message "Install auto-save-buffers-enhanced...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/auto-save-buffers-enhanced"))
        (when (autoload-if-found '(auto-save-buffers-enhanced) "auto-save-buffers-enhanced" nil t)
          (with-eval-after-load 'auto-save-buffers-enhanced
            (eval-and-compile
              (setq auto-save-buffers-enhanced-interval 10)))))
    #+end_src
*** amx
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'amx))

      (with-delayed-execution
        (message "Install amx...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/amx")))

      (with-eval-after-load 'amx)
    #+END_SRC
*** avy
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'avy)
        (el-get-bundle 'avy-zap))

      (with-delayed-execution
        (message "Install avy...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/avy"))
        (when (autoload-if-found '(avy-goto-char-timer) "avy" nil t)
          (global-set-key (kbd "C-:") 'avy-goto-char-timer))

        (message "Install avy-zap...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/avy-zap"))
        (when (autoload-if-found '(avy-zap-up-to-char-dwim) "avy-zap" nil t)
          (global-set-key (kbd "M-z") 'avy-zap-up-to-char-dwim)))
    #+end_src
*** define-word
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'define-word))

      (with-delayed-execution
        (message "Install define-word...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/define-word"))
        (defun my/define-word ()
          (interactive)
          (if (use-region-p)
              (call-interactively #'define-word-at-point)
            (call-interactively #'define-word)))
        (with-eval-after-load 'define-word
          (eval-and-compile
            (setq define-word-displayfn-alist
                  '((wordnik . takeokunn/define-word--display-in-buffer)
                    (openthesaurus . takeokunn/define-word--display-in-buffer)
                    (webster . takeokunn/define-word--display-in-buffer)
                    (weblio . takeokunn/define-word--display-in-buffer))))))
    #+end_src
*** ddskk
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'ddskk))

      (add-to-list 'load-path (locate-user-emacs-file "el-get/ddskk"))

      (when (autoload-if-found '(skk-mode) "skk" nil t)
        (global-set-key (kbd "C-x C-j") 'skk-mode)
        (with-eval-after-load 'ddskk
          (eval-and-compile
            (setq skk-byte-compile-init-file t)
            (setq skk-isearch-mode-enable 'always)
            (setq skk-preload t)
            (setq default-input-method "japanese-skk"))))
    #+END_SRC
*** editorconfig
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'editorconfig))

      (with-delayed-execution
        (message "Install editorconfig...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/editorconfig"))
        (when (autoload-if-found '(editorconfig-mode) "editorconfig" nil t)
          (require 'editorconfig-core)
          (require 'editorconfig)
          (editorconfig-mode 1)))
    #+END_SRC
*** esup
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'esup))

      (with-delayed-execution
        (message "Install esup...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/esup"))
        (with-eval-after-load 'esup))
    #+END_SRC
*** elfeed
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'elfeed))

      (with-delayed-execution
        (message "Install elfeed...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/elfeed"))
        (with-eval-after-load 'elfeed
          (eval-and-compile
            (setq elfeed-search-filter "@3-days-ago +unread")
            (setq browse-url-browser-function 'eww-browse-url))))
    #+end_src
*** elfeed-org
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'elfeed-org))

      (with-delayed-execution
        (message "Install elfeed-org...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/elfeed-org"))
        (when (autoload-if-found '(elfeed-org) "elfeed-org" nil t)
          (add-hook 'emacs-startup-hook (lambda ()
                                          (elfeed-org)))
          (with-eval-after-load 'elfeed-org
            (eval-and-compile
              (setq rmh-elfeed-org-files '("~/.emacs.d/elfeed.org"))))))
    #+end_src
*** font-lock-studio
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'font-lock-studio))

      (with-delayed-execution
        (message "Install font-lock-studio...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/font-lock-studio")))
    #+END_SRC
*** google-this
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'google-this))

      (with-delayed-execution
        (message "Install google-this...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/google-this"))
        (when (autoload-if-found '(google-this) "google-this" nil t)
          (global-set-key (kbd "M-g") 'google-this)))
    #+END_SRC
*** goto-addr
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found '(goto-address-prog-mode goto-address-mode) "goto-address" nil t)
        (add-hook 'prog-mode-hook 'goto-address-prog-mode)
        (add-hook 'text-mode-hook 'goto-address-mode))
    #+END_SRC
*** htmlize
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'htmlize))

      (with-delayed-execution
        (message "Install htmlize...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/htmlize"))
        (with-eval-after-load 'htmlize))
    #+end_src
*** keyfreq
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'keyfreq))

      (with-delayed-execution
        (message "Install keyfreq...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/keyfreq"))
        (when (autoload-if-found '(keyfreq-mode keyfreq-autosave-mode) "keyfreq" nil t)
          (add-hook 'emacs-startup-hook (lambda ()
                                          (keyfreq-mode 1)
                                          (keyfreq-autosave-mode 1)))))
    #+end_src
*** lorem ipsum
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'lorem-ipsum))

      (with-delayed-execution
        (message "Install lorem-ipsum...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/lorem-ipsum"))
        (when (autoload-if-found '(lorem-ipsum-insert-sentences lorem-ipsum-insert-paragraphs lorem-ipsum-insert-list) "lorem-ipsum" nil t)
          (global-set-key (kbd "C-c C-l s") 'lorem-ipsum-insert-sentences)
          (global-set-key (kbd "C-c C-l p") 'lorem-ipsum-insert-paragraphs)
          (global-set-key (kbd "C-c C-l l") 'lorem-ipsum-insert-list)))
    #+end_src
*** minimap
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'minimap))

      (with-delayed-execution
        (message "Install minimap...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/minimap"))
        (when (autoload-if-found '(minimap-mode) "minimap" nil t)
          (global-set-key (kbd "C-x t") 'minimap-mode)
          (with-eval-after-load 'minimap
            (setq minimap-window-location 'right)
            (setq minimap-update-delay 0.2)
            (setq minimap-minimum-width 20)
            (setq minimap-major-modes '(prog-mode org-mode)))))
    #+end_src
*** origami
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'origami))

      (with-delayed-execution
        (message "Install origami...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/origami"))
        (when (autoload-if-found '(global-origami-mode origami-recursively-toggle-node origami-recursively-toggle-node) "origami" nil t)
          (add-hook 'emacs-startup-hook (lambda () (global-origami-mode)))
          (global-set-key (kbd "C-c t") 'origami-recursively-toggle-node)
          (global-set-key (kbd "C-c C-t") 'origami-recursively-toggle-node)))
    #+end_src
*** popwin
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'popwin))

      (with-delayed-execution
        (message "Install popwin...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/popwin"))
        (when (autoload-if-found '(popwin-mode) "popwin" nil t)
          (add-hook 'emacs-startup-hook (lambda ()
                                          (popwin-mode 1)))))
    #+end_src
*** smartparens
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (el-get-bundle 'smartparens))

      (with-delayed-execution
        (message "Install smartparens...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/smartparens"))
        (with-eval-after-load 'smartparens))
    #+END_SRC
*** smart-jump
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'smart-jump))

      (with-delayed-execution
        (message "Install smart-jump...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/smart-jump"))
        (with-eval-after-load 'smart-jump))
    #+end_src
*** TODO subword
    #+begin_src emacs-lisp
      ;; (eval-when-compile
      ;;   (when (require 'subword nil t)
      ;;     (defun my/delete-forward-block ()
      ;;       (interactive)
      ;;       (if (eobp)
      ;;           (message "End of buffer")
      ;;         (let* ((syntax-move-point
      ;;                 (save-excursion
      ;;                   (skip-syntax-forward (string (char-syntax (char-after))))
      ;;                   (point)))
      ;;                (subword-move-point
      ;;                 (save-excursion
      ;;                   (subword-forward)
      ;;                   (point))))
      ;;           (kill-region (point) (min syntax-move-point subword-move-point)))))))

      ;; (global-set-key (kbd "M-d") 'my/delete-forward-block)

      ;; (with-eval-after-load 'subword)
    #+end_src
*** undo-tree
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'queue)
        (el-get-bundle 'undo-tree))

      (with-delayed-execution
        (message "Install undo-tree...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/queue"))
        (add-to-list 'load-path (locate-user-emacs-file "el-get/undo-tree"))
        (require 'queue)
        (when (autoload-if-found '(global-undo-tree-mode) "undo-tree" nil t)
          (global-undo-tree-mode)
          (with-eval-after-load 'undo-tree
            (eval-and-compile
              (setq undo-tree-auto-save-history nil)))))
    #+end_src
*** uuid
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'uuid
                       :url "https://github.com/nicferrier/emacs-uuid.git"))

      (with-delayed-execution
        (message "Install uuid...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/uuid"))
        (when (autoload-if-found '(my/uuid) "uuid" nil t)
          (defun my/uuid ()
            (interactive)
            (insert (uuid-string)))
          (defalias 'my/uuid 'uuid)))
    #+end_src
*** wanderlust
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'wanderlust))

      (with-delayed-execution
        (message "Install wanderlust...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/wanderlust"))
        (with-eval-after-load 'wanderlust
          (eval-and-compile
            (setq ssl-certificate-verification-policy 1))))
    #+end_src
*** which-key
    #+begin_src emacs-lisp
      (eval-when-compile
        (el-get-bundle 'which-key))

      (with-delayed-execution
        (message "Install which-key...")
        (add-to-list 'load-path (locate-user-emacs-file "el-get/which-key"))
        (when (autoload-if-found '(which-key-mode) "which-key" nil t)
          (add-hook 'after-init-hook 'which-key-mode)))
    #+end_src
*** whitespace
    #+BEGIN_SRC emacs-lisp
      (when (autoload-if-found '(global-whitespace-mode) "whitespace" nil t)
        (add-hook 'emacs-startup-hook (lambda ()
                                        (global-whitespace-mode 1)))
        (with-eval-after-load 'whitespace
          (eval-and-compile
            (setq whitespace-style '(face tabs tab-mark spaces space-mark))
            (setq whitespace-display-mappings '((space-mark ?\u3000 [?\u25a1])
                                                (tab-mark ?\t [?\xBB ?\t] [?\\ ?\t]))))))
    #+END_SRC
*** woman
    #+begin_src emacs-lisp
      (autoload 'woman
        "woman" "Decode and browse a UN*X man page." t)

      (autoload 'woman-find-file "woman"
        "Find, decode and browse a specific UN*X man-page file." t)
    #+end_src
* Eshell
** basic
   #+begin_src emacs-lisp
     (with-eval-after-load 'eshell
       ;; function
       (defun eshell/ff (&rest args)
         (find-file (car args)))

       ;; config
       (defvar eshell-cmpl-ignore-case t)
       (defvar eshell-glob-include-dot-dot nil)
       (defvar eshell-ask-to-save-history (quote always))
       (defvar eshell-history-size 100000)
       (defvar eshell-hist-ignoredups t)


       ;; alias
       (defvar *shell-alias* '(("ll" "ls -la")
                               ("cdd" "cd ~/Desktop")))
       (defvar eshell-command-aliases-list (append *shell-alias*)))
   #+end_src
** eshell-z
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle xuchunyang/eshell-z))

     (with-delayed-execution
       (message "Install eshell-z...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/eshell-z"))
       (when (autoload-if-found '(eshell-z) "eshell-z" nil t)
         (add-hook 'eshell-mode-hok (lambda ()
                                      (define-key 'eshell-mode-map (kbd "C-c C-q") 'eshell-z)))))
   #+end_src
** aweshell
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (el-get-bundle "takeokunn/aweshell"))

     (with-delayed-execution
       (add-to-list 'load-path (locate-user-emacs-file "el-get/aweshell")))

     (with-eval-after-load 'aweshell
       (require 'esh-mode)
       (require 'aweshell)
       ;; (defun takeokunn/counsel-aweshell-history ()
       ;;   (interactive)
       ;;   (insert (ivy-read "Aweshell history: " (aweshell-parse-shell-history))))

       (defvar eshell-mode-map nil)
       (defvar aweshell-auto-suggestion-p nil)
       (defvar eshell-highlight-prompt t)
       ;; (setq eshell-prompt-function 'epe-theme-lambda)

       ;; (add-hook 'eshell-mode-hook
       ;;           (lambda () (define-key eshell-mode-map (kbd "C-c C-r") 'takeokunn/counsel-aweshell-history)))
       )
   #+END_SRC
* Org Mode
** basic
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c a") 'org-agenda)
     (global-set-key (kbd "C-c c") 'org-capture)

     (with-eval-after-load 'org
       (eval-and-compile
         (setq org-use-speed-commands t)
         (setq org-agenda-todo-ignore-with-date t)
         (setq org-directory "~/org")
         (setq org-agenda-files '("~/org/agenda"))
         (setq org-todo-keywords '((sequence "TODO(t)" "TODAY" "WAIT(w)" "|" "DONE(d)")))
         (setq org-capture-templates '(("t" "Todo" entry (file+datetree "~/org/todo.org")
                                        "* %?")
                                       ("m" "Memo" entry (file "~/org/memo.org")
                                        "* %?")))
         (setq org-startup-folded 'fold)
         (setq org-archive-location `,(format "~/org/archive/%s.org"
                                              (format-time-string "%Y" (current-time))))
         (setq org-link '(t (:foreground "#ebe087" :underline t)))))
   #+END_SRC
** org-babel
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'ob-fish :url "https://github.com/takeokunn/ob-fish.git")
       (el-get-bundle 'ob-go)
       (el-get-bundle 'ob-rust)
       (el-get-bundle 'ob-typescript))

     (with-delayed-execution
       (message "Install ob-*...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ob-fish"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ob-go"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ob-rust"))
       (add-to-list 'load-path (locate-user-emacs-file "el-get/ob-typescript"))
       (with-eval-after-load 'ob-core
         (eval-and-compile
           (setq org-confirm-babel-evaluate nil)))
       (with-eval-after-load 'ob-babel
         (org-babel-do-load-languages 'org-babel-load-languages
                                      '((shell . t)
                                        (emacs-lisp . t)
                                        (lisp . t)
                                        (ruby . t)
                                        (fish . t)
                                        (go . t)
                                        (rust . t)
                                        (typescript . t)))))
   #+end_src
** org-journal
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'org-journal))

     (with-delayed-execution
       (message "Install org-journal...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/org-journal"))
       (with-eval-after-load 'org-journal
         (eval-and-compile
           (setq org-journal-dir "~/org/journal")
           (setq org-journal-file-type 'weekly)
           (setq org-journal-prefix-key "C-c j"))))
   #+end_src
** org-superstar
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'org-superstar))

     (add-to-list 'load-path (locate-user-emacs-file "el-get/org-superstar"))

     (when (autoload-if-found '(org-superstar-mode) "org-superstar")
       (add-hook 'org-mode-hook 'org-superstar-mode)
       (with-eval-after-load 'org-superstar
         (eval-and-compile
           (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿"))
           (setq org-superstar-leading-bullet " "))))
   #+end_src
** org-generate
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle 'org-generate))

     (add-to-list 'load-path (locate-user-emacs-file "el-get/org-generate"))

     (with-eval-after-load 'org-generate
       (eval-and-compile
         (setq org-generate-file `,(locate-user-emacs-file "yasnippets.org"))
         (setq org-generate-root "yasnippets")))
   #+end_src
** org-pomodoro
   #+begin_src emacs-lisp
     (eval-when-compile
       (el-get-bundle "marcinkoziej/org-pomodoro"))

     (with-delayed-execution
       (message "Install org-pomodoro...")
       (add-to-list 'load-path (locate-user-emacs-file "el-get/org-pomodoro"))
       (with-eval-after-load 'org-pomodoro))
   #+end_src
* MyFunc
** my/beginning-of-intendation
   #+BEGIN_SRC emacs-lisp
     (defun my/beginning-of-intendation ()
       "move to beginning of line, or indentation"
       (interactive)
       (back-to-indentation))
   #+END_SRC
** my/before-set-auto-mode
   #+BEGIN_SRC emacs-lisp
     ;; (defun my/before-set-auto-mode ()
     ;;   (when (or (and buffer-file-name
     ;;                  (> (or (file-attribute-size (file-attributes buffer-file-name)) 0) 1000000))
     ;;             (> (line-number-at-pos (point-max)) 100000))
     ;;     (prog1 t
     ;;       (prog-mode))))

     ;; (advice-add 'set-auto-mode :before-until my/before-set-auto-mode)
   #+END_SRC
** my/reload-major-mode
   #+BEGIN_SRC emacs-lisp
     (defun my/reload-major-mode ()
       "Reload current major mode."
       (interactive)
       (let ((current-mode major-mode))
         (fundamental-mode)
         (funcall current-mode)
         current-mode))
   #+END_SRC
** my/move-line
   #+begin_src emacs-lisp
     (defun my/move-line (arg)
       (interactive)
       (let ((col (current-column)))
         (unless (eq col 0)
           (move-to-column 0))
         (save-excursion
           (forward-line)
           (transpose-lines arg))
         (forward-line arg)))

     (defun my/move-line-down ()
       (interactive)
       (my/move-line 1))

     (defun my/move-line-up ()
       (interactive)
       (my/move-line -1))

     (global-set-key (kbd "M-N") 'my/move-line-down)
     (global-set-key (kbd "M-P") 'my/move-line-up)
   #+end_src
** my/toggle-read-only-mode
   #+begin_src emacs-lisp
     (defun my/toggle-read-only-mode ()
       (interactive)
       (read-only-mode))

     (global-set-key (kbd "C-x C-q") 'my/toggle-read-only-mode)
   #+end_src
** my/ghq-get
   #+begin_src emacs-lisp
     (defun my/ghq-get ()
       (interactive)
       (let ((url (read-string "url > ")))
         (message
          (shell-command-to-string
           (mapconcat #'shell-quote-argument
                      (list "ghq" "get" url)
                      " ")))))

     (defalias 'ghq-get 'my/ghq-get)
   #+end_src
** footer
  #+begin_src emacs-lisp
    ;; (profiler-report)
    ;; (profiler-stop)
  #+end_src
