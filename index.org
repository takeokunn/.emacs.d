#+title: Configurations for GNU Emacs
#+author: takeounn
#+email: bararararatty@gmail.com
#+startup: content
#+startup: nohideblocks
#+options: num:t auto-id:t
#+setupfile: theme-readtheorg.setup
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

* はじめに
** 基本情報
  - repo: [[http://github.com/takeokunn/.emacs.d][takeokunn/.emacs.d]]
  - twitter: [[https://twitter.com/takeokunn][たけてぃ@takeokunn]]
* Initialize
** byte-compile
   #+BEGIN_SRC emacs-lisp
     ;; Local Variables:
     ;; byte-compile-warnings: (not mapcar inferior-lisp-program)
     ;; End:
   #+END_SRC
** cask
   #+BEGIN_SRC emacs-lisp
     (eval-and-compile
       (require 'cask "~/.cask/cask.el")
       (cask-initialize))
   #+END_SRC
** use-package
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (require 'use-package))
   #+END_SRC
** utility
   #+BEGIN_SRC emacs-lisp
     (eval-and-compile
       (use-package bind-key)
       (use-package dash)
       (use-package dash-functional)
       (use-package s)
       (use-package f)
       (use-package ht)
       (use-package general))
   #+END_SRC
* Basic
** early-init
   #+BEGIN_SRC emacs-lisp
     (if (version< emacs-version "27")
         (progn
           (menu-bar-mode -1)
           (tool-bar-mode -1)
           (toggle-scroll-bar -1)))
   #+END_SRC
** スタートアップメッセージを非表示
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** 末尾のスペースを可視化する
   特定のmode以外末尾のスペースを可視化するようにした。
   #+BEGIN_SRC emacs-lisp
     (setq-default show-trailing-whitespace t)

     (--map (add-hook (intern (concat (symbol-name it) "-hook"))
                      '(lambda () (setq show-trailing-whitespace nil)))
            '(comint-mode
              eshell-mode
              eww-mode
              term-mode
              twittering-mode
              minibuffer-inactive-mode))
   #+END_SRC
** 行番号を表示する
   #+BEGIN_SRC emacs-lisp
     (global-linum-mode t)
   #+END_SRC
** 自動生成ファイルを無効にする
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
     (setq auto-save-list-file-prefix nil)
     (setq create-lockfiles nil)
   #+END_SRC
** C-kで行削除
   #+BEGIN_SRC emacs-lisp
     (setq kill-whole-line t)
   #+END_SRC
** カッコの中をハイライトする
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode t)
     (setq-default show-paren-style 'mixed)
   #+END_SRC
** カッコが自動的に作られるようにする
   #+BEGIN_SRC emacs-lisp
     (electric-pair-mode 1)
   #+END_SRC
** time locale
   #+BEGIN_SRC emacs-lisp
     (setq system-time-locale "C")
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     (set-fontset-font t 'japanese-jisx0208 "TakaoPGothic")
     (add-to-list 'face-font-rescale-alist '(".*Takao P.*" . 0.85))
   #+END_SRC
** GC
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold (* 128 1024 1024)) ;; 128MB
     (setq garbage-collection-messages t)
   #+END_SRC
** indent
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC
** keybind
   #+BEGIN_SRC emacs-lisp
     (keyboard-translate ?\C-h ?\C-?)

     (general-define-key
      "C-h" 'backward-delete-char
      "C-z" 'undo
      "C-?" 'help-command
      "C-m" 'set-mark-command
      "C-a" 'back-to-indentation
      "C-x C-o" 'other-window
      "C-x C-k" nil)
   #+END_SRC
** ビープ音を消す
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src
* Major/Minor Mode
** clojure-mode
   #+BEGIN_SRC emacs-lisp
     (use-package clojure-mode
       :mode (("\\.clj$" . clojure-mode)
              ("\\.cljs$" . clojurescript-mode)))
   #+END_SRC
** cmake-mode
   #+BEGIN_SRC emacs-lisp
     (use-package cmake-mode
       :mode (("\\.cmake$" . cmake-mode)))
   #+END_SRC
** coffee-mode
   #+BEGIN_SRC emacs-lisp
     (use-package coffee-mode
       :mode (("\\.coffee$" . coffee-mode)))
   #+END_SRC
** csharp-mode
   #+BEGIN_SRC emacs-lisp
     (use-package csharp-mode
       :mode (("\\.cs$" . csharp-mode)))
   #+END_SRC
** csv-mode
   #+BEGIN_SRC emacs-lisp
     (use-package csv-mode)
   #+END_SRC
** dhall-mode
   #+BEGIN_SRC emacs-lisp
     (use-package dhall-mode
       :mode (("\\dhall$" . dhall-mode)))
   #+END_SRC
** docker-compose-mode
   #+begin_src emacs-lisp
     (use-package docker-compose-mode
       :mode (("docker-compose*" . docker-compose-mode)))
   #+end_src
** dockerfile-mode
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :mode (("Dockerfile\\'" . dockerfile-mode)))
   #+END_SRC
** emmet-mode
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :after (web-mode vue-mode)
       :init
       (add-hook 'web-mode-hook 'emmet-mode)
       (add-hook 'vue-mode 'emmet-mode)
       :bind (("C-j" . nil)))
   #+END_SRC
** fish-mode
   #+BEGIN_SRC emacs-lisp
     (use-package fish-mode
       :mode (("\\.fish$" . fish-mode)))
   #+END_SRC
** gitignore-mode
   #+BEGIN_SRC emacs-lisp
     (use-package gitignore-mode
       :mode (("\\.dockerignore$" . gitignore-mode)))
   #+END_SRC
** glsl-mode
   #+BEGIN_SRC emacs-lisp
     (use-package glsl-mode
       :mode (("\\.vsh$" . glsl-mode)
              ("\\.fsh$" . glsl-mode)))
   #+END_SRC
** go-mode
   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :mode (("\\.go$" . go-mode)))
   #+END_SRC
** gradle-mode
   #+BEGIN_SRC emacs-lisp
     (use-package gradle-mode
       :mode (("\\.gradle$" . java-mode)))
   #+END_SRC
** haskell-mode
   #+BEGIN_SRC emacs-lisp
     (use-package haskell-mode
       :mode (("\\.hs$" . haskell-mode)
              ("\\.cable$" . haskell-cabal-mode)))
   #+END_SRC
** js2-mode
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :mode (("\\.js$" . js2-mode))
       :init
       (add-hook 'js2-mode-hook #'js2-refactor-mode)
       :config
       (setq js2-skip-preprocessor-directives t))
   #+END_SRC
** json-mode
   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :mode (("\\.json$" . json-mode)))
   #+END_SRC
** lisp-mode
   #+BEGIN_SRC emacs-lisp
     (use-package lisp-mode
       :mode ("Cask" "\\.lemrc?$"))
   #+END_SRC
** markdown-mode
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :mode (("\\.md$" . markdown-mode)
              ("\\.markdown$" . markdown-mode)))
   #+END_SRC
** nginx-mode
   #+BEGIN_SRC emacs-lisp
     (use-package nginx-mode
       :mode (("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode)))
   #+END_SRC
** php-mode
   #+BEGIN_SRC emacs-lisp
     (use-package php-mode
       :mode (("\\.php$" . php-mode)))
   #+END_SRC
** plantuml-mode
   #+BEGIN_SRC emacs-lisp
     (use-package plantuml-mode
       :mode (("\\.pu$" . plantuml-mode)))
   #+END_SRC
** processing-mode
   #+BEGIN_SRC emacs-lisp
     (use-package processing-mode
       :mode (("\\.pde$" . processing-mode))
       :config
       (setq-default processing-location "/opt/processing/processing-java")
       (setq-default processing-output-dir "/tmp"))
  #+END_SRC
** ruby-mode
   #+BEGIN_SRC emacs-lisp
     (use-package ruby-mode
       :mode ("\\.rb$" "Capfile" "Gemfile" "Schemafile")
       :config
       (setq-default ruby-insert-encoding-magic-comment nil))
   #+END_SRC
** rust-mode
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :mode (("\\.rs$" . rust-mode)))
   #+END_SRC
** scala-mode
   #+BEGIN_SRC emacs-lisp
     (use-package scala-mode
       :mode (("\\.scala$" . scala-mode)))
   #+END_SRC
** scheme-mode
   #+BEGIN_SRC emacs-lisp
     (setq-default gosh-program-name "/usr/local/bin/gosh -i")

     (general-def inferior-scheme-mode-map
       "C-p" 'comint-previous-input
       "C-n" 'comint-next-input)
   #+END_SRC
** slim-mode
   #+BEGIN_SRC emacs-lisp
     (use-package slim-mode
       :mode (("\\.slim$" . slim-mode)))
   #+END_SRC
** ssh-config-mode
   #+BEGIN_SRC emacs-lisp
     (use-package ssh-config-mode
       :mode (("/path-to-your-ssh/config\\$" . ssh-config-mode)))
   #+END_SRC
** terraform-mode
   #+BEGIN_SRC emacs-lisp
     (use-package terraform-mode
       :mode (("\\.tf$" . terraform-mode)))
   #+END_SRC
** toml-mode
   #+BEGIN_SRC emacs-lisp
     (use-package toml-mode
       :mode (("\\.toml$" . toml-mode)))
   #+END_SRC
** typescript-mode
   #+BEGIN_SRC emacs-lisp
     (use-package typescript-mode
       :mode (("\\.ts$" . typescript-mode)))
   #+END_SRC
** TODO vue-mode
   #+BEGIN_SRC emacs-lisp
     (use-package vue-mode
       :mode (("\\.vue$" . vue-mode))
       :config
       ;; (setq mmm-js-mode-enter-hook (lambda () (setq syntax-ppss-table nil)))
       ;; (setq mmm-typescript-mode-enter-hook (lambda () (setq syntax-ppss-table nil)))
       ;; (setq indent-tabs-mode nil js-indent-level 2)
       )
   #+END_SRC
** TODO web-mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :after (tide)
       :mode (("\\.html?\\'" . web-mode)
              ("\\.erb\\'" . web-mode)
              ("\\.gsp\\'" . web-mode)
              ("\\.tsx\\'" . web-mode))
       :init
       ;; (add-hook 'web-mode-hook
       ;;           (lambda ()
       ;;             (when (string-equal "tsx" (file-name-extension buffer-file-name))
       ;;               (my/setup-tide-mode))))
       :config
       (setq web-mode-auto-close-style t)
       ;; (setq web-mode-tag-auto-close-style t)
       )
   #+END_SRC
** yaml-mode
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :mode (("\\.ya?ml$" . yaml-mode)))
   #+END_SRC
* Lisp
** Basic
*** paredit
    #+BEGIN_SRC emacs-lisp
      (use-package paredit
        :init
        (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
        (add-hook 'lisp-mode-hook 'enable-paredit-mode)
        (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
        (add-hook 'scheme-mode-hook 'enable-paredit-mode)
        (general-define-key
         :keymaps 'paredit-mode-map
         "C-c f" 'paredit-forward-slurp-sexp
         "C-c b" 'paredit-forward-barf-sexp)
        :config
        (autoload 'enable-paredit-mode "paredit" t))
    #+END_SRC
*** rainbow-delimiters
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
        :init
        (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
    #+END_SRC
** CommonLisp
*** TODO HyperSpec
    #+BEGIN_SRC emacs-lisp
      ;; (setq common-lisp-hyperspec-root "~/quicklisp/HyperSpec/")

      ;; (defun common-lisp-hyperspec (symbol-name)
      ;;     (interactive (list (common-lisp-hyperspec-read-symbol-name)))
      ;;     (let ((name (common-lisp-hyperspec--strip-cl-package
      ;;                     (downcase symbol-name))))
      ;;         (cl-maplist (lambda (entry)
      ;;                         (eww-open-file (concat common-lisp-hyperspec-root "Body/"
      ;;                                            (car entry)))
      ;;                         (when (cdr entry)
      ;;                             (sleep-for 1.5)))
      ;;             (or (common-lisp-hyperspec--find name)
      ;;                 (error "The symbol `%s' is not defined in Common Lisp"
      ;;                     symbol-name)))))

      ;; (defun common-lisp-hyperspec-lookup-reader-macro (macro)
      ;;   (interactive
      ;;    (list
      ;;     (let ((completion-ignore-case t))
      ;;       (completing-read "Look up reader-macro: "
      ;;                        common-lisp-hyperspec--reader-macros nil t
      ;;                        (common-lisp-hyperspec-reader-macro-at-point)))))
      ;;   (eww-open-file
      ;;    (concat common-lisp-hyperspec-root "Body/"
      ;;            (gethash macro common-lisp-hyperspec--reader-macros))))

      ;; (defun common-lisp-hyperspec-format (character-name)
      ;;   (interactive (list (common-lisp-hyperspec--read-format-character)))
      ;;   (cl-maplist (lambda (entry)
      ;;                 (eww-open-file (common-lisp-hyperspec-section (car entry))))
      ;;               (or (gethash character-name
      ;;                            common-lisp-hyperspec--format-characters)
      ;;                   (error "The symbol `%s' is not defined in Common Lisp"
      ;;                          character-name))))

      ;; (defadvice common-lisp-hyperspec (around common-lisp-hyperspec-around activate)
      ;;   (let ((buf (current-buffer)))
      ;;     ad-do-it
      ;;     (switch-to-buffer buf)
      ;;     (pop-to-buffer "*eww*")))

      ;; (defadvice common-lisp-hyperspec-lookup-reader-macro (around common-lisp-hyperspec-lookup-reader-macro-around activate)
      ;;   (let ((buf (current-buffer)))
      ;;     ad-do-it
      ;;     (switch-to-buffer buf)
      ;;     (pop-to-buffer "*eww*")))

      ;; (defadvice common-lisp-hyperspec-format (around common-lisp-hyperspec-format activate)
      ;;   (let ((buf (current-buffer)))
      ;;     ad-do-it
      ;;     (switch-to-buffer buf)
      ;;     (pop-to-buffer "*eww*")))
      ;; (dolist (hook '(emacs-lisp-mode-hook
      ;;                 lisp-interaction-mode-hook
      ;;                 ielm-mode-hook))
      ;;   (add-hook hook 'elisp-slime-nav-mode))

      ;; (define-key lisp-mode-map (kbd "C-c h") 'hyperspec-lookup)

    #+END_SRC
*** slime
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'slime
        (load (expand-file-name "~/quicklisp/slime-helper.el"))
        (setq inferior-lisp-program "sbcl")
        (add-hook 'slime-mode-hook 'set-up-slime-ac)
        (add-hook 'slime-repl-mode-hook 'set-up-slime-ac))
    #+END_SRC
*** ac-slime
    #+BEGIN_SRC emacs-lisp
      (use-package ac-slime
        :defer t)
    #+END_SRC
*** takeokunn/slime-history
    #+BEGIN_SRC emacs-lisp
      (defun takeokunn/slime-history ()
        (interactive)
        (insert
         (completing-read
          "choice history: "
          (-distinct (read (f-read-text "~/.slime-history.eld"))))))

      (general-define-key
       :keymaps 'slime-repl-mode-map
       "C-c C-r" 'takeokunn/slime-history)
    #+END_SRC
** EmacsLisp
*** elisp-slime-nav
    #+BEGIN_SRC emacs-lisp
      (use-package elisp-slime-nav)
    #+END_SRC
*** nameless
    #+BEGIN_SRC emacs-lisp
      (use-package nameless
        :init
        (add-hook 'emacs-lisp-mode-hook 'nameless-mode))
    #+END_SRC
*** ielm
*** takeokunn/ielm-history
    #+BEGIN_SRC emacs-lisp
      ;; (defun takeokunn/ielm-history ()
      ;;   (interactive)
      ;;   (insert
      ;;    (completing-read
      ;;     "choice history: "
      ;;     (progn
      ;;       (let ((history nil))
      ;;         (dotimes (index (ring-length comint-input-ring))
      ;;           (push (ring-ref comint-input-ring index) history))
      ;;         history)))))

      ;; (defun takeokunn/ielm-write-history-on-exit (process event)
      ;;   (comint-write-input-ring)
      ;;   (let ((buf (process-buffer process)))
      ;;     (when (buffer-live-p buf)
      ;;       (with-current-buffer buf
      ;;         (insert (format "\nProcess %s %s" process event))))))

      ;; (defun takeokunn/ielm-turn-on-history ()
      ;;   (let ((process (get-buffer-process (current-buffer))))
      ;;     (when process
      ;;       (setq comint-input-ring-file-name (concat (file-remote-p default-directory) "~/.ielm-history"))
      ;;       (setq comint-input-ring-size 100000)
      ;;       (setq comint-input-ignoredups t)
      ;;       (comint-read-input-ring)
      ;;       (add-hook 'kill-buffer-hook #'comint-write-input-ring)
      ;;       (define-key ielm-map (kbd "C-c C-r") 'takeokunn/ielm-history)
      ;;       (general-define-key
      ;;        :keymaps 'ielm-map
      ;;        "C-c C-r" 'takeokunn/ielm-history)

      ;;       (set-process-sentinel process #'takeokunn/ielm-write-history-on-exit))))

      ;; (add-hook 'ielm-mode-hook 'takeokunn/ielm-turn-on-history)
    #+END_SRC
** Clojure
*** cider
    #+BEGIN_SRC emacs-lisp
      (use-package cider
        :defer t)
    #+END_SRC
* Awesome Package
** Theme
*** all-the-icons
    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons
        :init
        (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
    #+END_SRC
*** all-the-icons-ivy
    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons-ivy
        :after (all-the-icons)
        :config
        (all-the-icons-ivy-setup))
    #+END_SRC
*** doom-modeline
    #+BEGIN_SRC emacs-lisp
      (use-package doom-modeline
        :custom
        (doom-modeline-buffer-file-name-style 'truncate-with-project)
        (doom-modeline-icon t)
        (doom-modeline-major-mode-icon nil)
        (doom-modeline-minor-modes nil)
        :hook
        (after-init . doom-modeline-mode)
        :config
        (line-number-mode 0)
        (column-number-mode 0))
    #+END_SRC
*** doom-theme
    #+BEGIN_SRC emacs-lisp
      (use-package doom-themes
        :custom
        (doom-themes-enable-italic t)
        (doom-themes-enable-bold t)
        :custom-face
        (doom-modeline-bar ((t (:background "#6272a4"))))
        :config
        (load-theme 'tango-dark t)
        (doom-themes-neotree-config)
        (doom-themes-org-config))
   #+END_SRC
*** hl-line
    #+BEGIN_SRC emacs-lisp
      (use-package hl-line
        :init
        (global-hl-line-mode)
        :config
        (set-face-background 'hl-line "#444642")
        (set-face-attribute 'hl-line nil :inherit nil))
    #+END_SRC
*** hl-todo
    #+BEGIN_SRC emacs-lisp
      (use-package hl-todo
        :init
        (global-hl-todo-mode 1)
        :config
        (setq hl-todo-keyword-faces
              '(("HOLD" . "#d0bf8f")
                ("WAIT" . "#d0bf8f")
                ("TODO" . "#cc9393")
                ("NEXT" . "#dca3a3")
                ("THEM" . "#dc8cc3")
                ("REMIND" . "#dc8cc3")
                ("PROG" . "#7cb8bb")
                ("OKAY" . "#7cb8bb")
                ("DONT" . "#5f7f5f")
                ("FAIL" . "#8c5353")
                ("SOMEDAY" . "#8c5353")
                ("DONE" . "#afd8af")
                ("FIXME" . "#cc9393")
                ("???"   . "#cc9393"))))
    #+END_SRC
*** neotree
    #+BEGIN_SRC emacs-lisp
      (use-package neotree
        :after (all-the-icons)
        :config
        (setq-default neo-show-hidden-files t
                      neo-window-fixed-size nil)
        (defun neo-buffer--insert-fold-symbol (name &optional file-name)
          (or (and (equal name 'open)  (insert (all-the-icons-icon-for-dir file-name "down")))
              (and (equal name 'close) (insert (all-the-icons-icon-for-dir file-name "right")))
              (and (equal name 'leaf)  (insert (format "\t\t\t%s\t" (all-the-icons-icon-for-file file-name))))))
        (general-def "C-q"
          (defun takeokunn/neotree-toggle ()
            (interactive)
            (let ((default-directory (locate-dominating-file default-directory ".git")))
              (neotree-toggle))))
        :custom
        (neo-theme 'nerd2))
    #+END_SRC
*** nyan-mode
    #+BEGIN_SRC emacs-lisp
      (use-package nyan-mode
        :after (doom-modeline)
        :custom
        (nyan-cat-face-number 4)
        (nyan-animate-nyancat t)
        :hook
        (doom-modeline-mode . nyan-mode))
   #+END_SRC
** Refactor
*** emr
    #+BEGIN_SRC emacs-lisp
      (use-package emr
        :init
        (general-define-key
         "M-RET" 'emr-show-refactor-menu))
    #+END_SRC
** Completion
*** yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :defer t
        :diminish yas-minor-mode)

      (use-package yasnippet-snippets
        :after (yasnippet)
        :defer t
        :config
        (yas-global-mode 1))
    #+END_SRC
*** company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :init
       (global-company-mode)
       (general-define-key
        :keymaps 'company-active-map
        "C-n" 'company-select-next
        "C-p" 'company-select-previous))
   #+END_SRC
*** company-glsl
    #+BEGIN_SRC emacs-lisp
      (use-package company-glsl
        :after (company)
        :config
        (add-to-list 'company-backends 'company-glsl))
    #+END_SRC
*** company-lsp
    #+BEGIN_SRC emacs-lisp
      (use-package company-lsp
        :defer t
        :after (company)
        :config
        (push 'company-lsp company-backends))
    #+END_SRC
** LSP
*** lsp-mode
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-mode
        :defer t)
    #+END_SRC
*** lsp-ui
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-ui
        :after (lsp)
        :commands (lsp-ui-peek-find-definitions lsp-ui-peek-find-implementation)
        :init
        (add-hook 'lsp-mode-hook 'lsp-ui-mode)
        :bind (("M-." . 'lsp-ui-peek-find-definitions)
               ("M-?" . 'lsp-ui-peek-find-implementation))
        :config
        (setq-default lsp-ui-doc-enable t
                      lsp-ui-doc-max-height 15
                      lsp-ui-sideline-enable nil
                      lsp-ui-imenu-enable nil
                      lsp-ui-sideline-enable nil))
    #+END_SRC
*** dap-mode
    #+BEGIN_SRC emacs-lisp
      (use-package dap-mode
        :defer t
        :init
        (general-define-key
         :keymaps 'dap-mode-map
         "C-c d" 'dap-breakpoint-toggle)
        :config
        (dap-mode 1)
        (dap-ui-mode 1))
   #+END_SRC
** Git
*** magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :defer t)
    #+END_SRC
*** git-gutter
    #+BEGIN_SRC emacs-lisp
      (use-package git-gutter-fringe
        :config
        (global-git-gutter-mode +1))
    #+END_SRC
** Search
*** counsel
    #+BEGIN_SRC emacs-lisp
      (use-package counsel
        :init
        (general-define-key
         "C-x m" 'counsel-compile
         "C-c k" 'takeokunn/counsel-ag)
        :preface
        (defun takeokunn/counsel-ag ()
          (interactive)
          (let ((symbol (thing-at-point 'symbol 'no-properties))
                (default-directory (locate-dominating-file default-directory ".git")))
            (counsel-ag symbol)))
        :config
        (setq ivy-use-virtual-buffers t)
        (setq counsel-ag-base-command "ag --nocolor --nogroup -u %s")
        (ivy-mode 1)
        (counsel-mode 1))
    #+END_SRC
*** ivy-ghq
    #+BEGIN_SRC emacs-lisp
      (use-package ivy-ghq
        :after (counsel)
        :commands (ivy-ghq-open)
        :init
        (defun takeokunn/ivy-ghq-open-and-fzf ()
          (interactive)
          (ivy-ghq-open)
          (counsel-fzf))
        (general-define-key
         "M-o" 'takeokunn/ivy-ghq-open-and-fzf)
        :custom
        (ivy-ghq-short-list t))
    #+END_SRC
*** ivy-rich
    #+BEGIN_SRC emacs-lisp
      (use-package ivy-rich
        :after (counsel)
        :config
        (ivy-rich-mode 1))
    #+END_SRC
*** swoop
    #+BEGIN_SRC emacs-lisp
      (use-package swoop
        :preface
        (defun takeokunn/swoop-from-isearch ()
          (interactive)
          (let* ((symbol (thing-at-point 'symbol 'no-properties)))
            (swoop symbol)))
        :init
        (general-define-key
         "C-o" 'takeokunn/swoop-from-isearch)
        :config
        (setq swoop-minibuffer-input-dilay 0.4))
    #+END_SRC
** Shell
*** aweshell
    #+BEGIN_SRC emacs-lisp
      (use-package aweshell
        :defer t)
    #+END_SRC
*** exec-path-from-shell
    #+BEGIN_SRC emacs-lisp
      (use-package exec-path-from-shell
        :init
        (add-hook 'after-init-hook 'my-exec-path-from-shell-initialize)
        :preface
        (defun my-exec-path-from-shell-initialize ()
          (when (memq window-system '(mac ns x))
            (exec-path-from-shell-copy-envs '("PATH" "GEM_HOME" "GOPATH"))
            (exec-path-from-shell-initialize))))
    #+END_SRC
** Rust
*** racer
    #+BEGIN_SRC emacs-lisp
      (use-package racer
        :after (rust-mode)
        :init
        (add-hook 'rust-mode-hook #'racer-mode)
        (add-hook 'racer-mode-hook #'eldoc-mode))
    #+END_SRC
*** rastic
    #+BEGIN_SRC emacs-lisp
      (use-package rustic
        :after (rust-mode)
        :init
        (add-hook 'rust-mode-hook #'rustic-mode)
        (add-hook 'rustic-mode-hook #'eldoc-mode))
    #+END_SRC
** C#
*** omnisharp
    #+BEGIN_SRC emacs-lisp
      (use-package omnisharp
        :after (flycheck company)
        :init
        (add-hook 'csharp-mode-hook 'omnisharp-mode)
        (add-hook 'csharp-mode-hook #'flycheck-mode)
        :config
        (add-to-list 'company-backends 'company-omnisharp))
    #+END_SRC
** JavaScript
*** js2-refactor
    #+BEGIN_SRC emacs-lisp
      (use-package js2-refactor
        :after (js2-mode typescript-mode)
        :init
        (add-hook 'js2-mode-hook #'js2-refactor-mode)
        (add-hook 'typescript-mode-hook #'js2-refactor-mode)
        :config
        (js2r-add-keybindings-with-prefix "C-c C-m"))
    #+END_SRC
*** tide
    #+BEGIN_SRC emacs-lisp
      (use-package tide
        :after (typescript-mode)
        :preface
        (defun takeokunn/setup-tide-mode ()
          (interactive)
          (tide-setup)
          (tide-hl-identifier-mode +1))
        :init
        (add-hook 'typescript-mode-hook #'takeokunn/setup-tide-mode))
    #+END_SRC
** Haskell
*** hindent
    #+BEGIN_SRC emacs-lisp
      (use-package hindent
        :after (haskell-mode)
        :init
        (add-hook 'haskell-mode-hook #'hindent-mode)
        :config
        ;; (setq hindent-style "johan-tibell")
        )
    #+END_SRC
** Ruby
*** robe
    #+begin_src emacs-lisp
      (use-package robe
        :after (company ruby-mode)
        :init
        (add-hook 'ruby-mode-hook 'robe-mode)
        :config
        (push 'company-robe company-backends))
    #+end_src
*** rubocop
    #+begin_src emacs-lisp
      (use-package rubocop
        :after (ruby-mode)
        :init
        (add-hook 'ruby-mode-hook 'rubocop-mode))
    #+end_src
*** ruby-refactor
    #+BEGIN_SRC emacs-lisp
      (use-package ruby-refactor
        :defer t
        :init
        (add-hook 'ruby-mode-hook 'ruby-refactor-mode-launch))
    #+END_SRC
** SQL
*** sql-indent
    #+BEGIN_SRC emacs-lisp
      (use-package sql-indent
        :after (sql-mode)
        :init
        (add-hook 'sql-mode-hook 'sqlind-minor-mode))
    #+END_SRC
** File
*** recentf
    #+BEGIN_SRC emacs-lisp
      (use-package recentf
        :config
        (setq-default recentf-max-saved-items 10000
                      recentf-auto-cleanup 'never
                      recentf-save-file "~/.emacs.d/.recentf"
                      recentf-exclude '(".recentf"))
        (recentf-mode 1))
    #+END_SRC
*** open-junk-file
    #+BEGIN_SRC emacs-lisp
      (use-package open-junk-file
        :init
        (general-define-key
         "C-x j" 'open-junk-file)
        :config
        (setq open-junk-file-format "~/.emacs.d/.junk/%Y-%m%d-%H%M%S."))
    #+END_SRC
** Syntax
*** flycheck
    #+begin_src emacs-lisp
      (use-package flycheck
        :defer t
        :after (ruby-mode)
        :init
        (add-hook 'ruby-mode-hook 'flycheck-mode))
    #+end_src
** Cursor
*** smartrep/multiple-cursors
    #+BEGIN_SRC emacs-lisp
      (use-package smartrep)

      (use-package multiple-cursors
        :after (smartrep)
        :config
        (declare-function smartrep-define-key "smartrep")
        (global-unset-key (kbd "C-t"))
        (smartrep-define-key global-map "C-t"
          '(("C-t" . 'mc/mark-next-like-this)
            ("n"   . 'mc/mark-next-like-this)
            ("p"   . 'mc/mark-previous-like-this)
            ("m"   . 'mc/mark-more-like-this-extended)
            ("u"   . 'mc/unmark-next-like-this)
            ("U"   . 'mc/unmark-previous-like-this)
            ("s"   . 'mc/skip-to-next-like-this)
            ("S"   . 'mc/skip-to-previous-like-this)
            ("*"   . 'mc/mark-all-like-this)
            ("d"   . 'mc/mark-all-like-this-dwim)
            ("i"   . 'mc/insert-numbers)
            ("o"   . 'mc/sort-regions)
            ("O"   . 'mc/reverse-regions))))
    #+END_SRC
*** smooth-scroll
    #+BEGIN_SRC emacs-lisp
      (use-package smooth-scroll
        :commands (smooth-scroll-mode)
        :init
        (smooth-scroll-mode 1)
        :config
        (setq smooth-scroll/hscroll-step-size 4))
    #+END_SRC
** Other
*** ace-window
    #+BEGIN_SRC emacs-lisp
      (use-package ace-window
        :config
        (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
    #+END_SRC
*** dashboard
    #+BEGIN_SRC emacs-lisp
      (use-package dashboard
        :config
        (dashboard-setup-startup-hook))
    #+END_SRC
*** editorconfig
    #+BEGIN_SRC emacs-lisp
      (use-package editorconfig
        :config
        (editorconfig-mode 1))
    #+END_SRC
*** esup
    #+BEGIN_SRC emacs-lisp
      (use-package esup)
    #+END_SRC
*** font-lock-studio
    #+BEGIN_SRC emacs-lisp
      (use-package font-lock-studio)
    #+END_SRC
*** google-this
    #+BEGIN_SRC emacs-lisp
      (use-package google-this
        :init
        (general-define-key
         "M-g" 'google-this))
    #+END_SRC
*** goto-addr
    #+BEGIN_SRC emacs-lisp
      (use-package goto-addr
        :hook ((prog-mode . goto-address-prog-mode)
               (text-mode . goto-address-mode)))
    #+END_SRC
*** helpful
    #+BEGIN_SRC emacs-lisp
      (use-package helpful
        :init
        (general-define-key
         "C-? f" 'helpful-callable
         "C-? v" 'helpful-variable
         "C-? k" 'helpful-key
         "C-? C-d" 'helpful-at-point
         "C-? F" 'helpful-function
         "C-? C" 'helpful-command)
        :config
        (setq counsel-describe-function-function #'helpful-callable
              counsel-describe-variable-function #'helpful-variable))
    #+END_SRC
*** smartparens
    #+BEGIN_SRC emacs-lisp
      (use-package smartparens)
    #+END_SRC
*** smex
    #+BEGIN_SRC emacs-lisp
      (use-package smex)
    #+END_SRC
*** whitespace
    #+BEGIN_SRC emacs-lisp
      (use-package whitespace
        :config
        (setq whitespace-style '(face tabs tab-mark spaces space-mark)
              whitespace-display-mappings '((space-mark ?\u3000 [?\u25a1])
                                            (tab-mark ?\t [?\xBB ?\t] [?\\ ?\t]))
              whitespace-space-regexp "\\(\u3000+\\)")
        (set-face-foreground 'whitespace-tab "#adff2f")
        (set-face-background 'whitespace-tab 'nil)
        (set-face-underline  'whitespace-tab t)
        (set-face-foreground 'whitespace-space "#7cfc00")
        (set-face-background 'whitespace-space 'nil)
        (global-whitespace-mode 1))
    #+END_SRC
* Org Mode
** Settinngs
   #+BEGIN_SRC emacs-lisp
     (require 'org-tempo)

     (setq-default org-use-speed-commands t
                   org-agenda-todo-ignore-with-date t
                   org-directory "~/org"
                   org-agenda-files '("~/org/todo.org")
                   org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)"))
                   org-capture-templates '(("t" "Todo" entry (file+datetree "~/org/todo.org")
                                            "* %?")
                                           ("b" "Blog" entry (file "~/org/blog.org")
                                            "* %?")
                                           ("m" "Memo" entry (file "~/org/memo.org")
                                            "* %?")))
   #+END_SRC
** Keybind
   #+BEGIN_SRC emacs-lisp
     (general-define-key
      "C-c c" 'org-capture
      "C-c a" 'org-agenda)

     (general-def org-mode-map
       "C-m" nil)
   #+END_SRC
* MyFunc
** takeokunn/beginning-of-intendation
   #+BEGIN_SRC emacs-lisp
     (defun takeokunn/beginning-of-intendation ()
       "move to beginning of line, or indentation"
       (interactive)
       (back-to-indentation))
   #+END_SRC
** takeokunn/before-set-auto-mode
   #+BEGIN_SRC emacs-lisp
     (defun takeokunn/before-set-auto-mode ()
       (when (or (and buffer-file-name
                      (> (file-attribute-size (file-attributes buffer-file-name)) 100000))
                 (> (line-number-at-pos (point-max)) 10000))
         (prog1 t
           (prog-mode))))

     (advice-add 'set-auto-mode :before-until 'takeokunn/before-set-auto-mode)
   #+END_SRC
** takeokunn/irb-history
   #+BEGIN_SRC emacs-lisp
     (defun takeokunn/irb-history ()
       (interactive)
       (insert
        (completing-read
         "choose history: "
         (-map #'list (-distinct (s-lines (f-read-text "~/.irb_history")))))))

     (general-def inf-ruby-mode-map
       "C-c C-r" 'takeokunn/irb-history)
   #+END_SRC
** takeokunn/reload-major-mode
   #+BEGIN_SRC emacs-lisp
     (defun takeokunn/reload-major-mode ()
       "Reload current major mode."
       (interactive)
       (let ((current-mode major-mode))
         (fundamental-mode)
         (funcall current-mode)
         current-mode))
   #+END_SRC
** TODO takeokunn/exec-npm-script
   #+BEGIN_SRC emacs-lisp
     ;; (defun my/exec-npm-script ()
     ;;   (interactive)
     ;;   (let* ((npm-root (and default-directory (locate-dominating-file default-directory "package.json")))
     ;;          (default-directory (or npm-root default-directory))
     ;;          choice scripts command-names)
     ;;     (unless npm-root
     ;;       (user-error "package.json not found..."))
     ;;     (setq scripts (cdr-safe (assq 'scripts (json-read-file (file-relative-name "package.json" default-directory)))))
     ;;     (setq command-names (mapcar #'(lambda (s) (symbol-name (car s))) scripts))
     ;;     (setq choice (intern (completing-read "choice command: " command-names)))
     ;;     (setq command (cdr-safe (assq choice scripts)))
     ;;     (when command
     ;;       (compile command))))
   #+END_SRC
