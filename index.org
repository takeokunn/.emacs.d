#+TITLE: Configurations for GNU Emacs
#+AUTHOR: takeokunn
#+EMAIL: bararararatty@gmail.com
#+STARTUP: content
#+STARTUP: nohideblocks
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>
* はじめに
** 基本情報
- repo: [[http://github.com/takeokunn/.emacs.d][takeokunn/.emacs.d]]
- twitter: [[https://twitter.com/takeokunn][たけてぃ@takeokunn]]
- blog: [[https://takeokunn.org][https://takeokunn.org]]
** See also
- [[./early-init][early-init.org]]
- [[./yasnippets][yasnippets.org]]
- [[./elfeed][elfeed.org]]
* Initialize
** Header
#+begin_src emacs-lisp
  ;; init.el --- My init.el -*- lexical-binding: t -*-
  ;; Configurations for Emacs
  ;;                                         Takeo Obara  <bararararatty@gmail.com>
#+end_src
** env
#+begin_src emacs-lisp
  (defconst my/loading-profile-p nil
    "If non-nil, use built-in profiler.el.")

  (defconst my/enable-profile nil
    "If true, enable profile")

  (defconst my/enable-c-h-backspace nil
    "If true, enable C-h backspace")
#+end_src
* Macro Utilities
** when-darwin
#+begin_src emacs-lisp
  (defmacro when-darwin (&rest body)
    (when (string= system-type "darwin")
      `(progn ,@body)))
#+end_src
** when-darwin-not-window-system
#+begin_src emacs-lisp
  (defmacro when-darwin-not-window-system (&rest body)
    (when (and (string= system-type "darwin")
               window-system)
      `(progn ,@body)))
#+end_src
** when-guix
#+begin_src emacs-lisp
  (defmacro when-guix (&rest body)
    (when (string= system-type "guix")
      `(progn ,@body)))
#+end_src
* Boot
** user
#+begin_src emacs-lisp
  (setq user-full-name "takeokunn")
  (setq user-mail-address "bararararatty@gmail.com")
#+end_src
** profile
#+begin_src emacs-lisp
  (when my/enable-profile
    (require 'profiler)
    (profiler-start 'cpu))
#+end_src
** Magic File Name を一時的に無効にする
#+begin_src emacs-lisp
  (defconst my/saved-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src
** 起動時間計測
#+begin_src emacs-lisp
  (defconst my/before-load-init-time (current-time))

  ;;;###autoload
  (defun my/load-init-time ()
    "Loading time of user init files including time for `after-init-hook'."
    (let ((time1 (float-time
                  (time-subtract after-init-time my/before-load-init-time)))
          (time2 (float-time
                  (time-subtract (current-time) my/before-load-init-time))))
      (message (concat "Loading init files: %.0f [msec], "
                       "of which %.f [msec] for `after-init-hook'.")
               (* 1000 time1) (* 1000 (- time2 time1)))))
  (add-hook 'after-init-hook #'my/load-init-time t)

  (defvar my/tick-previous-time my/before-load-init-time)

  ;;;###autoload
  (defun my/tick-init-time (msg)
    "Tick boot sequence at loading MSG."
    (when my/loading-profile-p
      (let ((ctime (current-time)))
        (message "---- %5.2f[ms] %s"
                 (* 1000 (float-time
                          (time-subtract ctime my/tick-previous-time)))
                 msg)
        (setq my/tick-previous-time ctime))))

  (defun my/emacs-init-time ()
    "Emacs booting time in msec."
    (interactive)
    (message "Emacs booting time: %.0f [msec] = `emacs-init-time'."
             (* 1000
                (float-time (time-subtract
                             after-init-time
                             before-init-time)))))

  (add-hook 'after-init-hook #'my/emacs-init-time)
#+end_src
** async load
#+begin_src emacs-lisp
  (defvar my/delayed-priority-high-configurations '())
  (defvar my/delayed-priority-high-configuration-timer nil)

  (defvar my/delayed-priority-low-configurations '())
  (defvar my/delayed-priority-low-configuration-timer nil)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq my/delayed-priority-high-configuration-timer
                    (run-with-timer
                     0.1 0.001
                     (lambda ()
                       (if my/delayed-priority-high-configurations
                           (let ((inhibit-message t))
                             (eval (pop my/delayed-priority-high-configurations)))
                         (progn
                           (cancel-timer my/delayed-priority-high-configuration-timer))))))
              (setq my/delayed-priority-low-configuration-timer
                    (run-with-timer
                     0.3 0.001
                     (lambda ()
                       (if my/delayed-priority-low-configurations
                           (let ((inhibit-message t))
                             (eval (pop my/delayed-priority-low-configurations)))
                         (progn
                           (cancel-timer my/delayed-priority-low-configuration-timer))))))))

  (defmacro with-delayed-execution-priority-high (&rest body)
    (declare (indent 0))
    `(setq my/delayed-priority-high-configurations
           (append my/delayed-priority-high-configurations ',body)))

  (defmacro with-delayed-execution (&rest body)
    (declare (indent 0))
    `(setq my/delayed-priority-low-configurations
           (append my/delayed-priority-low-configurations ',body)))
#+end_src
** autoload-if-found
#+begin_src emacs-lisp
  ;;;###autoload
  (defun autoload-if-found (functions file &optional docstring interactive type)
    "set autoload iff. FILE has found."
    (when (locate-library file)
      (dolist (f functions)
        (autoload f file docstring interactive type))
      t))
#+end_src
** common lispを使う
#+begin_src emacs-lisp
  (eval-and-compile
    (setq byte-compile-warnings '(cl-functions))
    (require 'cl-lib nil t))

  (with-delayed-execution-priority-high
    (message "Install cl-lib...")
    (require 'cl-lib))
#+end_src
** el-clone
#+begin_src emacs-lisp
  (eval-when-compile
    (unless (file-directory-p (locate-user-emacs-file "elpa/el-clone"))
      (package-vc-install "https://github.com/takeokunn/el-clone.git")))

  (eval-and-compile
    (add-to-list 'load-path (locate-user-emacs-file "elpa/el-clone"))
    (require 'el-clone))
#+end_src
* Basic
** 末尾のスペースを可視化する
#+BEGIN_SRC emacs-lisp
  (with-delayed-execution
    (message "Install disable-show-trailing-whitespace...")

    (defun my/disable-show-trailing-whitespace ()
      (setq show-trailing-whitespace nil))

    (with-eval-after-load 'comint
      (add-hook 'comint-mode-hook #'my/disable-show-trailing-whitespace))

    (with-eval-after-load 'esh-mode
      (add-hook 'eshell-mode-hook #'my/disable-show-trailing-whitespace))

    (with-eval-after-load 'eww
      (add-hook 'eww-mode-hook #'my/disable-show-trailing-whitespace))

    (with-eval-after-load 'minibuffer
      (add-hook 'minibuffer-inactive-mode-hook #'my/disable-show-trailing-whitespace))

    (with-eval-after-load 'dashboard
      (add-hook 'dashboard-mode-hook #'my/disable-show-trailing-whitespace))

    (with-eval-after-load 'simple
      (add-hook 'fundamental-mode-hook #'my/disable-show-trailing-whitespace)))
#+END_SRC
** 行番号を表示する
#+BEGIN_SRC emacs-lisp
  (with-delayed-execution
    (message "Install display-line-numbers...")
    (autoload-if-found '(global-display-line-numbers-mode) "display-line-numbers" nil t)
    (global-display-line-numbers-mode)

    (with-eval-after-load 'display-line-numbers
      (setq display-line-numbers-grow-only t)))
#+END_SRC
** C-kで行削除
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'simple
    (setq kill-whole-line t))
#+END_SRC
** カッコの中をハイライトする
#+BEGIN_SRC emacs-lisp
  (with-delayed-execution
    (message "Install show-paren-mode...")
    (show-paren-mode t)

    (with-eval-after-load 'paren
      (setq show-paren-style 'mixed)))
#+END_SRC
** カッコが自動的に作られるようにする
#+BEGIN_SRC emacs-lisp
  (with-delayed-execution
    (message "Install electric-pair-mode...")
    (electric-pair-mode 1))
#+END_SRC
** coding system
#+begin_src emacs-lisp
  ;; language and locale
  (set-language-environment "Japanese")
  (setq system-time-locale "C")

  ;; coding system
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
  (set-selection-coding-system 'utf-8-unix)

  ;; prefer-coding-system take effect equally to follows
  (set-buffer-file-coding-system 'utf-8-unix)
  (set-file-name-coding-system 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
  (setq locale-coding-system 'utf-8-unix)
#+end_src
** global-auto-revert-mode
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install global-auto-revert-mode...")
    (global-auto-revert-mode t))
#+end_src
** yes/no to y/n
#+begin_src emacs-lisp
  (with-delayed-execution
    (fset 'yes-or-no-p 'y-or-n-p))
#+end_src
** global keybind
#+BEGIN_SRC emacs-lisp
  (when my/enable-c-h-backspace
    (keyboard-translate ?\C-h ?\C-?)
    (global-set-key (kbd "C-h") #'c-hungry-delete-backwards))

  (global-set-key (kbd "C-?") #'help-command)

  (global-set-key (kbd "M-¥") #'(lambda () (interactive) (insert "\\")))
  (global-set-key (kbd "C-z") #'undo)
  (global-set-key (kbd "C-a") #'back-to-indentation)
  (global-set-key (kbd "C-c i") #'find-function)
  (global-set-key (kbd "C-x C-o") #'other-window)
  (global-set-key (kbd "C-x :") #'goto-line)
  (global-set-key (kbd "M-h") #'backward-kill-word)

  (global-set-key (kbd "C-x l") 'next-buffer)
  (global-set-key (kbd "C-x h") 'previous-buffer)

  (global-set-key (kbd "C-x C-k") nil)
  (global-set-key (kbd "C-x C-n") nil)

  (when window-system
    (global-set-key (kbd "C-x C-c") nil))

  ;; (global-set-key [return] #'(lambda ()
  ;;                              (interactive)
  ;;                              (message "Don't use RETURN!!! Press C-m!! C-m!!!")))
  ;; (global-set-key [tab] #'(lambda ()
  ;;                              (interactive)
  ;;                              (message "Don't use TAB!!! Press C-i!! C-i!!!")))
#+END_SRC
** minibuffer
#+begin_src emacs-lisp
  (with-eval-after-load 'minibuffer
    (define-key minibuffer-mode-map (kbd "C-h") #'delete-backward-char)
    (define-key minibuffer-mode-map (kbd "M-h") #'backward-kill-word)
    (define-key minibuffer-mode-map (kbd "M-RET") #'exit-minibuffer))
#+end_src
** savehistを有効にする
#+begin_src emacs-lisp
  (with-delayed-execution-priority-high
    (message "Install savehist...")
    (savehist-mode 1))
#+end_src
** [mac] clipboardに入るようにする
#+begin_src emacs-lisp
  (with-delayed-execution
    (defun my/copy-from-osx ()
      (shell-command-to-string "pbpaste"))

    (defun my/paste-to-osx (text)
      (let ((process-connection-type nil))
        (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
          (process-send-string proc text)
          (process-send-eof proc))))

    (when-darwin-not-window-system
     (setq interprogram-cut-function #'my/paste-to-osx)
     (setq interprogram-paste-function #'my/copy-from-osx)))
#+end_src
** pluginをnative compする
#+begin_src emacs-lisp
  (with-eval-after-load 'comp
    (setq native-comp-async-jobs-number 8)
    (setq native-comp-speed 2)
    (setq native-comp-always-compile t)
    (defun my/native-comp-packages ()
      (interactive)
      (native-compile-async "~/.emacs.d/init.el")
      (native-compile-async "~/.emacs.d/early-init.el")
      (native-compile-async "~/.emacs.d/el-clone" 'recursively)
      (native-compile-async "~/.emacs.d/elpa" 'recursively)))
#+end_src
** native compを無効にする
#+begin_src emacs-lisp
  (with-eval-after-load 'comp
    (setq package-native-compile nil))
#+end_src
** native compのwarningを抑える
#+begin_src emacs-lisp
  (custom-set-variables '(warning-suppress-types '((comp))))
#+end_src
** 同一bufferの名前を変える
#+begin_src emacs-lisp
  (with-eval-after-load 'uniquify
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets))
#+end_src
** killできないようにする
#+begin_src emacs-lisp
  (with-current-buffer "*scratch*"
    (emacs-lock-mode 'kill))

  (with-current-buffer "*Messages*"
    (emacs-lock-mode 'kill))
#+end_src
** 日時表示
#+begin_src emacs-lisp
  (with-eval-after-load 'time
    (setq display-time-24hr-format t)
    (setq display-time-day-and-date t))
#+end_src
** fontset
#+begin_src emacs-lisp
  (with-delayed-execution
    (defconst my/enable-warning-log nil)

    (defun set-fontset-font:around (set-fontset-font name target font-spec &optional frame add)
      "Warn if specified font is not installed."
      (if (stringp font-spec)
          (setq font-spec (font-spec :family font-spec)))
      (if (and (fontp font-spec)
               (null (find-font font-spec))
               my/enable-warning-log)
          (warn "set-fontset-font: font %s is not found." (font-get font-spec :family))
        (ignore-errors
          (funcall set-fontset-font name target font-spec frame add))))

    (advice-add 'set-fontset-font :around #'set-fontset-font:around)

    ;; reset all settings in default fontset
    (when (functionp 'set-fontset-font)
      (if (find-font (font-spec :family "Noto Sans"))
          (set-fontset-font t '(0 . #x3fffff) "Noto Sans"))

      ;; multiple platform
      (set-fontset-font t 'latin "Noto Sans")
      (set-fontset-font t 'greek "Noto Sans")
      (set-fontset-font t 'phonetic "Noto Sans")
      (set-fontset-font t 'coptic "Noto Sans Coptic")
      (set-fontset-font t 'coptic "Noto Sans Symbols2" nil 'append)
      (set-fontset-font t 'cyrillic "Noto Sans")
      (set-fontset-font t 'armenian "Noto Sans Armenian")
      (set-fontset-font t 'hebrew "Noto Sans Hebrew")
      (set-fontset-font t 'arabic "Noto Sans Arabic")
      (set-fontset-font t 'syriac "Noto Sans Syriac")
      (set-fontset-font t 'thaana "Noto Sans Thaana")
      (set-fontset-font t 'nko "Noto Sans N'Ko")
      (set-fontset-font t 'samaritan "Noto Sans Samaritan")
      (set-fontset-font t 'mandaic "Noto Sans Mandaic")
      (set-fontset-font t 'devanagari "Noto Sans Devanagari")
      (set-fontset-font t 'bengali "Noto Sans Bengali")
      (set-fontset-font t 'gurmukhi "Noto Sans Gurmukhi")
      (set-fontset-font t 'gujarati "Noto Sans Gujanrati")
      (set-fontset-font t 'oriya "Noto Sans Oriya")
      (set-fontset-font t 'tamil "Noto Sans Tamil")
      (set-fontset-font t 'tamil "Noto Sans Tamil Supplement" nil 'append)
      (set-fontset-font t 'telugu "Noto Sans Telugu")
      (set-fontset-font t 'kannada "Noto Sans Kannada")
      (set-fontset-font t 'malayalam "Noto Sans Malayalam")
      (set-fontset-font t 'sinhala "Noto Sans Sinhala")
      (set-fontset-font t 'thai "Noto Sans Thai")
      (set-fontset-font t 'lao "Noto Sans Lao")
      (set-fontset-font t 'tibetan "Noto Sans Tibetan")
      (set-fontset-font t 'burmese "Noto Sans Myanmar")
      (set-fontset-font t 'georgian "Noto Sans Georgian")
      (set-fontset-font t 'hangul "Noto Sans CJK KR")
      (set-fontset-font t 'ethiopic "Noto Sans Ethiopic")
      (set-fontset-font t 'cherokee "Noto Sans Cherokee")
      (set-fontset-font t 'canadian-aboriginal "Noto Sans Canadian Aboriginal")
      (set-fontset-font t 'ogham "Noto Sans Ogham")
      (set-fontset-font t 'runic "Noto Sans Runic")
      (set-fontset-font t 'tagalog "Noto Sans Tagalog")
      (set-fontset-font t 'hanunoo "Noto Sans Hanunoo")
      (set-fontset-font t 'buhid "Noto Sans Buhid")
      (set-fontset-font t 'tagbanwa "Noto Sans Tagbanwa")
      (set-fontset-font t 'khmer "Noto Sans Khmer")
      (set-fontset-font t 'mongolian "Noto Sans Mongolian")
      (set-fontset-font t 'limbu "Noto Sans Limbu")
      (set-fontset-font t 'tai-le "Noto Sans Tai Le")
      (set-fontset-font t 'tai-lue "Noto Sans NewTaiLue")
      (set-fontset-font t 'buginese "Noto Sans Buginese")
      (set-fontset-font t 'tai-tham "Noto Sans Tai Tham")
      (set-fontset-font t 'balinese "Noto Sans Balinese")
      (set-fontset-font t 'sundanese "Noto Sans Sundanese")
      (set-fontset-font t 'vedic "Noto Sans Devanagari")
      (set-fontset-font t 'symbol "Noto Sans CJK JP")
      (set-fontset-font t 'symbol "Noto Sans Symbols2" nil 'append)
      (set-fontset-font t 'symbol "Noto Sans" nil 'append)
      (set-fontset-font t 'symbol "Noto Sans Math" nil 'append)
      (set-fontset-font t 'symbol "Noto Emoji" nil 'append)
      (set-fontset-font t 'symbol "Noto Sans Symbols" nil 'append)
      (set-fontset-font t 'braille "Noto Sans Symbols2")
      (set-fontset-font t 'batak "Noto Sans Batak")
      (set-fontset-font t 'lepcha "Noto Sans Lepcha")
      (set-fontset-font t 'ol-chiki "Noto Sans Ol Chiki")
      (set-fontset-font t 'glagolitic "Noto Sans Glagolitic")
      (set-fontset-font t 'tifinagh "Noto Sans Tifinagh")
      (set-fontset-font t 'han "Noto Sans CJK JP")
      (set-fontset-font t 'ideographic-description "Noto Sans CJK JP")
      (set-fontset-font t 'cjk-misc "Noto Sans CJK JP")
      (set-fontset-font t 'kana "Noto Sans CJK JP")
      (set-fontset-font t 'bopomofo "Noto Sans CJK TC")
      (set-fontset-font t 'kanbun "Noto Sans CJK JP")
      (set-fontset-font t 'yi "Noto Sans Yi")
      (set-fontset-font t 'lisu "Noto Sans Lisu")
      (set-fontset-font t 'vai "Noto Sans Vai")
      (set-fontset-font t 'bamum "Noto Sans Bamum")
      (set-fontset-font t 'syloti-nagri "Noto Sans Syloti Nagri")
      (set-fontset-font t 'north-indic-number "Noto Sans Devanagari")
      (set-fontset-font t 'phags-pa "Noto Sans Phags Pa")
      (set-fontset-font t 'saurashtra "Noto Sans Saurashtra")
      (set-fontset-font t 'kayah-li "Noto Sans Kayah Li")
      (set-fontset-font t 'rejang "Noto Sans Rejang")
      (set-fontset-font t 'javanese "Noto Sans Javanese")
      (set-fontset-font t 'cham "Noto Sans Cham")
      (set-fontset-font t 'tai-viet "Noto Sans Tai Viet")
      (set-fontset-font t 'meetei-mayek "Noto Sans Meetei Mayek")
      (set-fontset-font t 'vertical-form "Noto Sans CJK JP")
      (set-fontset-font t '(#xfe50 . #xfe6b) "Noto Sans CJK JP") ; symbol
      (set-fontset-font t '(#xfff9 . #xfffb) "Noto Sans Symbols2") ; nil
      (set-fontset-font t 'linear-b "Noto Sans Linear B")
      (set-fontset-font t 'aegean-number "Noto Sans Linear B")
      (set-fontset-font t 'ancient-greek-number "Noto Sans Symbols2")
      (set-fontset-font t 'ancient-symbol "Noto Sans Symbols2")
      (set-fontset-font t 'phaistos-disc "Noto Sans Symbols2")
      (set-fontset-font t 'lycian "Noto Sans Lycian")
      (set-fontset-font t 'carian "Noto Sans Carian")
      (set-fontset-font t 'old-italic "Noto Sans Old Italic")
      (set-fontset-font t 'gothic "Noto Sans Gothic")
      (set-fontset-font t 'old-permic "Noto Sans Old Permic")
      (set-fontset-font t 'ugaritic "Noto Sans Ugaritic")
      (set-fontset-font t 'old-persian "Noto Sans OldPersian")
      (set-fontset-font t 'deseret "Noto Sans Deseret")
      (set-fontset-font t 'shavian "Noto Sans Shavian")
      (set-fontset-font t 'osmanya "Noto Sans Osmanya")
      (set-fontset-font t 'osage "Noto Sans Osage")
      (set-fontset-font t 'elbasan "Noto Sans Elbasan")
      (set-fontset-font t 'caucasian-albanian "Noto Sans CaucAlban")
      (set-fontset-font t 'linear-a "Noto Sans Linear A")
      (set-fontset-font t 'cypriot-syllabary "Noto Sans Cypriot")
      (set-fontset-font t 'aramaic "Noto Sans ImpAramaic")
      (set-fontset-font t 'palmyrene "Noto Sans Palmyrene")
      (set-fontset-font t 'nabataean "Noto Sans Nabataean")
      (set-fontset-font t 'hatran "Noto Sans Hatran")
      (set-fontset-font t 'phoenician "Noto Sans Phoenician")
      (set-fontset-font t 'lydian "Noto Sans Lydian")
      (set-fontset-font t 'meroitic "Noto Sans Meroitic")
      (set-fontset-font t 'kharoshthi "Noto Sans Kharoshthi")
      (set-fontset-font t 'old-south-arabian "Noto Sans OldSouArab")
      (set-fontset-font t 'old-north-arabian "Noto Sans OldNorArab")
      (set-fontset-font t 'manichaean "Noto Sans Manichaean")
      (set-fontset-font t 'avestan "Noto Sans Avestan")
      (set-fontset-font t 'inscriptional-parthian "Noto Sans Inscriptional Parthian")
      (set-fontset-font t 'inscriptional-pahlavi "Noto Sans Inscriptional Pahlavi")
      (set-fontset-font t 'psalter-pahlavi "Noto Sans PsaPahlavi")
      (set-fontset-font t 'old-turkic "Noto Sans Old Turkic")
      (set-fontset-font t 'old-hungarian "Noto Sans OldHung")
      (set-fontset-font t 'hanifi-rohingya "Noto Sans HanifiRohg")
      (set-fontset-font t 'rumi-number "Noto Sans Symbols2")
      (set-fontset-font t 'old-sogdian "Noto Sans OldSogdian")
      (set-fontset-font t 'sogdian "Noto Sans Sogdian")
      (set-fontset-font t 'elymaic "Noto Sans Elymaic")
      (set-fontset-font t 'brahmi "Noto Sans Brahmi")
      (set-fontset-font t 'kaithi "Noto Sans Kaithi")
      (set-fontset-font t 'sora-sompeng "Noto Sans SoraSomp")
      (set-fontset-font t 'chakma "Noto Sans Chakma")
      (set-fontset-font t 'mahajani "Noto Sans Mahajani")
      (set-fontset-font t 'sharada "Noto Sans Sharada")
      (set-fontset-font t 'sinhala-archaic-number "Noto Sans Sinhala")
      (set-fontset-font t 'khojki "Noto Sans Khojki")
      (set-fontset-font t 'multani "Noto Sans Multani")
      (set-fontset-font t 'khudawadi "Noto Sans Khudawadi")
      (set-fontset-font t 'grantha "Noto Sans Grantha")
      (set-fontset-font t 'newa "Noto Sans Newa")
      (set-fontset-font t 'tirhuta "Noto Sans Tirhuta")
      (set-fontset-font t 'siddham "Noto Sans Siddham")
      (set-fontset-font t 'modi "Noto Sans Modi")
      (set-fontset-font t 'takri "Noto Sans Takri")
      (set-fontset-font t 'ahom "Noto Serif Ahom")
      (set-fontset-font t 'dogra "Noto Serif Dogra")
      (set-fontset-font t 'warang-citi "Noto Sans WarangCiti")
      (set-fontset-font t 'zanabazar-square "Noto Sans Zanabazar")
      (set-fontset-font t 'soyombo "Noto Sans Soyombo")
      (set-fontset-font t 'pau-cin-hau "Noto Sans PauCinHau")
      (set-fontset-font t 'bhaiksuki "Noto Sans Bhaiksuki")
      (set-fontset-font t 'marchen "Noto Sans Marchen")
      (set-fontset-font t 'masaram-gondi "Noto Sans Masaram Gondi")
      (set-fontset-font t 'gunjala-gondi "Noto Sans Gunjala Gondi")
      (set-fontset-font t 'cuneiform "Noto Sans Cuneiform")
      (set-fontset-font t 'cuneiform-numbers-and-punctuation "Noto Sans Cuneiform")
      (set-fontset-font t 'egyptian "Noto Sans EgyptHiero")
      (set-fontset-font t 'anatolian "Noto Sans AnatoHiero")
      (set-fontset-font t 'mro "Noto Sans Mro")
      (set-fontset-font t 'bassa-vah "Noto Sans Bassa Vah")
      (set-fontset-font t 'pahawh-hmong "Noto Sans Pahawh Hmong")
      (set-fontset-font t 'miao "Noto Sans Miao")
      (set-fontset-font t 'tangut "Noto Serif Tangut")
      (set-fontset-font t 'tangut-components "Noto Serif Tangut")
      (set-fontset-font t '(#x16fe0 . #x16fe0) "Noto Serif Tangut")
      (set-fontset-font t 'duployan-shorthand "Noto Sans Duployan")
      (set-fontset-font t 'byzantine-musical-symbol "Noto Music")
      (set-fontset-font t 'musical-symbol "Noto Music")
      (set-fontset-font t 'ancient-greek-musical-notation "Noto Music")
      (set-fontset-font t 'mayan-numeral "Noto Sans Mayan Numerals")
      (set-fontset-font t 'tai-xuan-jing-symbol "Noto Sans Symbols2")
      (set-fontset-font t 'counting-rod-numeral "Noto Sans Symbols2")
      (set-fontset-font t 'mathematical "Noto Sans Math")
      (set-fontset-font t 'wancho "Noto Sans Wancho")
      (set-fontset-font t 'mende-kikakui "Noto Sans Mende Kikakui")
      (set-fontset-font t 'adlam "Noto Sans Adlam")
      (set-fontset-font t 'indic-siyaq-number "Noto Sans Indic Siyaq Numbers")
      (set-fontset-font t '(#x1ee00 . #x1eeff) "Noto Sans Math") ; arabic
      (set-fontset-font t 'mahjong-tile "Noto Sans Symbols2")
      (set-fontset-font t 'domino-tile "Noto Sans Symbols2")
      (set-fontset-font t 'playing-cards "Noto Sans Symbols2")

      ;; non Noto fonts
      (set-fontset-font t 'kana "UniHentaiKana" nil 'append)
      (set-fontset-font t 'latin "Iosevka" nil 'append)
      (set-fontset-font t 'symbol "Iosevka" nil 'append)

      ;; Nerd Font (defined thru -#xfd46)
      (set-fontset-font t '( #xe000 .  #xf136) "Inconsolata Nerd Font")))
#+end_src
** warning
#+begin_src emacs-lisp
  (setq display-warning-minimum-level :error)
#+end_src
** キーコマンド入力中に入力過程をミニバッファに反映する
#+begin_src emacs-lisp
  (setq echo-keystrokes 0.1)
#+end_src
** recursive minibuffers
#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
#+end_src
** inhibit-compacting-font-caches
#+begin_src emacs-lisp
  (setq inhibit-compacting-font-caches t)
#+end_src
** save-place-mode
#+begin_src emacs-lisp
  (with-delayed-execution
    (save-place-mode 1))
#+end_src
** enable-local-variables
#+begin_src emacs-lisp
  (setq enable-local-variables :all)
#+end_src
* Utitlity
** a
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "plexus/a.el"))

  (with-delayed-execution-priority-high
    (message "Install a...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/a")))
#+end_src
** alert
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jwiegley/alert"))

  (with-delayed-execution-priority-high
    (message "Install alert...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/alert")))
#+end_src
** async
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jwiegley/emacs-async"))

  (with-delayed-execution-priority-high
    (message "Install async...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-async")))
#+end_src
** bui
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "alezost/bui.el"))

  (with-delayed-execution-priority-high
    (message "Install bui...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/bui")))
#+end_src
** buttercup
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jorgenschaefer/emacs-buttercup"))

  (with-delayed-execution-priority-high
    (message "Install emacs-buttercup...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-buttercup")))
#+end_src
** cfrs
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Alexander-Miller/cfrs"))

  (with-delayed-execution-priority-high
    (message "Install cfrs...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/cfrs")))
#+end_src
** closql
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magit/closql"))

  (with-delayed-execution-priority-high
    (message "Install closql...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/closql")))
#+end_src
** compat
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "phikal/compat.el"))

  (with-delayed-execution-priority-high
    (message "Install compat...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/compat")))
#+end_src
** dash
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magnars/dash.el"))

  (with-delayed-execution-priority-high
    (message "Install dash...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dash")))
#+end_src
** esxml
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "tali713/esxml"))

  (with-delayed-execution-priority-high
    (message "Install esxml...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/esxml")))
#+end_src
** emacsql
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magit/emacsql"))

  (with-delayed-execution-priority-high
    (message "Install emacsql...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacsql")))
#+end_src
** epl
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "cask/epl"))

  (with-delayed-execution-priority-high
    (message "Install epl...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/epl")))
#+end_src
** ert-expectations
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/ert-expectations"))

  (with-delayed-execution-priority-high
    (message "Install ert-expectations...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ert-expectations")))
#+end_src
** espuds
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ecukes/espuds"))

  (with-delayed-execution-priority-high
    (message "Install espuds...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/espuds")))
#+end_src
** f
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "rejeep/f.el"))

  (with-delayed-execution-priority-high
    (message "Install f...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/f")))
#+end_src
** flx
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "lewang/flx"))

  (with-delayed-execution
    (message "Install flx...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/flx")))
#+end_src
** frame-local
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "sebastiencs/frame-local"))

  (with-delayed-execution-priority-high
    (message "Install frame-local...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/frame-local")))
#+end_src
** fringe-helper
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "nschum/fringe-helper.el"))

  (with-delayed-execution-priority-high
    (message "Install fringe-helper...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/fringe-helper")))
#+end_src
** helm
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-helm/helm"))

  (with-delayed-execution-priority-high
    (message "Install helm...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/helm")))
#+end_src
** hide-lines
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "vapniks/hide-lines"))

  (with-delayed-execution-priority-high
    (message "Install hide-lines...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/hide-lines")))
#+end_src
** hsluv
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "hsluv/hsluv-emacs"))

  (with-delayed-execution-priority-high
    (message "Install hsluv-emacs...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/hsluv-emacs")))
#+end_src
** ht
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Wilfred/ht.el"))

  (with-delayed-execution-priority-high
    (message "Install ht...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ht")))
#+end_src
** hydra
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "abo-abo/hydra"))

  (with-delayed-execution-priority-high
    (message "Install hydra...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/hydra")))
#+end_src
** iedit
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "victorhge/iedit"))

  (with-delayed-execution-priority-high
    (message "Install iedit...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/iedit")))
#+end_src
** jump
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "eschulte/jump.el"))

  (with-delayed-execution-priority-high
    (message "Install jump...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/jump")))
#+end_src
** list-utils
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "rolandwalker/list-utils"))

  (with-delayed-execution-priority-high
    (message "Install list-utils...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/list-utils")))
#+end_src
** log4e
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "aki2o/log4e"))

  (with-delayed-execution
    (message "Install log4e...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/log4e")))
#+end_src
** marshal
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "sigma/marshal.el"))

  (with-delayed-execution-priority-high
    (message "Install marshal...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/marshal")))
#+end_src
** mocker
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "sigma/mocker.el"))

  (with-delayed-execution-priority-high
    (message "Install mocker...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/mocker")))
#+end_src
** mustache
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Wilfred/mustache.el"))

  (with-delayed-execution-priority-high
    (message "Install mustache...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/mustache")))
#+end_src
** ov
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/ov"))

  (with-delayed-execution-priority-high
    (message "Install ov...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ov")))
#+end_src
** pfuture
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Alexander-Miller/pfuture"))

  (with-delayed-execution-priority-high
    (message "Install pfuture...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/pfuture")))
#+end_src
** pkg-info
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/pkg-info"))

  (with-delayed-execution-priority-high
    (message "Install pkg-info...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/pkg-info")))
#+end_src
** posframe
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "tumashu/posframe"))

  (with-delayed-execution-priority-high
    (message "Install posframe...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/posframe")))
#+end_src
** popup
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "auto-complete/popup-el"))

  (with-delayed-execution-priority-high
    (message "Install popup-el...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/popup-el")))
#+end_src
** queue
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/queue"))

  (with-delayed-execution-priority-high
    (message "Install queue...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/queue")))
#+end_src
** reformatter
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "purcell/emacs-reformatter"))

  (with-delayed-execution-priority-high
    (message "Install emacs-reformatter...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-reformatter")))
#+end_src
** request
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "tkf/emacs-request"))

  (with-delayed-execution-priority-high
    (message "Install emacs-request...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-request")))
#+end_src
** s
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magnars/s.el"))

  (with-delayed-execution-priority-high
    (message "Install s...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/s")))
#+end_src
** sesman
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "vspinu/sesman"))

  (with-delayed-execution-priority-high
    (message "Install sesman...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/sesman")))
#+end_src
** simple-httpd
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "skeeto/emacs-web-server"))

  (with-delayed-execution-priority-high
    (message "Install emacs-web-server...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-web-server")))
#+end_src
** spinner
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Malabarba/spinner.el"))

  (with-delayed-execution-priority-high
    (message "Install spinner...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/spinner")))
#+end_src
** shrink-path
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :fetcher "gitlab"
              :repo "bennya/shrink-path.el"))

  (with-delayed-execution-priority-high
    (message "Install shrink-path...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/shrink-path")))
#+end_src
** tablist
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "politza/tablist"))

  (with-delayed-execution-priority-high
    (message "Install tablist...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/tablist")))
#+end_src
** tomelr
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "kaushalmodi/tomelr"))

  (with-delayed-execution-priority-high
    (message "Install tomelr...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/tomelr")))
#+end_src
** treemacs
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Alexander-Miller/treemacs"
              :load-paths `(,(locate-user-emacs-file "el-clone/treemacs/src/elisp")
                            ,(locate-user-emacs-file "el-clone/treemacs/src/extra"))))

  (with-delayed-execution-priority-high
    (message "Install treemacs...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/treemacs/src/elisp"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/treemacs/src/extra")))
#+end_src
** treepy
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "volrath/treepy.el"))

  (with-delayed-execution-priority-high
    (message "Install treepy...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/treepy")))
#+end_src
** tree-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/tree-mode"))

  (with-delayed-execution-priority-high
    (message "Install tree-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/tree-mode")))
#+end_src
** ts
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "alphapapa/ts.el"))

  (with-delayed-execution-priority-high
    (message "Install ts...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ts")))
#+end_src
** yaml
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "zkry/yaml.el"))

  (with-delayed-execution-priority-high
    (message "Install yaml...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/yaml")))
#+end_src
** visual-fill-column
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "joostkremers/visual-fill-column"))

  (with-delayed-execution-priority-high
    (message "Install visual-fill-column...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/visual-fill-column")))
#+end_src
** web-server
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "skeeto/emacs-web-server"))

  (with-delayed-execution-priority-high
    (message "Install emacs-web-server...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-web-server")))
#+end_src
** websocket
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ahyatt/emacs-websocket"))

  (with-delayed-execution-priority-high
    (message "Install emacs-websocket...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-websocket")))
#+end_src
** xelb
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ch11ng/xelb"))

  (with-delayed-execution-priority-high
    (message "Install xelb...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/xelb")))
#+end_src
** xwidgets-reuse
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "lordpretzel/xwidgets-reuse"))

  (with-delayed-execution
    (message "Install xwidgets-reuse...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/xwidgets-reuse")))
#+end_src
** gh-test
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "edivangalindo/gh-test"))

  (with-delayed-execution-priority-high
    (message "Install gh-test...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/gh-test")))
#+end_src
** gh
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "sigma/gh.el"))

  (with-delayed-execution-priority-high
    (message "Install gh...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/gh")))
#+end_src
* Language
** apache-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-php/apache-mode"))

  (with-delayed-execution
    (message "Install apache-mode")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/apache-mode"))

    (autoload-if-found '(apache-mode) "apache-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.htaccess$" . apache-mode)))
#+end_src
** bazel-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "bazelbuild/emacs-bazel-mode"))

  (with-delayed-execution
    (message "Install bazel-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-bazel-mode"))
    (autoload-if-found '(bazel-mode) "bazel" nil t))
#+end_src
** bison-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Wilfred/bison-mode"))

  (with-delayed-execution
    (message "Install bison-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/bison-mode"))

    (autoload-if-found '(bison-mode flex-mode jison-mode) "bison-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.y\\'" . bison-mode))
    (add-to-list 'auto-mode-alist '("\\.l\\'" . flex-mode))
    (add-to-list 'auto-mode-alist '("\\.jison\\'" . jison-mode)))
#+end_src
** c++-mode
#+begin_src emacs-lisp
  (with-eval-after-load 'c++-mode
    (add-hook 'c++-mode-hook #'lsp-deferred))
#+end_src
** c-mode
#+begin_src emacs-lisp
  (with-eval-after-load 'cc-mode
    (add-hook 'c-mode-hook #'lsp-deferred))
#+end_src
** cask-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Wilfred/cask-mode"))

  (with-delayed-execution
    (message "Install cask-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/cask-mode"))

    (autoload-if-found '(cask-mode) "cask-mode" nil t)

    (add-to-list 'auto-mode-alist '("/Cask\\'" . cask-mode)))
#+end_src
** cfn-mode

以下が必要

- ~pip install cfn-lint~
- ~gem install cfn_nag~

#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :fetcher "gitlab"
              :repo "worr/cfn-mode"))

  (with-delayed-execution
    (message "Install cfn-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/cfn-mode/cfn-mode"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/cfn-mode/flycheck-cfn"))

    (autoload-if-found '(cfn-mode) "cfn-mode" nil t)
    (autoload-if-found '(flycheck-cfn-setup) "flycheck-cfn" nil t)

    (add-to-list 'magic-mode-alist '("\\(---\n\\)?AWSTemplateFormatVersion:" . cfn-mode))

    (with-eval-after-load 'cfn-mode
      (add-hook 'cfn-mode-hook #'flycheck-cfn-setup)))
#+end_src
** clojure-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "clojure-emacs/clojure-mode"))

  (with-delayed-execution
    (message "Install clojure-mode")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/clojure-mode"))

    (autoload-if-found '(clojure-mode clojurescript-mode) "clojure-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode))
    (add-to-list 'auto-mode-alist '("\\.cljs$" . clojurescript-mode))

    (with-eval-after-load 'clojure-mode
      ;; config
      (setq clojure-toplevel-inside-comment-form t)

      ;; hook
      ;; (add-hook 'clojure-mode-hook #'lsp-deferred)

      ;; keybind
      (define-key clojure-mode-map (kbd "C-:") #'avy-goto-word-1)))
#+END_SRC
** cmake-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/cmake-mode"))

  (with-delayed-execution
    (message "Install cmake...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/cmake-mode"))

    (autoload-if-found '(cmake-mode) "cmake-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.cmake$" . cmake-mode)))
#+END_SRC
** coffee-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "defunkt/coffee-mode"))

  (with-delayed-execution
    (message "Install coffee-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/coffee-mode"))

    (autoload-if-found '(coffee-mode) "coffee-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode)))
#+END_SRC
** crontab-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-pe/crontab-mode"))

  (with-delayed-execution
    (message "Install crontab-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/crontab-mode"))

    (autoload-if-found '(crontab-mode) "crontab-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.?cron\\(tab\\)?\\'" . crontab-mode)))
#+end_src
** csharp-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-csharp/csharp-mode"))

  (with-delayed-execution
    (message "Install csharp-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/csharp-mode"))

    (autoload-if-found '(csharp-mode) "csharp-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.cs$" . csharp-mode)))
#+END_SRC
** css-mode
#+begin_src emacs-lisp
  (with-eval-after-load 'css-mode
    (add-hook 'css-mode-hook #'lsp-deferred))
#+end_src
** csv-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/csv-mode"))

  (with-delayed-execution
    (message "Install csv-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/csv-mode"))

    (autoload-if-found '(csv-mode) "csv-mode" nil t)
    (push '("\\.csv$" . csv-mode) auto-mode-alist))
#+END_SRC
** cuda-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/cuda-mode"))

  (with-delayed-execution
    (message "Install cuda-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/cuda-mode"))

    (autoload-if-found '(cuda-mode) "cuda-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.cu$" . cuda-mode)))
#+end_src
** crystal-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jpellerin/emacs-crystal-mode"))

  (with-delayed-execution
    (message "Install crystal-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-crystal-mode"))

    (autoload-if-found '(crystal-mode) "crystal-mode" nil t)

    (add-to-list 'auto-mode-alist '("Projectfile$" . crystal-mode))
    (add-to-list 'auto-mode-alist
                 (cons (purecopy (concat "\\(?:\\."
                                         "cr"
                                         "\\)\\'")) 'crystal-mode)))
#+end_src
** dart-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "bradyt/dart-mode"))

  (with-delayed-execution
    (message "Install dart-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dart-mode"))

    (autoload-if-found '(dart-mode) "dart-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.dart$" . dart-mode)))
#+end_src
** dhall-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "psibi/dhall-mode"))

  (with-delayed-execution
    (message "Install dhall-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dhall-mode"))

    (autoload-if-found '(dhall-mode) "dhall-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.dhall$" . dhall-mode)))
#+end_src
** direnv-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "wbolster/emacs-direnv"))

  (with-delayed-execution
    (message "Install direnv-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-direnv"))

    (autoload-if-found '(direnv-mode direnv-envrc-mode) "direnv" nil t)
    (add-to-list 'auto-mode-alist '("\\.envrc" . direnv-envrc-mode))
    (direnv-mode))
#+end_src
** docker-compose-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "meqif/docker-compose-mode"))

  (with-delayed-execution
    (message "Install docker-comopse-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/docker-compose-mode"))

    (autoload-if-found '(docker-compose-mode) "docker-compose-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\docker-compose*" . docker-compose-mode)))
#+end_src
** dockerfile-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "spotify/dockerfile-mode"))

  (with-delayed-execution
    (message "Install dockerfile-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dockerfile-mode"))

    (autoload-if-found '(dockerfile-mode) "dockerfile-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\Dockerfile$" . dockerfile-mode))
    (add-to-list 'auto-mode-alist '("\\Dockerfile_Ecs$" . dockerfile-mode))
    (add-to-list 'auto-mode-alist '("\\Dockerfile_EcsDeploy" . dockerfile-mode))

    (with-eval-after-load 'dockerfile-mode
      (add-hook 'dockerfile-mode-hook #'flycheck-mode)))
#+END_SRC
** dotenv-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "preetpalS/emacs-dotenv-mode"))

  (with-delayed-execution
    (message "Install dotenv-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-dotenv-mode"))

    (autoload-if-found '(dotenv-mode) "dotenv-mode" nil t)
    (add-to-list 'auto-mode-alist '(".env" . dotenv-mode))
    (add-to-list 'auto-mode-alist '("\\.env\\..*\\'" . dotenv-mode)))
#+end_src
** elixir-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "elixir-editors/emacs-elixir"))

  (with-delayed-execution
    (message "Install elixir-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-elixir"))

    (autoload-if-found '(elixir-mode) "elixir-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.elixir$" . elixir-mode))
    (add-to-list 'auto-mode-alist '("\\.ex$" . elixir-mode))
    (add-to-list 'auto-mode-alist '("\\.exs$" . elixir-mode))
    (add-to-list 'auto-mode-alist '("mix\\.lock" . elixir-mode)))
#+end_src
** elm-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jcollard/elm-mode"))

  (with-delayed-execution
    (message "Install elm-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/elm-mode"))

    (autoload-if-found '(elm-mode) "elm-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.elm$" . elm-mode)))
#+end_src
** fish-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "wwwjfy/emacs-fish"))

  (with-delayed-execution
    (message "Install fish-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-fish"))

    (autoload-if-found '(fish-mode) "fish-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.fish$" . fish-mode))
    (with-eval-after-load 'fish-mode
      (setq fish-enable-auto-indent t)))
#+END_SRC
** forth-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "larsbrinkhoff/forth-mode"))

  (with-delayed-execution
    (message "Install forth-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/forth-mode"))

    (autoload-if-found '(forth-mode) "forth-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.f$" . forth-mode))
    (add-to-list 'auto-mode-alist '("\\.fs$" . forth-mode))
    (add-to-list 'auto-mode-alist '("\\.fth$" . forth-mode))
    (add-to-list 'auto-mode-alist '("\\.forth$" . forth-mode))
    (add-to-list 'auto-mode-alist '("\\.4th$" . forth-mode)))
#+end_src
** fortran
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install fortran...")
    (autoload-if-found '(f90-mode) "f90" nil t)
    (add-to-list 'auto-mode-alist '("\\.f\\(y90\\|y?pp\\)\\'" . f90-mode))
    (with-eval-after-load 'f90
      (add-hook 'f90-mode-hook #'lsp)))
#+end_src
** fsharp-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "fsharp/emacs-fsharp-mode"))

  (with-delayed-execution
    (message "Install fsharp-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-fsharp-mode"))

    (autoload-if-found '(fsharp-mode) "fsharp-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.fs[iylx]?$" . fsharp-mode)))
#+end_src
** git-modes
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magit/git-modes"))

  (with-delayed-execution
    (message "Install git-modes...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/git-modes"))

    (add-to-list 'load-path (locate-user-emacs-file (concat "el-clone/git-modes")))
    (autoload-if-found '(gitignore-mode gitconfig-mode gitattributes-mode) "git-modes" nil t)

    ;; gitignore-mode
    (add-to-list 'auto-mode-alist '("\\.dockerignore$" . gitignore-mode))
    (add-to-list 'auto-mode-alist '("\\.gitignore$" . gitignore-mode))
    (add-to-list 'auto-mode-alist '("\\.prettierignore$" . gitignore-mode))
    (add-to-list 'auto-mode-alist '("/git/ignore\\'" . gitignore-mode))
    (add-to-list 'auto-mode-alist '("/git/ignore\\'" . gitignore-mode))
    (add-to-list 'auto-mode-alist '("CODEOWNERS" . gitignore-mode))

    ;; gitconfig-mode
    (add-to-list 'auto-mode-alist '("\\.git-pr-release$" . gitconfig-mode))
    (add-to-list 'auto-mode-alist '("\\.editorconfig$" . gitconfig-mode))
    (add-to-list 'auto-mode-alist '("\\.gitconfig$" . gitconfig-mode))
    (add-to-list 'auto-mode-alist '("/\\.git/config\\'" . gitconfig-mode))
    (add-to-list 'auto-mode-alist '("/modules/.*/config\\'" . gitconfig-mode))
    (add-to-list 'auto-mode-alist '("/git/config\\'" . gitconfig-mode))
    (add-to-list 'auto-mode-alist '("/\\.gitmodules\\'" . gitconfig-mode))
    (add-to-list 'auto-mode-alist '("/etc/gitconfig\\'" . gitconfig-mode))

    ;; gitattributes
    (add-to-list 'auto-mode-alist '("/\\.gitattributes\\'" . gitattributes-mode))
    (add-to-list 'auto-mode-alist '("/info/attributes\\'" . gitattributes-mode))
    (add-to-list 'auto-mode-alist '("/git/attributes\\'" . gitattributes-mode)))
#+end_src
** glsl-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "jimhourihan/glsl-mode"))

  (with-delayed-execution
    (message "Install glsl-mode")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/glsl-mode"))

    (autoload-if-found '(glsl-mode) "glsl-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.vsh$" . glsl-mode))
    (add-to-list 'auto-mode-alist '("\\.fsh$" . glsl-mode)))
#+END_SRC
** go-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "dominikh/go-mode.el"))

  (with-delayed-execution
    (message "Install go-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/go-mode"))

    (autoload-if-found '(go-mode) "go-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.go$" . go-mode))
    (add-to-list 'auto-mode-alist '("^go.mod$" . go-mode))

    (with-eval-after-load 'go-mode
      ;; config
      (setq gofmt-command "goimports")

      ;; hook
      ;; (remove-hook 'go-mode-hook #'lsp-deferred)
      (add-hook 'before-save-hook #'gofmt-before-save)))
#+END_SRC
** gradle-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "jacobono/emacs-gradle-mode"))

  (with-delayed-execution
    (message "Install gradle-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-gradle-mode"))

    (autoload-if-found '(gradle-mode) "gradle-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.gradle$" . gradle-mode)))
#+END_SRC
** graphql-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "davazp/graphql-mode"))

  (with-delayed-execution
    (message "Install graphql-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/graphql-mode"))

    (autoload-if-found '(graphql-mode) "graphql-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.graphql\\'" . graphql-mode))

    (with-eval-after-load 'graphql-mode
      (setq graphql-indent-level 4)))
#+end_src
** graphviz-dot-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ppareit/graphviz-dot-mode"))

  (with-delayed-execution
    (message "Install graphviz-dot-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/graphviz-dot-mode"))

    (autoload-if-found '(graphviz-dot-mode) "graphviz-dot-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.dot\\'" . graphviz-dot-mode))
    (add-to-list 'auto-mode-alist '("\\.gv\\'" . graphviz-dot-mode))

    (with-eval-after-load 'graphviz-dot-mode
      (setq graphviz-dot-auto-indent-on-semi nil)
      (setq graphviz-dot-indent-width 2)))
#+end_src
** groovy-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Groovy-Emacs-Modes/groovy-emacs-modes"))

  (with-delayed-execution
    (message "Install groovy-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/groovy-emacs-modes"))

    (autoload-if-found '(groovy-mode) "groovy-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.g\\(?:ant\\|roovy\\|radle\\)\\'" . groovy-mode))
    (add-to-list 'auto-mode-alist '("/Jenkinsfile\\'" . groovy-mode))
    (add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode)))
#+end_src
** hack-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "hhvm/hack-mode"))

  (with-delayed-execution
    (message "Install hack-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/hack-mode"))

    (autoload-if-found '(hack-mode) "hack-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.hack$" . hack-mode))
    (add-to-list 'auto-mode-alist '("\\.hck$" . hack-mode))
    (add-to-list 'auto-mode-alist '("\\.hhi$" . hack-mode)))
#+end_src
** haskell-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "haskell/haskell-mode"))

  (with-delayed-execution
    (message "Install haskell-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/haskell-mode"))

    (autoload-if-found '(haskell-doc-current-info) "haskell-doc" nil t)
    (autoload-if-found '(haskell-mode) "haskell-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.hs$" . haskell-mode))
    (add-to-list 'auto-mode-alist '("\\.cable$" . haskell-mode)))
#+END_SRC
** hy-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "hylang/hy-mode"))

  (with-delayed-execution
    (message "Install hy-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/hy-mode"))

    (autoload-if-found '(hy-mode) "hy-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.hy$" . hy-mode)))
#+end_src
** ini-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Lindydancer/ini-mode"))

  (with-delayed-execution
    (message "Install ini-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ini-mode"))

    (autoload-if-found '(ini-mode) "ini-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.ini$" . ini-mode)))
#+end_src
** jade-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "brianc/jade-mode"))

  (with-delayed-execution
    (message "Install jade-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/jade-mode"))

    (autoload-if-found '(jade-mode) "jade-mode" nil t)
    (autoload-if-found '(stylus-mode) "stylus-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.jade$" . jade-mode))
    (add-to-list 'auto-mode-alist '("\\.styl\\'" . stylus-mode)))
#+end_src
** java-mode
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install java-mode...")
    (autoload-if-found '(java-mode) "java-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.java$" . java-mode)))
#+end_src
** js2-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "mooz/js2-mode"))

  (with-delayed-execution
    (message "Install js2-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/js2-mode"))

    (autoload-if-found '(js2-mode) "js2-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.mjs$" . js2-mode))

    (with-eval-after-load 'js2-mode
      (setq js2-strict-missing-semi-warning nil)
      (setq js2-missing-semi-one-line-override nil)
      (add-hook 'js2-mode-hook #'lsp-deferred)))
#+END_SRC
** json-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "Sterlingg/json-snatcher")
    (el-clone :repo "joshwnj/json-mode"))

  (with-delayed-execution
    (message "Install json-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/json-snatcher"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/json-mode"))

    (autoload-if-found '(json-mode) "json-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.json$" . json-mode))
    (add-to-list 'auto-mode-alist '("\\.textlintrc$" . json-mode))
    (add-to-list 'auto-mode-alist '("\\.prettierrc$" . json-mode))

    (with-eval-after-load 'json-mode
      (add-hook 'json-mode-hook #'flycheck-mode)))
#+END_SRC
** jsonnet-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "tminor/jsonnet-mode"))

  (with-delayed-execution
    (message "Install jsonnet-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/jsonnet-mode"))
    (autoload-if-found '(jsonnet-mode
                         jsonnet-eval-buffer
                         jsonnet-jump
                         jsonnet-reformat-buffer) "jsonnet-mode" nil t)

    (add-to-list 'auto-mode-alist (cons "\\.jsonnet\\'" 'jsonnet-mode))
    (add-to-list 'auto-mode-alist (cons "\\.libsonnet\\'" 'jsonnet-mode))

    (with-eval-after-load 'jsonnet-mode
      ;; config
      (setq jsonnet-indent-level 4)

      ;; keybind
      (define-key jsonnet-mode-map (kbd "C-c C-c") #'jsonnet-eval-buffer)
      (define-key jsonnet-mode-map (kbd "C-c C-f") #'jsonnet-jump)
      (define-key jsonnet-mode-map (kbd "C-c C-r") #'jsonnet-reformat-buffer)))
#+end_src
** kotlin-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Emacs-Kotlin-Mode-Maintainers/kotlin-mode"))

  (with-delayed-execution
    (message "Install kotlin-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/kotlin-mode"))

    (autoload-if-found '(kotlin-mode) "kotlin-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.kts?\\'" . kotlin-mode)))
#+end_src
** lisp-mode
#+BEGIN_SRC emacs-lisp
  (with-delayed-execution
    (autoload-if-found '(lisp-mode) "lisp-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.lemrc$" . lisp-mode))
    (add-to-list 'auto-mode-alist '("\\.sbclrc$" . lisp-mode)))
#+END_SRC
** lua-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "immerrr/lua-mode"))

  (with-delayed-execution
    (message "Install lua-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lua-mode"))

    (autoload-if-found '(lua-mode) "lua-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode)))
#+end_src
** markdown-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "polymode/poly-markdown")
    (el-clone :repo "jrblevin/markdown-mode"))

  (with-delayed-execution
    (message "Install markdown-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/poly-markdown"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/markdown-mode"))

    (autoload-if-found '(markdown-mode) "markdown-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))

    (with-eval-after-load 'markdown-mode
      (setq tab-width 2)
      (setq indent-tabs-mode nil)
      (setq markdown-code-lang-modes (append '(("diff" . diff-mode)
                                               ("hs" . haskell-mode)
                                               ("html" . web-mode)
                                               ("ini" . conf-mode)
                                               ("js" . web-mode)
                                               ("jsx" . web-mode)
                                               ("md" . markdown-mode)
                                               ("pl6" . raku-mode)
                                               ("py" . python-mode)
                                               ("rb" . ruby-mode)
                                               ("rs" . rustic-mode)
                                               ("sqlite3" . sql-mode)
                                               ("ts" . web-mode)
                                               ("tsx" . web-mode)
                                               ("yaml". yaml-mode)
                                               ("zsh" . sh-mode)
                                               ("php" . php-mode))
                                             markdown-code-lang-modes))))
#+END_SRC
** mermaid-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "abrochard/mermaid-mode"))

  (with-delayed-execution
    (message "Install mermaid-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/mermaid-mode"))

    (autoload-if-found '(mermaid-mode) "mermaid-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.mmd\\'" . mermaid-mode)))
#+end_src
** makefile-mode
#+begin_src emacs-lisp
  (with-delayed-execution
    (autoload-if-found '(makefile-mode) "makefile-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.mk$" . makefile-mode))
    (add-to-list 'auto-mode-alist '("Makefile" . makefile-mode))
    (with-eval-after-load 'makefile-mode
      (add-hook 'makefile-mode #'flycheck-mode)))
#+end_src
** nasm-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "skeeto/nasm-mode"))

  (with-delayed-execution
    (message "Install nasm-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nasm-mode"))

    (autoload-if-found '(nasm-mode) "nasm-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.s$" . nasm-mode)))
#+end_src
** neon-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Fuco1/neon-mode"))

  (with-delayed-execution
    (message "Install neon-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/neon-mode"))

    (autoload-if-found '(neon-mode) "neon-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.neon$" . neon-mode)))
#+end_src
** nim-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "nim-lang/nim-mode"))

  (with-delayed-execution
    (message "Install nim-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nim-mode"))

    (autoload-if-found '(nim-mode) "nim-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.nim\\'" . nim-mode)))
#+end_src
** ninja-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ninja-build/ninja"))

  (with-delayed-execution
    (message "Install ninja-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ninja"))

    (autoload-if-found '(ninja-mode) "ninja-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.ninja$" . ninja-mode)))
#+end_src
** nix-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "NixOS/nix-mode"))

  (with-delayed-execution
    (message "Install nix-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nix-mode"))

    (autoload-if-found '(nix-mode) "nix-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode)))
#+end_src
** nginx-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "ajc/nginx-mode"))

  (with-delayed-execution
    (message "Install nginx-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nginx-mode"))

    (autoload-if-found '(nginx-mode) "nginx-mode" nil t)

    (add-to-list 'auto-mode-alist '("nginx\\.conf\\'" . nginx-mode))
    (add-to-list 'auto-mode-alist '("/nginx/.+\\.conf\\'" . nginx-mode))
    (add-to-list 'auto-mode-alist '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode))

    (with-eval-after-load 'nginx-mode
      (setq nginx-indent-tabs-mode t)))
#+END_SRC
** nov-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "wasamasa/nov.el"))

  (with-delayed-execution
    (message "Install nov-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nov"))

    (autoload-if-found '(nov-mode) "nov" nil t)

    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

    (with-eval-after-load 'nov
      (add-hook 'nov-mode-hook #'(lambda () (view-mode -1)))))
#+end_src
** pcap-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "orgcandman/pcap-mode"))

  (with-delayed-execution
    (message "Install pcap-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/pcap-mode"))

    (autoload-if-found '(pcap-mode) "pcap" nil t)

    (add-to-list 'auto-mode-alist '("\\.pcap$" . pcap-mode)))
#+end_src
** php-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-php/php-mode"))

  (with-delayed-execution
    (message "Install php-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/php-mode/lisp"))

    (autoload-if-found '(php-mode php-current-class php-current-namespace) "php-mode" nil t)
    (autoload-if-found '(php-format-this-buffer-file
                         php-format-project
                         php-format-on-after-save-hook
                         php-format-auto-mode) "php-format" nil t)

    (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))

    (with-eval-after-load 'php-mode
      ;; hook
      (add-hook 'php-mode-hook #'lsp)
      ;; (add-hook 'php-mode-hook #'eglot-ensure)
      (add-hook 'php-mode-hook #'php-format-auto-mode)

      ;; keybind
      (define-key php-mode-map (kbd "C-c C--") #'php-current-class)
      (define-key php-mode-map (kbd "C-c C-=") #'php-current-namespace)

      ;; config
      (setq php-mode-coding-style 'psr2)

      ;; phpstan
      (define-derived-mode phpstan-mode php-mode "phpstan")))
#+END_SRC
** phpt-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-php/phpt-mode"))

  (with-delayed-execution
    (message "Install phpt-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/phpt-mode"))

    (autoload-if-found '(phpt-mode) "phpt-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.phpt$" . phpt-mode)))
#+end_src
** plantuml-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "skuro/plantuml-mode"))

  (with-delayed-execution
    (message "Install plantuml-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/plantuml-mode"))

    (autoload-if-found '(plantuml-mode) "plantuml-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.pu$" . plantuml-mode)))
#+END_SRC
** protobuf-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "protocolbuffers/protobuf"))

  (with-delayed-execution
    (message "Install protobuf-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/protobuf/editors"))

    (autoload-if-found '(protobuf-mode) "protobuf-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.proto\\'" . protobuf-mode)))
#+end_src
** pug-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "hlissner/emacs-pug-mode"))

  (with-delayed-execution
    (message "Install pug-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-pug-mode"))

    (autoload-if-found '(pug-mode) "pug-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.pug$" . pug-mode)))
#+end_src
** prisma-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "pimeys/emacs-prisma-mode"))

  (with-delayed-execution
    (message "Install prisma-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-prisma-mode"))

    (autoload-if-found '(prisma-mode) "prisma-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.prisma" . prisma-mode)))
#+end_src
** processing-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "ptrv/processing2-emacs"))

  (with-delayed-execution
    (message "Install processing-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/processing2-emacs"))

    (autoload-if-found '(processing-mode) "processing-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.pde$" . processing-mode))

    (with-eval-after-load 'processing-mode
      (setq processing-location "/opt/processing/processing-java")
      (setq processing-output-dir "/tmp")))
#+END_SRC
** python-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :fetcher "gitlab"
              :repo "python-mode-devs/python-mode"))

  (with-delayed-execution
    (message "Install python-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/python-mode"))

    (autoload-if-found '(python-mode) "python-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.py$" . python-mode))

    (with-eval-after-load 'python
      (add-hook 'python-mode #'lsp)))
#+END_SRC
** qt-pro-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/qt-pro-mode"))

  (with-delayed-execution
    (message "Install qt-pro-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/qt-pro-mode"))

    (autoload-if-found '(qt-pro-mode) "qt-pro-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.pr[io]$" . qt-pro-mode)))
#+end_src
** robots-txt-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-php/robots-txt-mode"))

  (with-delayed-execution
    (message "Install robots-txt-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/robots-txt-mode"))

    (autoload-if-found '(robots-txt-mode) "robots-txt-mode" nil t)

    (add-to-list 'auto-mode-alist '("/robots\\.txt\\'" . robots-txt-mode)))
#+end_src
** ruby-mode
#+BEGIN_SRC emacs-lisp
  (with-delayed-execution
    (message "Install ruby-mode...")
    (autoload-if-found '(ruby-mode) "ruby-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.irbrc$" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Capfile" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Gemfile" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Schemafile" . ruby-mode))
    (add-to-list 'auto-mode-alist '(".pryrc" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Fastfile" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Matchfile" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Procfile" . ruby-mode))
    (add-to-list 'auto-mode-alist '(".git-pr-template" . ruby-mode))
    (add-to-list 'auto-mode-alist '(".gemrc" . ruby-mode))
    (add-to-list 'auto-mode-alist '("\\.Brewfile" . ruby-mode))

    (with-eval-after-load 'ruby-mode
      (setq ruby-insert-encoding-magic-comment nil)
      ;; (add-hook 'ruby-mode-hook #'lsp-deferred)
      ))
#+END_SRC
** rust-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "rust-lang/rust-mode"))

  (with-delayed-execution
    (message "Install rust-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/rust-mode"))

    (autoload-if-found '(rust-mode) "rust-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.rs$" . rust-mode))

    (with-eval-after-load 'rust-mode
      (setq rust-format-on-save t)
      (add-hook 'rust-mode-hook #'lsp)))
#+END_SRC
** scala-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "hvesalai/emacs-scala-mode"))

  (with-delayed-execution
    (message "Install scala-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-scala-mode"))

    (autoload-if-found '(scala-mode) "scala-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode)))
#+END_SRC
** scheme-mode
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install scheme...")
    (autoload-if-found '(scheme-mode) "scheme-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.scheme$" . scheme-mode))
    (add-to-list 'auto-mode-alist '(".guix-channel" . scheme-mode))
    (with-eval-after-load 'scheme
      (setq scheme-program-name "gosh -i")))
#+end_src
** scss-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "antonj/scss-mode"))

  (with-delayed-execution
    (message "Install scss-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/scss-mode"))

    (autoload-if-found '(scss-mode) "scss-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.scss$" . scss-mode))

    (with-eval-after-load 'scss-mode
      (add-hook 'scss-mode-hook #'flycheck-mode)
      (add-hook 'scss-mode-hook #'(lambda ()
                                    (let ((lsp-diagnostics-provider :none))
                                      (lsp-deferred))))))
#+end_src
** slim-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "slim-template/emacs-slim"))

  (with-delayed-execution
    (message "Install slim-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-slim"))

    (autoload-if-found '(slim-mode) "slim-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.slim$" . slim-mode)))
#+END_SRC
** solidity-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ethereum/emacs-solidity"))

  (with-delayed-execution
    (message "Install solidity-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-solidity"))

    (autoload-if-found '(solidity-mode) "solidity-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.sol$" . solidity-mode)))
#+end_src
** ssh-config-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "jhgorrell/ssh-config-mode-el"))

  (with-delayed-execution
    (message "Install ssh-config-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ssh-config-mode-el"))

    (autoload-if-found '(ssh-config-mode ssh-known-hosts-mode ssh-authorized-keys-mode) "ssh-config-mode" nil t)

    (add-to-list 'auto-mode-alist '("/\\.ssh/config\\(\\.d/.*\\.conf\\)?\\'" . ssh-config-mode))
    (add-to-list 'auto-mode-alist '("/sshd?_config\\(\\.d/.*\\.conf\\)?\\'" . ssh-config-mode))
    (add-to-list 'auto-mode-alist '("/known_hosts\\'" . ssh-config-mode))
    (add-to-list 'auto-mode-alist '("/authorized_keys2?\\'" . ssh-config-mode)))
#+END_SRC
** sql-mode
#+begin_src emacs-lisp
  (with-eval-after-load 'sql
    (load-library "sql-indent")

    ;; config
    (setq indent-tabs-mode nil)
    (setq sql-user "root")
    (setq sql-password "P@ssw0rd")
    (setq sql-server "127.0.0.1")
    (setq sql-port 13306)
    (setq sql-mysql-login-params '(server port user password database))

    ;; hook
    (add-hook 'sql-mode-hook #'flycheck-mode))
#+end_src
** swift-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "swift-emacs/swift-mode"))

  (with-delayed-execution
    (message "Install swift-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/swift-mode"))

    (autoload-if-found '(swift-mode) "swift-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.swift$" . swift-mode)))
#+end_src
** syslog-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "vapniks/syslog-mode"))

  (with-delayed-execution
    (message "Install syslog-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/syslog-mode"))

    (autoload-if-found '(syslog-mode) "syslog-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.log$" . syslog-mode)))
#+end_src
** systemd-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "holomorph/systemd-mode"))

  (with-delayed-execution
    (message "Install systemd-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/systemd-mode"))

    (autoload-if-found '(systemd-mode) "systemd" nil t)

    (add-to-list 'auto-mode-alist '("\\.nspawn\\'" . systemd-mode))
    (add-to-list 'auto-mode-alist `(,(rx (+? (any "a-zA-Z0-9-_.@\\")) "."
                                         (or "automount" "busname" "mount" "service" "slice"
                                             "socket" "swap" "target" "timer" "link" "netdev" "network")
                                         string-end)
                                    . systemd-mode))
    (add-to-list 'auto-mode-alist `(,(rx ".#"
                                         (or (and (+? (any "a-zA-Z0-9-_.@\\")) "."
                                                  (or "automount" "busname" "mount" "service" "slice"
                                                      "socket" "swap" "target" "timer" "link" "netdev" "network"))
                                             "override.conf")
                                         (= 16 (char hex-digit)) string-end)
                                    . systemd-mode))
    (add-to-list 'auto-mode-alist `(,(rx "/systemd/" (+? anything) ".d/" (+? (not (any ?/))) ".conf" string-end)
                                    . systemd-mode)))
#+end_src
** terraform-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "syohex/emacs-hcl-mode")
    (el-clone :repo "emacsorphanage/terraform-mode"))

  (with-delayed-execution
    (message "Install terraform-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-hcl-mode"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/terraform-mode"))

    (autoload-if-found '(hcl-mode) "hcl-mode" nil t)
    (autoload-if-found '(terraform-mode terraform-format-on-save-mode) "terraform-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.hcl$" . hcl-mode))
    (add-to-list 'auto-mode-alist '("\\.tf$" . terraform-mode))

    (with-eval-after-load 'terraform-mode
      (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode)
      (add-hook 'terraform-mode-hook #'flycheck-mode)))
#+END_SRC
** text-mode
#+begin_src emacs-lisp
  (with-delayed-execution
    (autoload-if-found '(conf-space-mode) "conf-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.tigrc$" . conf-space-mode))
    (add-to-list 'auto-mode-alist '("\\.editrc$" . conf-space-mode))
    (add-to-list 'auto-mode-alist '("\\.inputrc$" . conf-space-mode))
    (add-to-list 'auto-mode-alist '("\\.colorrc$" . conf-space-mode))
    (add-to-list 'auto-mode-alist '("credentials$" . conf-space-mode)))
#+end_src
** toml-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "dryman/toml-mode.el"))

  (with-delayed-execution
    (message "Install toml-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/toml-mode"))

    (autoload-if-found '(toml-mode) "toml-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.toml$" . toml-mode))

    (with-eval-after-load 'toml-mode
      (add-hook 'toml-mode-hook #'flycheck-mode)))
#+END_SRC
** typescript-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-typescript/typescript.el"))

  (with-delayed-execution
    (message "Install typescript-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/typescript"))

    (autoload-if-found '(typescript-mode typescript-tsx-mode) "typescript-mode" nil t)

    (define-derived-mode typescript-tsx-mode typescript-mode "tsx")

    ;; for ts/deno
    (add-to-list 'auto-mode-alist '("\\.ts$" . typescript-mode))
    (defun my/run-local-vars-mode-hook ()
      "Run `major-mode' hook after the local variables have been processed."
      (run-hooks (intern (concat (symbol-name major-mode) "-local-vars-hook"))))

    (add-hook 'hack-local-variables-hook #'my/run-local-vars-mode-hook)
    (add-hook 'typescript-mode-local-vars-hook #'lsp)

    ;; for tsx
    ;; (add-to-list 'auto-mode-alist '("\\.js$" . typescript-tsx-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx$" . typescript-tsx-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx$" . typescript-tsx-mode))
    (add-hook 'typescript-tsx-mode-hook #'lsp-deferred))
#+END_SRC
** v-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "damon-kwok/v-mode"))

  (with-delayed-execution
    (message "Install v-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/v-mode"))

    (autoload-if-found '(v-mode v-menu v-format-buffer) "v-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\(\\.v?v\\|\\.vsh\\)$" . v-mode))

    (with-eval-after-load 'v-mode
      (define-key v-mode-map (kbd "M-z") #'v-menu)
      (define-key v-mode-map (kbd "C-c C-f") #'v-format-buffer)))
#+end_src
** vue-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "AdamNiederer/ssass-mode")
    (el-clone :repo "AdamNiederer/vue-html-mode")
    (el-clone :repo "purcell/mmm-mode")
    (el-clone :repo "Fanael/edit-indirect")
    (el-clone :repo "AdamNiederer/vue-mode"))

  (with-delayed-execution
    (message "Install vue-mode...")

    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ssass-mode"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/vue-html-mode"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/mmm-mode"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/edit-indirect"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/vue-mode"))

    (autoload-if-found '(vue-mode) "vue-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.vue$" . vue-mode))

    (with-eval-after-load 'vue-html-mode
      (setq vue-html-extra-indent 4)))
#+END_SRC
** vimrc-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "mcandre/vimrc-mode"))

  (with-delayed-execution
    (message "Install vimrc-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/vimrc-mode"))

    (autoload-if-found '(vimrc-mode) "vimrc-mode" nil t)

    (add-to-list 'auto-mode-alist '("vimrc" . vimrc-mode))
    (add-to-list 'auto-mode-alist '("\\.vim\\(rc\\)?\\'" . vimrc-mode))

    (with-eval-after-load 'vimrc-mode
      (add-hook 'vimrc-mode-hook #'lsp-deferred)))
#+end_src
** wat-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "devonsparks/wat-mode"))

  (with-delayed-execution
    (message "Install wat-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/wat-mode"))

    (autoload-if-found '(wat-mode) "wat-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.wat?\\'" . wat-mode)))
#+end_src
** web-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "fxbois/web-mode"))

  (with-delayed-execution
    (message "Install web-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/web-mode"))

    (autoload-if-found '(web-mode) "web-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.gsp$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.svg$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.liquid$" . web-mode))

    (with-eval-after-load 'web-mode
      (setq web-mode-comment-style 2)
      (setq web-mode-enable-auto-pairing nil)
      (setq web-mode-enable-auto-indentation nil)))
#+END_SRC
** web-php-blade-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/web-php-blade-mode"))

  (with-delayed-execution
    (message "Install web-php-blade-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/web-php-blade-mode"))

    (autoload-if-found '(web-php-blade-mode) "web-php-blade-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.blade.php$" . web-php-blade-mode)))
#+end_src
** wolfram-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "kawabata/wolfram-mode"))

  (with-delayed-execution
    (message "Install wolfram-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/wolfram-mode"))

    (autoload-if-found '(wolfram-mode run-wolfram) "wolfram-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.m$" . wolfram-mode))
    (add-to-list 'auto-mode-alist '("\\.nb$" . wolfram-mode))
    (add-to-list 'auto-mode-alist '("\\.cbf$" . wolfram-mode))

    (with-eval-after-load 'wolfram-mode
      (setq wolfram-path "path-to-dir")))
#+end_src
** yaml-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "yoshiki/yaml-mode"))

  (with-delayed-execution
    (message "Install yaml-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/yaml-mode"))

    (autoload-if-found '(yaml-mode) "yaml-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.aclpolicy$" . yaml-mode))

    (with-eval-after-load 'yaml-mode
      (add-hook 'yaml-mode-hook #'flycheck-mode)))
#+END_SRC
** yarn-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "anachronic/yarn-mode"))

  (with-delayed-execution
    (message "Install yarn-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/yarn-mode"))

    (autoload-if-found '(yarn-mode) "yarn-mode" nil t)

    (add-to-list 'auto-mode-alist '("yarn\\.lock\\'" . yarn-mode)))
#+end_src
** zig-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ziglang/zig-mode"))

  (with-delayed-execution
    (message "Install zig-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/zig-mode"))

    (autoload-if-found '(zig-mode) "zig-mode" nil t)

    (add-to-list 'auto-mode-alist '("\\.zig$" . zig-mode))

    (with-eval-after-load 'zig-mode
      (add-hook 'zig-mode-hook #'lsp-deferred)))
#+end_src
* Awesome Package
** Buffer
*** auto-save-buffers-enhanced
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "kentaro/auto-save-buffers-enhanced"))

  (with-delayed-execution
    (message "Install auto-save-buffers-enhanced...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/auto-save-buffers-enhanced"))

    (autoload-if-found '(auto-save-buffers-enhanced) "auto-save-buffers-enhanced" nil t)

    (with-eval-after-load 'auto-save-buffers-enhanced
      (setq auto-save-buffers-enhanced-interval 10)))
#+end_src
*** editorconfig
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "editorconfig/editorconfig-emacs"))

  (with-delayed-execution
    (message "Install editorconfig...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/editorconfig-emacs"))

    (autoload-if-found '(editorconfig-mode) "editorconfig" nil t)

    (editorconfig-mode 1))
#+END_SRC
*** persistent-scratch
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Fanael/persistent-scratch"))

  (with-delayed-execution
    (message "Install persistent-scratch...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/persistent-scratch"))

    (autoload-if-found '(persistent-scratch-setup-default) "persistent-scratch" nil t)

    ;; (persistent-scratch-setup-default)

    (with-eval-after-load 'persistent-scratch
      (setq persistent-scratch-autosave-interval 100)))
#+end_src
*** popwin
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/popwin"))

  (with-delayed-execution
    (message "Install popwin...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/popwin"))

    (autoload-if-found '(popwin-mode) "popwin" nil t)

    (popwin-mode 1))
#+end_src
*** whitespace
#+BEGIN_SRC emacs-lisp
  (with-delayed-execution
    (message "Install whitespace...")
    (when (autoload-if-found '(global-whitespace-mode) "whitespace" nil t)
      (if window-system
          (global-whitespace-mode 1)))
    (with-eval-after-load 'whitespace
      (setq whitespace-style '(face tabs tab-mark spaces space-mark))
      (setq whitespace-display-mappings '((space-mark ?\u3000 [?\u25a1])
                                          (tab-mark ?\t [?\xBB ?\t] [?\\ ?\t])))))
#+END_SRC
** Check
*** flycheck
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "flycheck/flycheck"))

  (with-delayed-execution
    (message "Install flycheck...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/flycheck"))

    (autoload-if-found '(flycheck-mode flycheck-define-checker) "flycheck" nil t))
#+end_src
*** flycheck-textlint
#+begin_src emacs-lisp
  (with-delayed-execution
    (flycheck-define-checker textlint
      "A linter for prose."
      :command ("npx" "textlint" "--format" "unix" source-inplace)
      :error-patterns
      ((warning line-start (file-name) ":" line ":" column ": "
                (id (one-or-more (not (any " "))))
                (message (one-or-more not-newline)
                         (zero-or-more "\n" (any " ") (one-or-more not-newline)))
                line-end))
      :modes (org-mode))
    (with-eval-after-load 'flycheck
      (add-to-list 'flycheck-checkers 'textlint)))
#+end_src
*** flycheck-elsa
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-elsa/flycheck-elsa"))

  (with-delayed-execution
    (message "Install flycheck-elsa...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/flycheck-elsa"))

    (autoload-if-found '(flycheck-elsa-setup) "flycheck-elsa" nil t)

    (with-eval-after-load 'elisp-mode
      (add-hook 'emacs-lisp-mode-hook #'flycheck-elsa-setup)))
#+end_src
** Client
*** md4rd
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ahungry/md4rd"))

  (with-delayed-execution
    (message "Install md4rd...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/md4rd"))

    (autoload-if-found '(md4rd
                         md4rd-login
                         md4rd-visit
                         md4rd-widget-expand-all
                         md4rd-widget-collapse-all
                         md4rd-reply
                         md4rd-upvote
                         md4rd-downvote
                         md4rd-widget-toggle-line
                         md4rd-refresh-login
                         md4rd-indent-all-the-lines) "md4rd" nil t)

    (with-eval-after-load 'md4rd
      (add-hook 'md4rd-mode-hook #'md4rd-indent-all-the-lines)
      (run-with-timer 0 3540 #'md4rd-refresh-login)

      ;; config
      (setq md4rd-subs-active '(emacs lisp+Common_Lisp prolog clojure))
      ;; (setq md4rd--oauth-access-token "your-access-token-here")
      ;; (setq md4rd--oauth-refresh-token "your-refresh-token-here")

      ;; keymap
      (define-key md4rd-mode-map (kbd "u") 'tree-mode-goto-parent)
      (define-key md4rd-mode-map (kbd "o") 'md4rd-open)
      (define-key md4rd-mode-map (kbd "v") 'md4rd-visit)
      (define-key md4rd-mode-map (kbd "e") 'tree-mode-toggle-expand)
      (define-key md4rd-mode-map (kbd "E") 'md4rd-widget-expand-all)
      (define-key md4rd-mode-map (kbd "C") 'md4rd-widget-collapse-all)
      (define-key md4rd-mode-map (kbd "n") 'widget-forward)
      (define-key md4rd-mode-map (kbd "j") 'widget-forward)
      (define-key md4rd-mode-map (kbd "h") 'backward-button)
      (define-key md4rd-mode-map (kbd "p") 'widget-backward)
      (define-key md4rd-mode-map (kbd "k") 'widget-backward)
      (define-key md4rd-mode-map (kbd "l") 'forward-button)
      (define-key md4rd-mode-map (kbd "q") 'kill-current-buffer)
      (define-key md4rd-mode-map (kbd "r") 'md4rd-reply)
      (define-key md4rd-mode-map (kbd "u") 'md4rd-upvote)
      (define-key md4rd-mode-map (kbd "d") 'md4rd-downvote)
      (define-key md4rd-mode-map (kbd "t") 'md4rd-widget-toggle-line)))
#+end_src
** Color
*** ansi-color
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install ansi-color...")
    (autoload 'ansi-color-for-comint-mode-on "ansi-color" "Set `ansi-color-for-comint-mode' to t." t)
    (autoload-if-found '(ansi-color-for-comint-mode-on) "ansi-color" nil t)

    (with-eval-after-load 'shell-mode
      (add-hook 'shell-mode-hook #'ansi-color-for-comint-mode-on))

    (with-eval-after-load 'compile
      (add-hook 'compilation-filter-hook #'(lambda ()
                                             (ansi-color-apply-on-region (point-min) (point-max))))))
#+end_src
*** highlight-indent-guides
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "DarthFennec/highlight-indent-guides"))

  (with-delayed-execution
    (message "Install highlight-indent-guides...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/highlight-indent-guides"))

    (autoload-if-found '(highlight-indent-guides-mode) "highlight-indent-guides" nil t)

    (with-eval-after-load 'prog-mode
      (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))

    (with-eval-after-load 'highlight-indent-guides
      (setq highlight-indent-guides-responsive 'stack)
      (setq highlight-indent-guides-method 'bitmap)))
#+end_src
*** hl-todo
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "tarsius/hl-todo"))

  (with-delayed-execution
    (message "Install hl-todo...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/hl-todo"))

    (autoload-if-found '(global-hl-todo-mode) "hl-todo" nil t)

    (global-hl-todo-mode)

    (with-eval-after-load 'hl-todo
      (setq hl-todo-keyword-faces
            '(("HOLD" . "#d0bf8f")
              ("TODO" . "#cc9393")
              ("NOW" . "#dca3a3")
              ("TODAY" . "#dc8cc3")
              ("WAIT" . "#7cb8bb")
              ("DONE" . "#afd8af")
              ("FIXME" . "#cc9393")))))
#+end_src
*** xterm-color
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "atomontage/xterm-color"))

  (with-delayed-execution
    (message "Install xterm-color...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/xterm-color"))

    (autoload-if-found '(xterm-color-filter) "xterm-color" nil t)

    (setenv "TERM" "xterm-256color")

    (with-eval-after-load 'xterm-color
      (setq xterm-color-preserve-properties t)))
#+end_src
** Command
*** amx
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "DarwinAwardWinner/amx"))

  (with-delayed-execution-priority-high
    (message "Install amx...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/amx"))

    (with-eval-after-load 'amx
      (setq amx-history-length 100)))
#+END_SRC
** Completion
*** company
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "company-mode/company-mode"))

  (with-delayed-execution
    (message "Install company...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-mode"))

    (autoload-if-found '(global-company-mode) "company" nil t)

    (global-company-mode)

    (with-eval-after-load 'company
      ;; keybind
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous)

      ;; config
      (setq company-minimum-prefix-length 2)
      (setq company-idle-delay 0.2))

    (with-eval-after-load 'company-css
      (push 'company-css company-backends))

    (with-eval-after-load 'company-elisp
      (push 'company-elisp company-backends)))
#+END_SRC
*** company-flx
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "PythonNut/company-flx"))

  (with-delayed-execution
    (message "Install company-flx...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-flx"))
    (autoload-if-found '(company-flx-mode) "company-flx" nil t)
    (company-flx-mode))
#+end_src
*** company-box
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "sebastiencs/company-box"))

  (with-delayed-execution
    (message "Install company-box...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-box"))

    (autoload-if-found '(company-box-mode) "company-box" nil t)

    (with-eval-after-load 'company-mode
      (when window-system
        (add-hook 'company-mode-hook #'company-box-mode)))

    (with-eval-after-load 'company-box-doc
      (setq company-box-doc-enable nil)))
#+end_src
*** company-dockerfile
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/company-dockerfile"))

  (with-delayed-execution
    (message "Install company-dockerfile...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-dockerfile"))

    (autoload-if-found '(company-dockerfile) "company-dockerfile" nil t)

    (with-eval-after-load 'company
      (push 'company-dockerfile company-backends)))
#+end_src
*** company-glsl
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "Kaali/company-glsl"))

  (with-delayed-execution
    (message "Install company-glsl...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-glsl"))

    (autoload-if-found '(company-glsl) "company-glsl" nil t)

    (with-eval-after-load 'company
      (push 'company-glsl company-backends)))
#+END_SRC
*** company-c-headers
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "randomphrase/company-c-headers"))

  (with-delayed-execution
    (message "Install company-c-headers...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-c-headers"))

    (autoload-if-found '(company-c-headers) "company-c-headers" nil t)

    (with-eval-after-load 'company
      (push 'company-c-headers company-backends)))
#+end_src
*** company-shell
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/company-shell"))

  (with-delayed-execution
    (message "Install company-shell...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-shell"))

    (autoload-if-found '(company-shell company-shell-env company-fish-shell) "company-shell" nil t)

    (with-eval-after-load 'company
      (push 'company-shell company-backends)
      (push 'company-shell-env company-backends)
      (push 'company-fish-shell company-backends)))
#+end_src
*** company-terraform
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "rafalcieslak/emacs-company-terraform"))

  (with-delayed-execution
    (message "Install company-terraform...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-company-terraform"))

    (autoload-if-found '(company-terraform) "company-terraform" nil t)

    (defun my/push-company-terraform ()
      (push 'company-terraform company-backends))

    (with-eval-after-load 'terraform-mode
      (add-hook 'terraform-mode-hook #'my/push-company-terraform)))
#+end_src
*** company-nginx
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Ygenks/company-nginx"))

  (with-delayed-execution
    (message "Install company-nginx...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-nginx"))

    (autoload-if-found '(company-nginx) "company-nginx" nil t)

    (with-eval-after-load 'company
      (push 'company-nginx company-backends)))
#+end_src
*** company-gemoji
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/company-gemoji"))

  (with-delayed-execution
    (message "Install company-gemoji...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-gemoji"))

    (autoload-if-found '(company-gemoji) "company-gemoji" nil t)

    (with-eval-after-load 'company
      (push 'company-gemoji company-backends)))
#+end_src
*** company-lua
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ptrv/company-lua"))

  (with-delayed-execution
    (message "Install company-lua...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-lua"))

    (autoload-if-found '(company-lua) "company-lua" nil t)

    (with-eval-after-load 'company
      (push 'company-lua company-backends)))
#+end_src
*** company-org-block
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "xenodium/company-org-block"))

  (with-delayed-execution
    (message "Install company-org-block...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-org-block"))

    (autoload-if-found '(company-org-block) "company-org-block" nil t)

    (with-eval-after-load 'company
      (push 'company-org-block company-backends)))
#+end_src
*** company-statistics
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "company-mode/company-statistics"))

  (with-delayed-execution
    (message "Install company-statistics...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-statistics"))

    (autoload-if-found '(company-statistics-mode) "company-statistics" nil t)

    (company-statistics-mode))
#+end_src
*** copilot.el
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "zerolfx/copilot.el"))

  (with-delayed-execution
    (message "Install copilot...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/copilot"))
    (autoload-if-found '(copilot-login
                         copilot-mode
                         global-copilot-mode) "copilot" nil t)

    (with-eval-after-load 'copilot
      ;; config
      (setq copilot-log-max 100000)

      ;; keymap
      (define-key copilot-mode-map (kbd "C-c # i") #'copilot-complete)
      (define-key copilot-mode-map (kbd "C-c # a") #'copilot-accept-completion)))
#+end_src
** Cursor
*** avy
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "abo-abo/avy"))

  (with-delayed-execution
    (message "Install avy...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/avy"))

    (autoload-if-found '(avy-goto-word-1) "avy" nil t)

    (global-set-key (kbd "C-:") #'avy-goto-word-1)

    (with-eval-after-load 'avy
      (setq avy-all-windows nil)
      (setq avy-background t)))
#+end_src
*** avy-zap
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "cute-jumper/avy-zap"))

  (with-delayed-execution
    (message "Install avy-zap...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/avy-zap"))

    (autoload-if-found '(avy-zap-up-to-char-dwim) "avy-zap" nil t)

    (global-set-key (kbd "M-z") 'avy-zap-up-to-char-dwim))
#+end_src
*** expand-region
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magnars/expand-region.el"))

  (with-delayed-execution
    (message "Install expand-region...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/expand-region"))

    (autoload-if-found '(er/expand-region) "expand-region" nil t)

    (transient-mark-mode)

    (global-set-key (kbd "C-M-@") 'er/expand-region))
#+end_src
*** multiple-cursors
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "magnars/multiple-cursors.el"))

  (with-delayed-execution
    (message "Install multiple-cursors...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/multiple-cursors"))

    (autoload-if-found '(mc/mark-next-like-this mc/mark-previous-like-this mc/mark-all-like-this) "multiple-cursors" nil t)

    (global-set-key (kbd "C->") #'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") #'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") #'mc/mark-all-like-this))
#+END_SRC
*** subword
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install subword...")
    (autoload-if-found '(my/delete-forward-block) "subword" nil t)

    (global-set-key (kbd "M-d") #'my/delete-forward-block)

    (defun my/delete-forward-block ()
      (interactive)
      (if (eobp)
          (message "End of buffer")
        (let* ((syntax-move-point
                (save-excursion
                  (skip-syntax-forward (string (char-syntax (char-after))))
                  (point)))
               (subword-move-point
                (save-excursion
                  (subword-forward)
                  (point))))
          (kill-region (point) (min syntax-move-point subword-move-point))))))
#+end_src
** Dictionary
*** define-word
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "abo-abo/define-word"))

  (with-delayed-execution
    (message "Install define-word...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/define-word"))

    (defun my/define-word ()
      (interactive)
      (if (use-region-p)
          (call-interactively #'define-word-at-point)
        (call-interactively #'define-word)))

    (with-eval-after-load 'define-word
      (setq define-word-displayfn-alist
            '((wordnik . takeokunn/define-word--display-in-buffer)
              (openthesaurus . takeokunn/define-word--display-in-buffer)
              (webster . takeokunn/define-word--display-in-buffer)
              (weblio . takeokunn/define-word--display-in-buffer)))))
#+end_src
** Dired
*** basic
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Fuco1/dired-hacks"))

  (with-delayed-execution
    (message "Install dired...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dired-hacks"))

    (with-eval-after-load 'dired
      ;; config
      (setq dired-auto-revert-buffer nil)
      (setq dired-dwim-target t)
      (setq dired-hide-details-hide-symlink-targets nil)
      (setq dired-listing-switches "-alh")
      (setq dired-recursive-copies 'always)
      (setq dired-use-ls-dired nil)

      ;; hook
      (add-hook 'dired-mode-hook #'(lambda () (display-line-numbers-mode -1)))))

#+end_src
*** dired-collapse
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install dired-collapse...")

    (autoload-if-found '(dired-collapse-mode) "dired-collapse" nil t)

    (with-eval-after-load 'dired
      (add-hook 'dired-mode #'dired-collapse-mode)))
#+end_src
*** dired-filter
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install dired-filter...")
    (autoload-if-found '(dired-filter-mode) "dired-filter" nil t)
    (with-eval-after-load 'dired
      (add-hook 'dired-mode #'dired-filter-mode)))
#+end_src
*** dired-narrow
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install dired-narrow...")

    (autoload-if-found '(dired-narrow-mode) "dired-narrow" nil t)

    (with-eval-after-load 'dired
      (add-hook 'dired-mode-hook #'dired-narrow-mode)))
#+end_src
*** dired-open
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install dired-open...")

    (autoload-if-found '(dired-open-file) "dired-open" nil t)

    (with-eval-after-load 'dired
      (define-key dired-mode-map [remap dired-find-file] #'dired-open-file)))
#+end_src
*** dired-ranger
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install dired-ranger...")
    (autoload-if-found '() "dired-ranger" nil t))
#+end_src
*** dired-quick-sort
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :fetcher "gitlab"
              :repo "xuhdev/dired-quick-sort"))

  (with-delayed-execution
    (message "Install dired-quick-sort...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dired-quick-sort"))

    (autoload-if-found '(dired-quick-sort-setup) "dired-quick-sort" nil t)

    (with-eval-after-load 'dired
      (add-hook 'dired-mode-hook #'dired-quick-sort-setup)))
#+end_src
*** dired-subtree
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install dired-subtree...")
    (autoload-if-found '(dired-subtree-apply-filter) "dired-subtree" nil t))
#+end_src
** EWW
*** basic
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install eww...")

    (defun my/eww-rename-buffer ()
      "Rename the name of current EWW buffer."
      (let* ((title (plist-get eww-data :title))
             (url (file-name-base (eww-current-url)))
             (buffer-name (or (if (and title (> (length title) 0))
                                  title
                                nil)
                              url "")))
        (rename-buffer (format "eww: %s" buffer-name) t)))

    ;; config
    (with-eval-after-load 'eww
      (setq eww-header-line-format nil)
      (setq eww-search-prefix "http://www.google.co.jp/search?q="))

    (with-eval-after-load 'browse-url
      (setq browse-url-browser-function 'eww-browse-url))

    ;; keybind
    (with-eval-after-load 'eww
      (define-key eww-mode-map (kbd "C") #'eww-set-character-encoding)
      (define-key eww-mode-map (kbd "C-j") #'eww-follow-link)
      (define-key eww-mode-map (kbd "T") #'eww-goto-title-heading)
      (define-key eww-mode-map (kbd "T") #'eww-goto-title-heading))

    ;; hooks
    (with-eval-after-load 'eww
      (add-hook 'eww-after-render #'my/eww-rename-buffer)))
#+end_src
*** eww-lnum
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "m00natic/eww-lnum"))

  (with-delayed-execution
    (message "Install eww-lnum...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/eww-lnum"))

    (autoload-if-found '(eww-lnum-follow eww-lnum-universal) "eww-lnum" nil t)

    (with-eval-after-load 'eww
      (define-key eww-mode-map "f" #'eww-lnum-follow)
      (define-key eww-mode-map "F" #'eww-lnum-universal)))
#+end_src
** File
*** recentf
#+BEGIN_SRC emacs-lisp
  (with-delayed-execution
    (message "Install recentf...")
    (autoload-if-found '(recentf-mode) "recentf" nil t)
    (recentf-mode 1)
    (with-eval-after-load 'recentf
      (setq recentf-max-menu-items 10000)
      (setq recentf-max-saved-items 10000)
      (setq recentf-auto-cleanup 'never)
      (setq recentf-save-file  "~/.emacs.d/.recentf")
      (setq recentf-exclude '(".recentf" "\\.gpg\\"))))
#+END_SRC
*** open-junk-file
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "rubikitch/open-junk-file"))

  (with-delayed-execution
    (message "Install open-junk-file...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/open-junk-file"))

    (autoload-if-found '(open-junk-file) "open-junk-file" nil t)

    (global-set-key (kbd "C-x j") #'open-junk-file)

    (advice-add #'open-junk-file
                :around
                (defun my/open-junk-file (old-func &rest args)
                  (ivy-mode 0)
                  (apply old-func args)
                  (ivy-mode 1)))

    (with-eval-after-load 'open-junk-file
      (setq open-junk-file-format "~/.emacs.d/.junk/%Y-%m-%d-%H%M%S.")))
#+END_SRC
*** vlf
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "m00natic/vlfi"))

  (with-delayed-execution
    (message "Install vlfi...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/vlfi"))

    (autoload-if-found '(vlf-disable-for-function) "vlf-setup" t)

    (vlf-disable-for-function tags-verify-table "etags")
    (vlf-disable-for-function tag-find-file-of-tag-noselect "etags")
    (vlf-disable-for-function helm-etags-create-buffer "helm-tags")

    (with-eval-after-load 'dired
      (define-key dired-mode-map (kbd "V") #'dired-vlf)))
#+end_src
** Font
*** font-lock-studio
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "Lindydancer/font-lock-studio"))

  (with-delayed-execution
    (message "Install font-lock-studio...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/font-lock-studio"))

    (autoload-if-found '(font-lock-studio) "font-lock-studio" nil t))
#+END_SRC
** GC
*** gcmh
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/gcmh"))

  (with-delayed-execution
    (message "Install gcmh...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/gcmh"))

    (autoload-if-found '(gcmh-mode) "gcmh" nil t)

    (gcmh-mode 1)

    (defvar my/gcmh-status nil)

    (advice-add #'garbage-collect
                :before
                (defun my/gcmh-log-start (&rest _)
                  (when gcmh-verbose
                    (setq my/gcmh-status "Running GC..."))))

    (advice-add #'gcmh-message
                :override
                (defun my/gcmh-message (format-string &rest args)
                  (setq my/gcmh-status
                        (apply #'format-message format-string args))
                  (run-with-timer 2 nil
                                  (lambda ()
                                    (setq my/gcmh-status nil)))))

    (with-eval-after-load 'gcmh
      ;; config
      (setq gcmh-verbose nil)
      (setq gcmh-low-cons-threshold (* 800000 16))
      (setq gcmh-high-cons-threshold (* #x40000000 16))
      (setq gcmh-idle-delay 120)
      (setq gcmh-auto-idle-delay-factor 60)))
#+end_src
** Git
*** magit
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "magit/transient"
              :load-paths `(,(locate-user-emacs-file "el-clone/transient/lisp")))
    (el-clone :repo "magit/ghub"
              :load-paths `(,(locate-user-emacs-file "el-clone/ghub/lisp")))
    (el-clone :repo "magit/magit-popup")
    (el-clone :repo "magit/with-editor"
              :load-paths `(,(locate-user-emacs-file "el-clone/with-editor/lisp")))
    (el-clone :repo "magit/magit"
              :load-paths `(,(locate-user-emacs-file "el-clone/magit/lisp"))))

  (with-delayed-execution-priority-high
    (message "Install magit...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/transient/lisp"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ghub/lisp"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/magit-pop"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/with-editor/lisp"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/magit/lisp"))

    (autoload-if-found '(global-git-commit-mode) "git-commit" nil t)
    (autoload-if-found '(magit-status magit-blame) "magit")

    (global-git-commit-mode)

    (defun my/magit-status ()
      (interactive)
      (let ((default-directory (locate-dominating-file default-directory ".git")))
        (magit-status)))

    (global-set-key (kbd "C-x g") #'my/magit-status)
    (global-set-key (kbd "C-x G") #'magit-blame)

    (with-eval-after-load 'magit
      (setq magit-refresh-status-buffer nil))

    (with-eval-after-load 'magit-base
      (setq magit-completing-read-function #'ivy-completing-read))

    (with-eval-after-load 'magit-status
      (define-key magit-status-mode-map (kbd "C-j") #'magit-visit-thing))

    (with-eval-after-load 'magit-log
      (define-key magit-log-mode-map (kbd "C-j") #'magit-visit-thing))

    (with-eval-after-load 'git-commit
      (define-key git-commit-mode-map (kbd "C-h") #'delete-backward-char)))
#+END_SRC
*** magit-forge
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magit/forge"
              :load-paths `(,(locate-user-emacs-file "el-clone/forge/lisp"))))

  (with-delayed-execution
    (message "Install magit-forge...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/forge/lisp"))

    (add-hook 'magit-mode-hook #'(lambda () (require 'forge))))
#+end_src
*** git-gutter
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/git-gutter"))

  (with-delayed-execution
    (message "Install git-gutter...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/git-gutter"))

    (autoload-if-found '(git-gutter-mode) "git-gutter" nil t)

    (with-eval-after-load 'git-gutter
      ;; (add-hook 'prog-mode-hook #'git-gutter-mode)
      (setq git-gutter:update-hooks '(after-save-hook after-revert-hook))))
#+end_src
*** git-gutter-fringe
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/git-gutter-fringe"))

  (with-delayed-execution
    (message "Install git-gutter-fringe...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/git-gutter-fringe"))

    (autoload-if-found '(git-gutter-fr:init
                         git-gutter-fr:view-diff-infos
                         git-gutter-fr:clear) "git-gutter-fringe" nil t)

    (with-eval-after-load 'git-gutter
      (setq git-gutter-fr:side 'right-fringe)
      (setq git-gutter:window-width -1)
      (setq git-gutter:init-function #'git-gutter-fr:init)
      (setq git-gutter:view-diff-function #'git-gutter-fr:view-diff-infos)
      (setq git-gutter:clear-function #'git-gutter-fr:clear)))
#+end_src
*** git-timemachine
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/git-timemachine"))

  (with-delayed-execution
    (message "Install git-timemachine...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/git-timemachine"))

    (autoload-if-found '(git-timemachine) "git-timemachine" nil t))
#+end_src
*** gist
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "defunkt/gist.el"))

  (with-delayed-execution
    (message "Install gist...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/gist"))

    (autoload-if-found '(gist-mode) "gist" nil t))
#+end_src
*** blamer
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Artawower/blamer.el"))

  (with-delayed-execution
    (message "Install blamer...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/blamer"))

    (autoload-if-found '(blamer-mode) "blamer" nil t))
#+end_src
** Googling
*** google-this
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "Malabarba/emacs-google-this"))

  (with-delayed-execution
    (message "Install google-this...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-google-this"))

    (autoload-if-found '(google-this) "google-this" nil t))
#+END_SRC
*** google-translate
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "zonuexe/google-translate"))

  (with-delayed-execution
    (message "Install google-translate...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/google-translate"))

    (autoload-if-found '(google-translate-at-point) "google-translate" nil t))
#+end_src
** GPG
*** epa-file
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install epa-file...")
    (autoload-if-found '(epa-file-enable) "epa-file" nil t)
    (epa-file-enable)
    (with-eval-after-load 'epa-file
      (setq epa-file-cache-passphrase-for-symmetric-encryption t)))
#+end_src
*** pinentry
https://github.com/ch11ng/exwm/wiki#gpg-pinentry
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ueno/pinentry-el"))

  (with-delayed-execution
    (message "Install pinentry...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/pinentry-el"))

    (autoload-if-found '(pinentry-start) "pinentry" nil t)
    (when-guix
     (pinentry-start)))
#+end_src
** Help
*** helpful
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Wilfred/helpful"))

  (with-delayed-execution
    (message "Install helpful...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/helpful"))

    (autoload-if-found '(helpful-callable
                         helpful-function
                         helpful-macro
                         helpful-command
                         helpful-key
                         helpful-variable
                         helpful-at-point) "helpful" nil t)
    ;; keybinds
    (when (not my/enable-c-h-backspace)
      (global-set-key (kbd "C-h f") #'helpful-callable)
      (global-set-key (kbd "C-h v") #'helpful-variable)
      (global-set-key (kbd "C-h k") #'helpful-key)
      (global-set-key (kbd "C-c C-d") #'helpful-at-point)
      (global-set-key (kbd "C-h F") #'helpful-function)
      (global-set-key (kbd "C-h C") #'helpful-command))

    (with-eval-after-load 'counsel
      (setq counsel-describe-function-function #'helpful-callable)
      (setq counsel-describe-variable-function #'helpful-variable)))
#+end_src
** IME
*** ddskk
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "skk-dev/ddskk"))

  (with-delayed-execution-priority-high
    (message "Install ddskk...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ddskk"))

    (autoload-if-found '(skk-mode) "skk-autoloads" nil t)

    (global-set-key (kbd "C-x C-j") #'skk-mode)

    (defun my/skk-C-j-key (arg)
      (interactive "P")
      (cond
       ((and (null (skk-in-minibuffer-p))
             (null skk-henkan-mode))
        (skk-emulate-original-map arg))
       (t
        (skk-kakutei arg))))

    (with-eval-after-load 'skk
      ;; config
      (setq skk-preload t)
      (setq default-input-method "japanese-skk"))

    (with-eval-after-load 'skk-vars
      ;; use skkserv
      (when-darwin
       (setq skk-server-host "localhost")
       (setq skk-server-portnum 1178))

      ;; guix
      (when-guix
       (setq skk-user-directory "~/.my-skk-jisyo"))

      (setq skk-byte-compile-init-file t)
      (setq skk-isearch-mode-enable 'always)
      (setq skk-egg-like-newline t)
      (setq skk-show-annotation nil)
      (setq skk-auto-insert-paren t)

      ;; azik
      (setq skk-use-azik t)
      (setq skk-azik-keyboard-type 'jp106)

      ;; ref: https://github.com/skk-dev/ddskk/blob/master/etc/dot.skk#L752-L768
      (add-to-list 'skk-rom-kana-rule-list '(skk-kakutei-key nil my/skk-C-j-key))))
#+END_SRC
*** ddskk-posframe
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "conao3/ddskk-posframe.el"))

  (with-delayed-execution
    (message "Install ddskk-posframe...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ddskk-posframe"))

    (autoload-if-found '(ddskk-posframe-mode) "ddskk-posframe" nil t)

    (with-eval-after-load 'skk
      (add-hook 'skk-mode-hook #'ddskk-posframe-mode)))
#+end_src
** Joke
*** hacker-typer
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "dieggsy/emacs-hacker-typer"))

  (with-delayed-execution
    (message "Install hacker-typer...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-hacker-typer"))

    (autoload-if-found '(hacker-typer) "hacker-typer" nil t))
#+end_src
*** power-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "elizagamedev/power-mode.el"))

  (with-delayed-execution
    (message "Install power-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/power-mode"))

    (autoload-if-found '(power-mode) "power-mode" nil t))
#+end_src
*** sudden-death
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "yewton/sudden-death.el"))

  (with-delayed-execution
    (message "Install sudden-death...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/sudden-death"))

    (autoload-if-found '(sudden-death) "sudden-death" nil t))
#+end_src
*** redacted
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "bkaestner/redacted.el"))

  (with-delayed-execution
    (message "Install redacted...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/redacted"))

    (autoload-if-found '(redacted-mode) "redacted" nil t)

    (defun my/redacted-mode ()
      (interactive)
      (read-only-mode (if redacted-mode -1 1))
      (redacted-mode (if redacted-mode -1 1))))
#+end_src
*** lorem ipsum
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jschaf/emacs-lorem-ipsum"))

  (with-delayed-execution
    (message "Install lorem-ipsum...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-lorem-ipsum"))

    (autoload-if-found '(lorem-ipsum-insert-sentences
                         lorem-ipsum-insert-paragraphs
                         lorem-ipsum-insert-list) "lorem-ipsum" nil t)

    (global-set-key (kbd "C-c C-l s") #'lorem-ipsum-insert-sentences)
    (global-set-key (kbd "C-c C-l p") #'lorem-ipsum-insert-paragraphs)
    (global-set-key (kbd "C-c C-l l") #'lorem-ipsum-insert-list))
#+end_src
** Keyboard
*** key-chord
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/key-chord"))

  (with-delayed-execution
    (message "Install key-chord...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/key-chord"))

    (autoload-if-found '(key-chord-mode key-chord-define-global) "key-chord" nil t)
    (key-chord-mode 1)

    ;; for global
    (key-chord-define-global "fj" #'view-mode)
    (key-chord-define-global "jf" #'view-mode))
#+end_src
*** key-combo
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "uk-ar/key-combo"))

  (with-delayed-execution
    (message "Install key-combo...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/key-combo"))

    (autoload-if-found '(key-combo-mode key-combo-define-local) "key-combo" nil t)

    ;; for php-mode
    (with-eval-after-load 'php-mode
      ;; (add-hook 'php-mode-hook
      ;;           #'(lambda ()
      ;;               (key-combo-mode)
      ;;               (when (window-system)
      ;;                 (key-combo-define-local (kbd ",>") " => "))
      ;;               ;; (key-combo-define-local (kbd "+") '("+" " + " "++" " ++ "))
      ;;               ;; (key-combo-define-local (kbd "-") '("-" " - " "--" " -- "))
      ;;               ;; (key-combo-define-local (kbd "*") '("*" "**" " * "))
      ;;               ;; (key-combo-define-local (kbd "=") '("=" " = " "==" "==="))
      ;;               ))
      )

    ;; for typescript-tsx-mode
    (with-eval-after-load 'typescript-tsx-mode
      (add-hook 'typescript-tsx-mode
                #'(lambda ()
                    (key-combo-mode)
                    (key-combo-define-local (kbd "</") #'web-mode-element-close)))))
#+end_src
*** which-key
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "justbur/emacs-which-key"))

  (with-delayed-execution
    (message "Install which-key...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-which-key"))

    (autoload-if-found '(which-key-mode) "which-key" nil t)

    (which-key-mode))
#+end_src
** LSP
*** eglot
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install eglot...")

    (autoload-if-found '(eglot-ensure) "eglot" nil t)

    (with-eval-after-load 'eglot
      ;; config
      (setq eglot-events-buffer-size nil)
      (setq eglot-autoshutdown t)
      (setq eglot-extend-to-xref t)

      ;; language server
      (add-to-list 'eglot-server-programs '(php-mode . ("intelephense" "--stdio")))
      (add-to-list 'eglot-server-programs '(clojure-mode clojurescript-mode clojurec-mode
                                                         . ("/Users/take/.emacs.d/.cache/lsp/clojure/clojure-lsp"
                                                            "listen" "--verbose")))))
#+end_src
*** lsp-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-lsp/lsp-mode"
              :load-paths `(,(locate-user-emacs-file "el-clone/lsp-mode/clients"))))

  (with-delayed-execution
    (message "Install lsp-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lsp-mode"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lsp-mode/clients"))

    (autoload-if-found '(lsp lsp-deferred lsp-org) "lsp-mode" nil t)
    (autoload-if-found '(lsp-lens-mode lsp-lens-refresh) "lsp-lens" nil t)
    (autoload-if-found '(lsp-diagnostics-mode) "lsp-diagnostics" nil t)
    (autoload-if-found '(lsp-completion-mode) "lsp-completion" nil t)
    (autoload-if-found '(lsp-dired-mode) "lsp-dired" nil t)
    (autoload-if-found '(lsp-modeline-code-actions-mode lsp-modeline-diagnostics-mode) "lsp-modeline" nil t)
    (autoload-if-found '(lsp-headerline-breadcrumb-mode) "lsp-headerline" nil t)

    (advice-add 'lsp-rename :before #'(lambda (&rest _) (remove-hook 'find-file-hooks #'view-mode)))
    (advice-add 'lsp-rename :after #'(lambda (&rest _) (add-hook 'find-file-hooks #'view-mode)))

    (defun my/disable-lsp-flycheck ()
      (interactive)
      (setq lsp-diagnostics-provider :none)
      (remove-hook 'lsp-mode-hook #'flycheck-mode))

    (defun my/enable-lsp-flycheck ()
      (interactive)
      (setq lsp-diagnostics-provider :flycheck)
      (add-hook 'lsp-mode-hook #'flycheck-mode))

    (with-eval-after-load 'lsp-mode
      ;; hook
      (add-hook 'lsp-mode-hook #'lsp-lens-mode)
      (add-hook 'lsp-mode-hook #'lsp-diagnostics-mode)
      (add-hook 'lsp-mode-hook #'lsp-completion-mode)
      (add-hook 'lsp-mode-hook #'lsp-dired-mode)
      (add-hook 'lsp-mode-hook #'lsp-modeline-code-actions-mode)
      (add-hook 'lsp-mode-hook #'lsp-modeline-diagnostics-mode)
      (add-hook 'lsp-mode-hook #'lsp-headerline-breadcrumb-mode)

      ;; ignore path
      (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]vendor")
      (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]storage")
      (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]docs")
      (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]target")
      (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\].calva")
      (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\].clj-kondo")

      ;; enable flycheck
      (add-hook 'lsp-mode-hook #'flycheck-mode)

      ;; config
      (setq lsp-idle-delay 0.8)
      (setq lsp-enable-links nil)
      (setq lsp-log-io nil)
      (setq lsp-file-watch-threshold 20000))

    (with-eval-after-load 'lsp-completion
      (setq lsp-completion-no-cache t)
      (setq lsp-prefer-capf t))

    (with-eval-after-load 'lsp-diagnostics
      (setq lsp-diagnostics-provider :flycheck))

    (with-eval-after-load 'lsp-icons
      (unless window-system
        (setq lsp-headerline-breadcrumb-icons-enable nil)))

    (with-eval-after-load 'lsp-php
      ;; for intelephense
      (setq lsp-intelephense-clear-cache t)
      (setq lsp-intelephense-php-version "8.2")
      (setq lsp-intelephense-telemetry-enabled t)

      ;; for phpactor
      (setq lsp-phpactor-path "~/.ghq/github.com/phpactor/phpactor/bin/phpactor"))

    (with-eval-after-load 'lsp-ruby
      (setq lsp-solargraph-autoformat t)
      (setq lsp-solargraph-multi-root nil))

    (with-eval-after-load 'lsp-lens
      (define-advice narrow-to-region (:after (&rest _))
        (lsp-lens-refresh t))

      (define-advice widen (:after (&rest _))
        (lsp-lens-refresh t))))

#+END_SRC
*** lsp-php-key
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install lsp-php-key...")
    (with-eval-after-load 'lsp-php
      (setq lsp-intelephense-licence-key "00OXTX8OROOJH9P")))
#+end_src
*** lsp-treemacs
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-lsp/lsp-treemacs"))

  (with-delayed-execution
    (message "Install lsp-treemacs...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lsp-treemacs"))

    (autoload-if-found '(lsp-treemacs-sync-mode) "lsp-treemacs" nil t)

    (with-eval-after-load 'lsp-mode
      (add-hook 'lsp-mode-hook #'lsp-treemacs-sync-mode))

    (with-eval-after-load 'lsp-treemacs
      (setq lsp-treemacs-error-list-severity 1)
      (setq lsp-treemacs-error-list-current-project-only t)))
#+end_src
*** lsp-docker
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-lsp/lsp-docker"))

  (with-delayed-execution
    (message "Install lsp-docker...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lsp-docker"))

    (autoload-if-found '(lsp-docker-start) "lsp-docker" nil t))
#+end_src
*** dap-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-lsp/dap-mode"))

  (with-delayed-execution
    (message "Install dap-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dap-mode"))

    (autoload-if-found '(dap-debug) "dap-mode" nil t)
    (autoload-if-found '(dap-hydra) "dap-hydra" nil t)
    (autoload-if-found '(dap-ui-mode dap-ui-controls-mode) "dap-ui" nil t)
    (autoload-if-found '(dap-tooltip-mode) "dap-mouse" nil t)
    (autoload-if-found '(dap-php-setup) "dap-php" nil t)
    (autoload-if-found '(dap-node-setup) "dap-node" nil t)
    (autoload-if-found '(dap-go-setup) "dap-go" nil t)
    (autoload-if-found '(dap-ruby-setup) "dap-ruby" nil t)

    (with-eval-after-load 'dap-mode
      ;; keybind
      (define-key dap-mode-map (kbd "C-c d") #'dap-breakpoint-toggle)

      ;; hook
      (add-hook 'dap-mode-hook #'dap-ui-mode)
      (add-hook 'dap-mode-hook #'dap-ui-controls-mode)
      (add-hook 'dap-mode-hook #'tooltip-mode)
      (add-hook 'dap-mode-hook #'dap-tooltip-mode)
      (add-hook 'dap-stopped-hook #'(lambda (arg) (call-interactively #'dap-hydra))))

    (with-eval-after-load 'php-mode
      (add-hook 'php-mode-hook #'dap-php-setup))

    (with-eval-after-load 'dap-php
      ;; config
      (setq dap-php-debug-path `,(expand-file-name "xdebug/vscode-php-debug" dap-utils-extension-path))

      ;; register
      (dap-register-debug-template "Laravel Run Configuration"
                                   (list :type "php"
                                         :request "launch"
                                         :mode "remote"
                                         :host "localhost"
                                         :port 9003)))

    (with-eval-after-load 'js2-mode
      (add-hook 'js2-mode-hook #'dap-node-setup))

    (with-eval-after-load 'go-mode
      (add-hook 'go-mode-hook #'dap-go-setup))

    (with-eval-after-load 'ruby-mode
      (add-hook 'ruby-mode-hook #'dap-ruby-setup)))
#+END_SRC
*** lsp-ui
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-lsp/lsp-ui"))

  (with-delayed-execution
    (message "Install lsp-ui...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lsp-ui"))

    (autoload-if-found '(lsp-ui-mode) "lsp-ui" nil t)

    ;; hook
    (with-eval-after-load 'lsp-mode
      (add-hook 'lsp-mode-hook #'lsp-ui-mode))

    ;; lsp-ui-doc
    (with-eval-after-load 'lsp-ui-doc
      (setq lsp-ui-doc-enable t)
      (setq lsp-ui-doc-show-with-cursor t)
      (setq lsp-ui-doc-use-webkit t)
      (setq lsp-ui-doc-include-signature t)
      (setq lsp-ui-doc-delay 1)
      (setq lsp-ui-doc-max-height 30))

    ;; lsp-ui-peek
    (autoload-if-found '(lsp-ui-peek-find-references lsp-ui-peek-find-definitions lsp-ui-peek-find-implementation) "lsp-ui-peek" nil t)
    (with-eval-after-load 'lsp-ui-peek
      (setq lsp-ui-peek-enable t)
      (setq lsp-ui-peek-peek-height 30)
      (setq lsp-ui-peek-list-width 60)
      (setq lsp-ui-peek-fontify 'on-demand))

    ;; lsp-ui-imenu
    (autoload-if-found '(lsp-ui-imenu) "lsp-ui-imenu" nil t)
    (with-eval-after-load 'lsp-ui-imenu
      (setq lsp-ui-imenu-enable nil)
      (setq lsp-ui-imenu-kind-position 'top))

    ;; lsp-ui-sideline
    (autoload-if-found '(lsp-ui-sideline-mode) "lsp-ui-sideline" nil t)
    (with-eval-after-load 'lsp-ui-sideline
      (setq lsp-ui-sideline-enable nil)
      (setq lsp-ui-sideline-show-hover t))

    ;; keybind
    (with-eval-after-load 'lsp-mode
      (define-key lsp-mode-map (kbd "C-c C-r") #'lsp-ui-peek-find-references)
      (define-key lsp-mode-map (kbd "C-c C-j") #'lsp-ui-peek-find-definitions)
      (define-key lsp-mode-map (kbd "C-c C-i") #'lsp-ui-peek-find-implementation)
      (define-key lsp-mode-map (kbd "C-c C-m") #'lsp-ui-imenu)
      (define-key lsp-mode-map (kbd "C-c C-s") #'lsp-ui-sideline-mode)
      (define-key lsp-mode-map (kbd "C-c C-d") #'lsp-ui-doc-mode)))
#+END_SRC
*** lsp-scheme
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/emacs-lsp-scheme"))

  (with-delayed-execution
    (message "Install lsp-scheme...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-lsp-scheme"))

    (autoload-if-found '(lsp-scheme) "lsp-scheme" nil t)

    (with-eval-after-load 'scheme
      ;; (add-hook 'scheme-mode-hook #'lsp-scheme)
      )

    (with-eval-after-load 'lsp-scheme
      (setq lsp-scheme-implementation "guile")))
#+end_src
*** lsp-haskell
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-lsp/lsp-haskell"))

  (with-delayed-execution
    (message "Install lsp-haskell...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lsp-haskell"))

    (autoload-if-found '(lsp) "lsp-haskell" nil t)

    (with-eval-after-load 'haskell-mode
      (add-hook 'haskell-mode-hook #'lsp)
      (add-hook 'haskell-literate-mode-hook #'lsp)))
#+end_src
*** TODO lsp-pyright
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-lsp/lsp-pyright"))

  (with-delayed-execution
    (message "Install lsp-pyright...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lsp-pyright"))

    ;; (with-eval-after-load 'python-mode
    ;;   (add-hook 'python-mode-hook #'(lambda ()
    ;;                                   (require 'lsp-pyright)
    ;;                                   (lsp))))
    )
#+end_src
*** acm-terminal
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "twlz0ne/acm-terminal"))

  (with-delayed-execution
    (message "Install acm-terminal...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/acm-terminal")))
#+end_src
*** lsp-bridge
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "manateelazycat/lsp-bridge"))

  (with-delayed-execution
    (message "Install lsp-bridge...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lsp-bridge"))

    (autoload-if-found '(lsp-bridge-mode) "lsp-bridge" nil t)

    (with-eval-after-load 'lsp-bridge
      ;; config
      (setq lsp-bridge-php-lsp-server "phpactor")

      ;; keybind
      (define-key lsp-bridge-mode-map (kbd "M-.") #'lsp-bridge-find-impl)
      (define-key lsp-bridge-mode-map (kbd "C-c C-r") #'lsp-bridge-find-references)))
#+end_src
** Mail
*** mu4e
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/mu4e"))

  (with-delayed-execution
    (message "Install mu4e...")

    (when (file-directory-p "/usr/local/share/emacs/site-lisp/mu4e")
      (add-to-list 'load-path (locate-user-emacs-file "/usr/local/share/emacs/site-lisp/mu4e")))

    (autoload-if-found '(mu4e) "mu4e" nil t)

    (with-eval-after-load 'mu4e
      (setq mail-user-agent 'mu4e-user-agent))

    (with-eval-after-load 'mu4e-update
      (setq mu4e-get-mail-command "offlineimap")
      (setq mu4e-update-interval 180)
      (setq mu4e-index-cleanup t)
      (setq mu4e-index-lazy-check nil))

    (with-eval-after-load 'mu4e-view
      (setq mu4e-split-view 'horizontal))

    (with-eval-after-load 'mu4e-folders
      (setq mu4e-maildir-shortcuts '((:maildir "/INBOX" :key ?i)
                                     (:maildir "/Emacs" :key ?e)
                                     (:maildir "/GitHub" :key ?g))))

    (with-eval-after-load 'mm-decode
      (add-to-list 'mm-discouraged-alternatives "text/html")
      (add-to-list 'mm-discouraged-alternatives "text/richtext")))
#+end_src
*** mu4e-views
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "lordpretzel/mu4e-views"))

  (with-delayed-execution
    (message "Install mu4e-views...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/mu4e-views"))

    ;; (autoload-if-found '(mu4e-views-mu4e-select-view-msg-method
    ;;                      mu4e-views-cursor-msg-view-window-down
    ;;                      mu4e-views-cursor-msg-view-window-up
    ;;                      mu4e-views-toggle-auto-view-selected-message
    ;;                      mu4e-views-mu4e-view-as-nonblocked-html
    ;;                      mu4e-views-mu4e-use-view-msg-method) "mu4e-views" nil t)

    ;; (mu4e-views-mu4e-use-view-msg-method "html")

    ;; (with-eval-after-load 'mu4e
    ;;   (define-key mu4e-headers-mode-map (kbd "v") #'mu4e-views-mu4e-select-view-msg-method)
    ;;   (define-key mu4e-headers-mode-map (kbd "M-n") #'mu4e-views-mu4e-select-view-msg-method)
    ;;   (define-key mu4e-headers-mode-map (kbd "M-p") #'mu4e-views-cursor-msg-view-window-up)
    ;;   (define-key mu4e-headers-mode-map (kbd "f") #'mu4e-views-toggle-auto-view-selected-message)
    ;;   (define-key mu4e-headers-mode-map (kbd "f") #'mu4e-views-mu4e-view-as-nonblocked-html))

    ;; (with-eval-after-load 'mu4e-view
    ;;   (setq mu4e-views-completion-method 'ivy)
    ;;   (setq mu4e-views-default-view-method "html")
    ;;   (setq mu4e-views-next-previous-message-behaviour 'stick-to-current-window)
    ;;   (setq mu4e-views-auto-view-selected-message t))
    )
#+end_src
*** mu4e-dashboard
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "rougier/mu4e-dashboard"))

  (with-delayed-execution
    (message "Install mu4e-dashboard...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/mu4e-dashboard"))

    (autoload-if-found '() "mu4e-dashboard" nil t))
#+end_src
** Minor Modes
*** command-log-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "lewang/command-log-mode"))

  (with-delayed-execution
    (message "Install command-log-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/command-log-mode"))

    (autoload-if-found '(clm/toggle-command-log-buffer) "command-log-mode" nil t)

    (defalias 'command-log #'clm/toggle-command-log-buffer))
#+end_src
** Narrowing
*** fancy-narrow
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/fancy-narrow"))

  (with-delayed-execution
    (message "Install fancy-narrow...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/fancy-narrow"))

    (autoload-if-found '(fancy-narrow-mode) "fancy-narrow" nil t)

    ;; (with-eval-after-load 'org
    ;;   (add-hook 'org-mode-hook #'fancy-narrow-mode))

    ;; (with-eval-after-load 'elisp-mode
    ;;   (add-hook 'emacs-lisp-mode-hook #'fancy-narrow-mode))

    ;; (with-eval-after-load 'lisp-mode
    ;;   (add-hook 'lisp-mode-hook #'fancy-narrow-mode))

    ;; (with-eval-after-load 'clojure-mode
    ;;   (add-hook 'clojure-mode-hook #'fancy-narrow-mode))
    )
#+end_src
*** origami
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "gregsexton/origami.el"))

  (with-delayed-execution
    (message "Install origami...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/origami"))

    (autoload-if-found '(global-origami-mode origami-recursively-toggle-node origami-recursively-toggle-node) "origami" nil t)
    (global-origami-mode)

    (global-set-key (kbd "C-c t") #'origami-recursively-toggle-node)
    (global-set-key (kbd "C-c C-t") #'origami-recursively-toggle-node))
#+end_src
** Prescient
*** prescient
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "radian-software/prescient.el"))

  (with-delayed-execution
    (message "Install prescient...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/prescient"))

    (autoload-if-found '(prescient-persist-mode) "prescient" nil t)

    (prescient-persist-mode)

    (with-eval-after-load 'prescient
      (setq prescient-aggressive-file-save t)))
#+end_src
*** ivy-prescient
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install ivy-prescient...")

    (autoload-if-found '(ivy-prescient-mode ivy-prescient-re-builder) "ivy-prescient" nil t)

    (defun my/ivy-prescient-non-fuzzy (str)
      (let ((prescient-filter-method '(literal regexp)))
        (ivy-prescient-re-builder str)))

    (with-eval-after-load 'ivy
      (add-hook 'ivy-mode-hook #'ivy-prescient-mode))

    (with-eval-after-load 'ivy-prescient
      (setq ivy-re-builders-alist
            '((counsel-ag . my/ivy-prescient-non-fuzzy)
              (counsel-rg . my/ivy-prescient-non-fuzzy)
              (counsel-pt . my/ivy-prescient-non-fuzzy)
              (counsel-grep . my/ivy-prescient-non-fuzzy)
              (counsel-imenu . my/ivy-prescient-non-fuzzy)
              (counsel-yank-pop . my/ivy-prescient-non-fuzzy)
              (swiper . my/ivy-prescient-non-fuzzy)
              (swiper-isearch . my/ivy-prescient-non-fuzzy)
              (swiper-all . my/ivy-prescient-non-fuzzy)
              (lsp-ivy-workspace-symbol . my/ivy-prescient-non-fuzzy)
              (lsp-ivy-global-workspace-symbol . my/ivy-prescient-non-fuzzy)
              (insert-char . my/ivy-prescient-non-fuzzy)
              (counsel-unicode-char . my/ivy-prescient-non-fuzzy)
              (t . ivy-prescient-re-builder)))
      (setq ivy-prescient-sort-commands
            '(:not swiper swiper-isearch ivy-switch-buffer
                   counsel-grep counsel-git-grep counsel-ag counsel-imenu
                   counsel-yank-pop counsel-recentf counsel-buffer-or-recentf))))
#+end_src
*** company-prescient
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install company-prescient...")

    (autoload-if-found '(company-prescient-mode) "company-prescient" nil t)

    (with-eval-after-load 'company
      (add-hook 'company-mode-hook #'company-prescient-mode)))
#+end_src
** Process
*** proced
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install proced...")
    (autoload-if-found '(proced) "proced" nil t)
    (add-hook 'proced-mode-hook #'(lambda () (proced-toggle-auto-update 1)))
    (with-eval-after-load 'proced
      (setq proced-auto-update-interval 10)
      (setq proced-tree-flag t)
      (setq proced-format 'long)))
#+end_src
*** proced-narrow
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "travisjeffery/proced-narrow"))

  (with-delayed-execution
    (message "Install proced-narrow...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/proced-narrow"))

    (autoload-if-found '(proced-narrow) "proced-narrow" nil t)

    (with-eval-after-load 'proced
      (define-key proced-mode-map (kbd "/") #'proced-narrow)))
#+end_src
** Project
*** projectile
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "bbatsov/projectile"))

  (with-delayed-execution-priority-high
    (message "Install projectile...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/projectile"))

    (autoload-if-found '(projectile-mode) "projectile" nil t)

    (projectile-mode +1)

    (defun my/update-projectile-known-projects ()
      (interactive)
      (setq projectile-known-projects (mapcar
                                       (lambda (x)
                                         (abbreviate-file-name (concat x "/")))
                                       (split-string (shell-command-to-string "ghq list --full-path")))))

    (with-eval-after-load 'projectile
      ;; keybind
      (global-set-key (kbd "M-p") #'projectile-command-map)
      (global-set-key (kbd "C-c p") #'projectile-command-map)

      ;; hook
      (add-hook 'projectile-mode-hook #'my/update-projectile-known-projects)

      ;; config
      (setq projectile-switch-project-action 'projectile-dired)
      (setq projectile-enable-caching t)))
#+end_src
*** counsel-projectile
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ericdanan/counsel-projectile"))

  (with-delayed-execution-priority-high
    (message "Install counsel-projectile...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/counsel-projectile"))

    (autoload-if-found '(counsel-projectile-mode) "counsel-projectile" nil t)

    (with-eval-after-load 'counsel
      (add-hook 'counsel-mode-hook #'counsel-projectile-mode))

    (with-eval-after-load 'counsel-projectile
      (setq counsel-projectile-sort-files t)
      (setq counsel-projectile-sort-projects t)
      (setq counsel-projectile-sort-buffers t)
      (setq counsel-projectile-grep-initial-input '(ivy-thing-at-point))
      (setq counsel-projectile-ag-initial-input '(ivy-thing-at-point))
      (setq counsel-projectile-rg-initial-input '(ivy-thing-at-point))))
#+end_src
** Refactor
*** emr
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "Wilfred/emacs-refactor"))

  (with-delayed-execution
    (message "Install emr...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-refactor"))

    (autoload-if-found '(emr-show-refactor-menu) "emr" nil t)

    (with-eval-after-load 'prog-mode
      (define-key prog-mode-map (kbd "M-RET") #'emr-show-refactor-menu)))
#+END_SRC
** Search
*** basic
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "abo-abo/swiper"))

  (with-delayed-execution-priority-high
    (message "Install swiper base...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/swiper")))
#+end_src
*** migemo
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-jp/migemo"))

  (with-delayed-execution
    (message "Install migemo...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/migemo"))

    (autoload-if-found '(migemo-init) "migemo" nil t)
    ;; (migemo-init)

    (with-eval-after-load 'migemo
      (setq migemo-command "cmigemo")
      (setq migemo-options '("-q" "--emacs"))
      (setq migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict")
      (setq migemo-coding-system 'utf-8-unix))

    (with-eval-after-load 'isearch
      (define-key isearch-mode-map (kbd "C-y") #'isearch-yank-kill)))
#+end_src
*** swiper
#+BEGIN_SRC emacs-lisp
  (with-delayed-execution-priority-high
    (message "Install swiper...")

    (autoload-if-found '(swiper) "swiper" nil t)

    (defun my/swiper ()
      (interactive)
      (let ((word (thing-at-point 'symbol 'no-properties)))
        (swiper word)))

    (global-set-key (kbd "C-o") #'my/swiper))
#+END_SRC
*** counsel
#+begin_src emacs-lisp
  (with-delayed-execution-priority-high
    (message "Install counsel...")

    (autoload-if-found '(counsel-mode counsel-compile) "counsel" nil t)
    (counsel-mode 1)

    (global-set-key (kbd "C-x m") #'counsel-compile)

    (with-eval-after-load 'counsel
      (setq counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)))
#+end_src
*** ivy
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install ivy...")

    (autoload-if-found '(ivy-mode ivy-read ivy-completing-read) "ivy" nil t)
    (autoload-if-found '(ivy-avy) "ivy-avy" nil t)

    (add-hook 'minibuffer-setup-hook #'ivy-mode)

    (with-eval-after-load 'ivy
      ;; config
      (setq ivy-use-virtual-buffers t)

      ;; keybind
      (define-key ivy-minibuffer-map (kbd "C-'") #'ivy-avy)
      (define-key ivy-minibuffer-map (kbd "C-h") #'delete-backward-char)
      (define-key ivy-minibuffer-map (kbd "M-h") #'backward-kill-word)))
#+end_src
*** ivy-rich
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "Yevgnen/ivy-rich"))

  (with-delayed-execution
    (message "Install ivy-rich...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ivy-rich"))

    (autoload-if-found '(ivy-rich-mode) "ivy-rich" nil t)
    (ivy-rich-mode 1)

    (with-eval-after-load 'ivy-rich
      (setq ivy-rich-path-style 'abbrev)))
#+END_SRC
*** ivy-migemo
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ROCKTAKEY/ivy-migemo"))

  (with-delayed-execution
    (message "Install ivy-migemo...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ivy-migemo"))

    (autoload-if-found '(ivy-migemo-toggle-fuzzy ivy-migemo-toggle-migemo) "ivy-migemo" nil t)

    (with-eval-after-load 'ivy
      (define-key ivy-minibuffer-map (kbd "M-f") #'ivy-migemo-toggle-fuzzy)
      (define-key ivy-minibuffer-map (kbd "M-m") #'ivy-migemo-toggle-migemo)))
#+end_src
** Shell
*** comint-mode
#+begin_src emacs-lisp
  (with-eval-after-load 'comint-mode
    (define-key comint-mode-map (kbd "C-h") #'delete-backward-char))
#+end_src
*** exec-path-from-shell
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "purcell/exec-path-from-shell"))

  (with-delayed-execution-priority-high
    (message "Install exec-path-from-shell...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/exec-path-from-shell"))

    (autoload-if-found '(exec-path-from-shell-initialize) "exec-path-from-shell")
    (exec-path-from-shell-initialize)

    (with-eval-after-load 'exec-path-from-shell
      (setq exec-path-from-shell-variables '("PATH"
                                             "GEM_HOME"
                                             "GOROOT"
                                             "GOPATH"
                                             "LSP_USE_PLISTS"
                                             "TERM"
                                             "SSH_AUTH_SOCK"
                                             "NATIVE_FULL_AOT"
                                             "GPG_TTY"))))
#+END_SRC
** Snippet
*** yasnippet
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "joaotavora/yasnippet"))

  (with-delayed-execution
    (message "Install yasnippet...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/yasnippet"))

    (autoload-if-found '(yas-global-mode) "yasnippet" nil t)

    (yas-global-mode 1))
#+end_src
*** yasnippet-org
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/yasnippet-org"))

  (with-delayed-execution
    (message "Install yasnippet-org...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/yasnippet-org"))

    (autoload-if-found '(yasnippet-org) "yasnippet-org" nil t)

    (with-eval-after-load 'yasnippet-org
      (setq yasnippet-org-verbose t)))
#+end_src
*** ivy-yasnippet
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "mkcms/ivy-yasnippet"))

  (with-delayed-execution
    (message "Install ivy-yasnippet...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ivy-yasnippet"))

    (autoload-if-found '(ivy-yasnippet) "ivy-yasnippet" nil t)

    (global-set-key (kbd "C-c y") #'ivy-yasnippet)
    (global-set-key (kbd "C-c C-y") #'ivy-yasnippet))
#+end_src
** Statistics
*** esup
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "jschaf/esup"))

  (with-delayed-execution
    (message "Install esup...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/esup"))

    (autoload-if-found '(esup) "esup" nil t))
#+END_SRC
*** explain-pause-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "lastquestion/explain-pause-mode"))

  (with-delayed-execution
    (message "Install explain-pause-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/explain-pause-mode"))

    (autoload-if-found '(explain-pause-mode) "explain-pause-mode" nil t))
#+end_src
*** disk-usage
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-straight/disk-usage"))

  (with-delayed-execution
    (message "Install disk-usage...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/disk-usage"))

    (autoload-if-found '(disk-usage disk-usage-here) "disk-usage" nil t))
#+end_src
*** keyfreq
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "dacap/keyfreq"))

  (with-delayed-execution
    (message "Install keyfreq...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/keyfreq"))

    (autoload-if-found '(keyfreq-mode keyfreq-autosave-mode) "keyfreq" nil t)

    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+end_src
*** uptimes
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "davep/uptimes.el"))

  (with-delayed-execution
    (message "Install uptimes...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/uptimes"))

    (autoload-if-found '(uptimes) "uptimes" nil t))
#+end_src
** Syntax
*** syntax-subword
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jpkotta/syntax-subword"))

  (with-delayed-execution
    (message "Install syntax-subword...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/syntax-subword"))

    (autoload-if-found '(global-syntax-subword-mode) "syntax-subword" nil t)

    (global-syntax-subword-mode))
#+end_src
** System
*** symon
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "zk-phi/symon"))

  (with-delayed-execution
    (message "Install symon...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/symon"))

    (autoload-if-found '(symon-mode) "symon" nil t)

    (when-guix
     (symon-mode)))
#+end_src
** Tab
*** tab-bar
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install tab-bar...")
    (autoload-if-found '(tab-bar-mode
                         tab-bar-history-mode
                         tab-previous
                         tab-next) "tab-bar" nil t)

    (tab-bar-history-mode)

    (global-set-key (kbd "C-x C-t") tab-prefix-map)
    (global-set-key (kbd "M-[") #'tab-previous)
    (global-set-key (kbd "M-]") #'tab-next)

    (with-eval-after-load 'tab-bar
      (setq tab-bar-close-button-show nil)
      (setq tab-bar-close-last-tab-choice nil)
      (setq tab-bar-close-tab-select 'left)
      (setq tab-bar-history-mode nil)
      (setq tab-bar-new-tab-choice "*scratch*")
      (setq tab-bar-new-button-show nil)
      (setq tab-bar-tab-name-truncated-max 12)
      (setq tab-bar-separator " | "))

    (defun my/advice-completing-read-to-ivy (orig-func &rest args)
      (interactive
       (let* ((recent-tabs (mapcar (lambda (tab)
                                     (alist-get 'name tab))
                                   (tab-bar--tabs-recent))))
         (list (ivy-completing-read "Switch to tab by name (default recent): "
                                    recent-tabs nil nil nil nil recent-tabs))))
      (apply orig-func args))

    (defun my/tab-bar-rename-tab ()
      (interactive)
      (let ((proj-name (projectile-project-name)))
        (tab-bar-rename-tab proj-name)))

    (with-eval-after-load 'tab-bar
      ;; switch tab with ivy
      (advice-add #'tab-bar-switch-to-tab :around #'my/advice-completing-read-to-ivy)

      ;; rename tab-bar with projectile
      (define-key tab-prefix-map (kbd "r") #'my/tab-bar-rename-tab)

      ;; close neotree when tab bar action
      (advice-add 'tab-new :before #'(lambda (&rest _) (neotree-hide)))
      (advice-add 'tab-next :before #'(lambda (&rest _) (neotree-hide)))
      (advice-add 'tab-bar-switch-to-tab :before #'(lambda (&rest _) (neotree-hide)))

      ;; hook
      (add-hook 'tab-bar-mode-hook #'(lambda () (display-line-numbers-mode -1)))))
#+end_src
** Template
*** auto-insert
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install autoinsert...")
    (autoload-if-found '(auto-insert-mode define-auto-insert) "autoinsert" nil t)
    (auto-insert-mode)
    (define-auto-insert "\.php" "template.php")
    (with-eval-after-load 'autoinsert
      (setq auto-insert-directory "~/.emacs.d/auto-insert")))
#+end_src
** Theme
*** all-the-icons
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "domtronn/all-the-icons.el"))

  (with-delayed-execution-priority-high
    (message "Install all-the-icons...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/all-the-icons")))
#+END_SRC
*** all-the-icons-dired
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jtbm37/all-the-icons-dired"))

  (with-delayed-execution
    (message "Install all-the-icons-dired...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/all-the-icons-dired"))

    (autoload-if-found '(all-the-icons-dired-mode) "all-the-icons-dired")

    (with-eval-after-load 'dired
      (add-hook 'dired-mode-hook #'all-the-icons-dired-mode)))
#+end_src
*** all-the-icons-ivy-rich
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "seagle0128/all-the-icons-ivy-rich"))

  (with-delayed-execution
    (message "Install all-the-icons-ivy-rich...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/all-the-icons-ivy-rich"))

    (autoload-if-found '(all-the-icons-ivy-rich-mode) "all-the-icons-ivy-rich" nil t)

    (all-the-icons-ivy-rich-mode 1)

    (with-eval-after-load 'all-the-icons-ivy-rich
      (setq all-the-icons-ivy-rich-icon t)
      (setq all-the-icons-ivy-rich-color-icon t)
      (setq all-the-icons-ivy-rich-icon-size 1.0)
      (setq all-the-icons-ivy-rich-project t)
      (setq all-the-icons-ivy-rich-field-width 80)))
#+end_src
*** dashboard
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-dashboard/emacs-dashboard"))

  (with-delayed-execution
    (message "Install dashboard...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-dashboard"))

    (autoload-if-found '(dashboard-refresh-buffer) "dashboard" nil t)

    (with-eval-after-load 'dashboard
      (setq dashboard-startup-banner 'logo)
      (setq dashboard-set-file-icons t)
      (setq dashboard-startup-banner 4)
      (setq dashboard-items '((recents . 10)))))
#+end_src
*** dimmer
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "gonewest818/dimmer.el"))

  (with-eval-after-load 'dimmer
    (message "Install dimmer...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dimmer"))

    (autoload-if-found '(dimmer-configure-which-key
                         dimmer-configure-org
                         dimmer-configure-company-box
                         dimmer-mode)
                       "dimmer" nil t)

    (dimmer-configure-which-key)
    (dimmer-configure-org)
    (dimmer-configure-company-box)
    (dimmer-mode t))
#+end_src
*** doom-themes
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "doomemacs/themes"
              :load-paths `(,(locate-user-emacs-file "el-clone/themes/extensions"))))

  (with-delayed-execution-priority-high
    (message "Install doom-themes...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/themes"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/themes/extensions"))

    (autoload-if-found '(doom-themes-enable-org-fontification) "doom-themes-ext-org" nil t)
    (autoload-if-found '(doom-themes-neotree-config) "doom-themes-ext-neotree" nil t)

    (doom-themes-enable-org-fontification)
    (doom-themes-neotree-config)

    (when (require 'doom-themes)
      (load-theme 'doom-dracula t))

    (with-eval-after-load 'doom-themes
      (setq doom-themes-padded-modeline t)
      (setq doom-themes-enable-bold t)
      (setq doom-themes-enable-italic t)))
#+END_SRC
*** doom-modeline
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "seagle0128/doom-modeline"))

  (with-delayed-execution-priority-high
    (message "Install doom-modeline...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/doom-modeline"))

    (autoload-if-found '(doom-modeline-mode) "doom-modeline" nil t)

    (doom-modeline-mode 1)
    (line-number-mode 0)
    (column-number-mode 0)

    (with-eval-after-load 'doom-modeline
      (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
      (setq doom-modeline-icon t)
      (setq doom-modeline-major-mode-icon t)
      (setq doom-modeline-minor-modes nil)))
#+END_SRC
*** emojify
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "iqbalansari/emacs-emojify"))

  (with-delayed-execution
    (message "Install emojify...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-emojify"))

    (autoload-if-found '(emojify-mode) "emojify" nil t))
#+end_src
*** hl-line
#+BEGIN_SRC emacs-lisp
  (with-delayed-execution
    (message "Install hl-line...")
    (autoload-if-found '(global-hl-line-mode) "hl-line-mode" nil t)
    (when (not window-system)
      (global-hl-line-mode))
    (with-eval-after-load 'hl-line
      (set-face-attribute 'hl-line nil :inherit nil)
      (set-face-background 'hl-line "#444642")))
#+END_SRC
*** idle-highlight-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "nonsequitur/idle-highlight-mode"))

  (with-delayed-execution
    (message "Install idle-highlight-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/idle-highlight-mode"))

    (autoload-if-found '(idle-highlight-mode) "idle-highlight-mode" nil t)

    (with-eval-after-load 'idle-highlight-mode
      (setq idle-highlight-idle-time 0.1))

    (with-eval-after-load 'prog-mode
      (add-hook 'prog-mode-hook #'idle-highlight-mode)))
#+end_src
*** neotree
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "jaypei/emacs-neotree"))

  (with-delayed-execution
    (message "Install neotree...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-neotree"))

    (autoload-if-found '(neotree-hide neotree-dir) "neotree" nil t)

    (defun my/neotree-toggle ()
      (interactive)
      (let ((default-directory (locate-dominating-file default-directory ".git")))
        (if (and (fboundp 'neo-global--window-exists-p)
                 (neo-global--window-exists-p))
            (neotree-hide)
          (neotree-dir default-directory))))

    (if window-system
        (defun neo-buffer--insert-fold-symbol (name &optional file-name)
          (or
           (and
            (equal name 'open)
            (insert
             (format " %s "
                     (all-the-icons-icon-for-dir file-name "down"))))
           (and
            (equal name 'close)
            (insert
             (format " %s "
                     (all-the-icons-icon-for-dir file-name "right"))))
           (and
            (equal name 'leaf)
            (insert
             (format " %s "
                     (all-the-icons-icon-for-file file-name)))))))

    (global-set-key (kbd "C-q") #'my/neotree-toggle)

    (with-eval-after-load 'neotree
      ;; config
      (setq neo-autorefresh nil)
      (setq neo-theme 'nerd2)
      (setq neo-show-hidden-files t)
      (setq neo-window-fixed-size nil)

      ;; hook
      (add-hook 'neotree-mode-hook #'(lambda () (display-line-numbers-mode -1)))))
#+END_SRC
*** nyan-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "TeMPOraL/nyan-mode"))

  (with-delayed-execution-priority-high
    (message "Install nyan-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nyan-mode"))

    (autoload-if-found '(nyan-mode) "nyan-mode" nil t)

    (nyan-mode)

    (with-eval-after-load 'nyan-mode
      (setq nyan-cat-face-number 5)
      (setq nyan-animate-nyancat t)))
#+END_SRC
*** volatile-highlights
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "k-talo/volatile-highlights.el"))

  (with-delayed-execution
    (message "Install volatile-highlights...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/volatile-highlights"))

    (autoload-if-found '(volatile-highlights-mode) "volatile-highlights" nil t)

    (volatile-highlights-mode t))
#+end_src
*** idle-highlight-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "nonsequitur/idle-highlight-mode"))

  (with-delayed-execution
    (message "Install idle-highlight-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/idle-highlight-mode"))

    (autoload-if-found '(idle-highlight-mode) "idle-highlight-mode" nil t)

    (with-eval-after-load 'prog-mode
      (add-hook 'prog-mode-hook #'idle-highlight-mode))

    (with-eval-after-load 'idle-highlight-mode
      (setq idle-highlight-idle-time 0.1)))
#+end_src
** Undo
*** undo-tree
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "apchamberlain/undo-tree.el"))

  (with-delayed-execution
    (message "Install undo-tree...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/undo-tree"))

    (autoload-if-found '(global-undo-tree-mode) "undo-tree" nil t)
    (global-undo-tree-mode)

    (with-eval-after-load 'undo-tree
      (setq undo-tree-auto-save-history nil)))
#+end_src
** View Mode
*** view-mode
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install view-mode...")

    (defun my/org-view-next-heading ()
      (interactive)
      (if (and (derived-mode-p 'org-mode)
               (org-at-heading-p))
          (org-next-visible-heading 1)
        (next-line)))

    (defun my/org-view-previous-heading ()
      (interactive)
      (if (and (derived-mode-p 'org-mode)
               (org-at-heading-p))
          (org-previous-visible-heading 1)
        (previous-line)))

    (defun my/view-tab ()
      (interactive)
      (when (and (derived-mode-p 'org-mode)
                 (or (org-at-heading-p)
                     (org-at-property-drawer-p)))
        (let ((view-mode nil))
          (org-cycle))))

    (defun my/view-shifttab ()
      (interactive)
      (when (derived-mode-p 'org-mode)
        (let ((view-mode nil))
          (org-shifttab))))

    (defun my/org-edit-special ()
      (interactive)
      (when (derived-mode-p 'org-mode)
        (view-mode -1)
        (org-edit-special)))

    (defun my/org-ctrl-c-ctrl-c ()
      (interactive)
      (when (derived-mode-p 'org-mode)
        (view-mode -1)
        (org-ctrl-c-ctrl-c)))

    (defvar my/view-mode-timer nil)
    (defun my/enable-view-mode-automatically ()
      (if view-mode
          (when my/view-mode-timer
            (cancel-timer my/view-mode-timer))
        (setq my/view-mode-timer (run-with-idle-timer (* 60 10) nil #'view-mode))))

    (add-hook 'view-mode-hook #'my/enable-view-mode-automatically)
    (advice-add 'view--disable :before #'(lambda (&rest _) (view-lock-mode -1)))

    (with-eval-after-load 'files
      (add-hook 'find-file-hooks #'view-mode))

    (with-eval-after-load "view"
      (define-key view-mode-map (kbd "f") #'forward-char)
      (define-key view-mode-map (kbd "b") #'backward-char)
      (define-key view-mode-map (kbd "n") #'my/org-view-next-heading)
      (define-key view-mode-map (kbd "p") #'my/org-view-previous-heading)
      (define-key view-mode-map (kbd "@") #'set-mark-command)
      (define-key view-mode-map (kbd "C-c '") #'my/org-edit-special)
      (define-key view-mode-map (kbd "C-c C-C") #'my/org-ctrl-c-ctrl-c)
      (define-key view-mode-map (kbd "e") nil)
      (define-key view-mode-map (kbd "C-j") nil)
      (define-key view-mode-map (kbd "C-i") #'my/view-tab)
      (define-key view-mode-map (kbd "S-C-i") #'my/view-shifttab)))
#+end_src
*** view-lock-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "s-fubuki/view-lock-mode"))

  (with-delayed-execution
    (message "Install view-lock-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/view-lock-mode"))

    (autoload-if-found '(view-lock-timer-setup view-lock-quit) "view-lock-mode" nil t)

    (with-eval-after-load 'view
      (add-hook 'view-mode-hook #'view-lock-timer-setup))

    (with-eval-after-load 'view-lock-mode
      (setq view-lock-start-time (* 30 60))))
#+end_src
** Password
*** password-store
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "stuartsierra/password-store"))

  (with-delayed-execution
    (message "Install password-store...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/password-store/contrib/emacs"))
    (autoload-if-found '(password-store-version) "password-store" nil t))
#+end_src
*** password-store-otp
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "volrath/password-store-otp.el"))

  (with-delayed-execution
    (message "Install password-store-otp...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/password-store-otp"))
    (autoload-if-found '() "password-store-otp" nil t))
#+end_src
*** pass
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "NicolasPetton/pass"))

  (with-delayed-execution
    (message "Install pass...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/pass"))
    (autoload-if-found '(pass) "pass" nil t))
#+end_src
** Utility
*** comint
#+begin_src emacs-lisp
  (with-eval-after-load 'comint
    (setq comint-buffer-maximum-size 100000)
    (setq comint-prompt-read-only t)
    (setq comint-terminfo-terminal "eterm-256color"))
#+end_src
*** crux
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "bbatsov/crux"))

  (with-delayed-execution
    (message "Install crux...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/crux"))

    (autoload-if-found '(crux-open-with
                         crux-smart-open-line-above
                         crux-cleanup-buffer-or-region
                         crux-view-url
                         crux-transpose-windows
                         crux-duplicate-current-line-or-region
                         crux-duplicate-and-comment-current-line-or-region
                         crux-rename-file-and-buffer
                         crux-visit-term-buffer
                         crux-kill-other-buffers
                         crux-indent-defun
                         crux-top-join-lines
                         crux-kill-line-backwards) "crux" nil t)

    ;; keybind
    (global-set-key (kbd "C-c o") #'crux-open-with)
    (global-set-key (kbd "C-S-o") #'crux-smart-open-line-above)
    ;; (global-set-key (kbd "C-c n") #'crux-cleanup-buffer-or-region)
    (global-set-key (kbd "C-c u") #'crux-view-url)
    (global-set-key (kbd "C-x 4 t") #'crux-transpose-windows)
    (global-set-key (kbd "C-c d") #'crux-duplicate-current-line-or-region)
    (global-set-key (kbd "C-c M-d") #'crux-duplicate-and-comment-current-line-or-region)
    (global-set-key (kbd "C-c r") #'crux-rename-file-and-buffer)
    (global-set-key (kbd "C-c M-t") #'crux-visit-term-buffer)
    (global-set-key (kbd "C-c k") #'crux-kill-other-buffers)
    (global-set-key (kbd "C-M-z") #'crux-indent-defun)
    (global-set-key (kbd "C-^") #'crux-top-join-lines)
    (global-set-key (kbd "C-DEL") #'crux-kill-line-backwards))
#+end_src
*** delsel
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install delsel...")
    (autoload-if-found '(delete-selection-mode) "delsel" nil t)
    (delete-selection-mode))
#+end_src
*** dogears
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "alphapapa/dogears.el"))

  (with-delayed-execution
    (message "Install dogears...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dogears"))

    (autoload-if-found '(dogears-go
                         dogears-back
                         dogears-forward
                         dogears-list
                         dogears-sidebar) "dogears" nil t)

    ;; keybind
    (global-set-key (kbd "M-g d") #'dogears-go)
    (global-set-key (kbd "M-g M-b") #'dogears-back)
    (global-set-key (kbd "M-g M-f") #'dogears-forward)
    (global-set-key (kbd "M-g M-d") #'dogears-list)
    (global-set-key (kbd "M-g M-D") #'dogears-sidebar))
#+end_src
*** embark
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "oantolin/embark"))

  (with-delayed-execution
    (message "Install embark...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/embark"))

    (autoload-if-found '(embark-act embark-dwim embark-prefix-help-command) "embark" nil t)

    (global-set-key (kbd "C-.") #'embark-act)
    (global-set-key (kbd "C-;") #'embark-dwim)
    (global-set-key (kbd "C-h B") #'embark-prefix-help-command)

    (defmacro my/embark-ace-action (fn)
      `(defun ,(intern (concat "my/embark-ace-" (symbol-name fn))) ()
         (interactive)
         (with-demoted-errors "%s"
           (aw-switch-to-window (aw-select nil))
           (call-interactively (symbol-function ',fn)))))

    (defmacro my/embark-split-action (fn split-type)
      `(defun ,(intern (concat "my/embark-"
                               (symbol-name fn)
                               "-"
                               (car (last (split-string
                                           (symbol-name split-type) "-"))))) ()
         (interactive)
         (funcall #',split-type)
         (call-interactively #',fn)))

    (defun my/sudo-find-file (file)
      "Open FILE as root."
      (interactive "FOpen file as root: ")
      (when (file-writable-p file)
        (user-error "File is user writeable, aborting sudo"))
      (find-file (if (file-remote-p file)
                     (concat "/" (file-remote-p file 'method) ":"
                             (file-remote-p file 'user) "@" (file-remote-p file 'host)
                             "|sudo:root@"
                             (file-remote-p file 'host) ":" (file-remote-p file 'localname))
                   (concat "/sudo:root@localhost:" file))))

    (with-eval-after-load 'embark
      (setq embark-mixed-indicator-delay 0.1)
      (setq prefix-help-command #'embark-prefix-help-command)

      ;; ace-window
      (define-key embark-file-map     (kbd "o") (my/embark-ace-action find-file))
      (define-key embark-buffer-map   (kbd "o") (my/embark-ace-action switch-to-buffer))
      (define-key embark-bookmark-map (kbd "o") (my/embark-ace-action bookmark-jump))

      ;; split window(2)
      (define-key embark-file-map     (kbd "2") (my/embark-split-action find-file split-window-below))
      (define-key embark-buffer-map   (kbd "2") (my/embark-split-action switch-to-buffer split-window-below))
      (define-key embark-bookmark-map (kbd "2") (my/embark-split-action bookmark-jump split-window-below))

      ;; split window(3)
      (define-key embark-file-map     (kbd "3") (my/embark-split-action find-file split-window-right))
      (define-key embark-buffer-map   (kbd "3") (my/embark-split-action switch-to-buffer split-window-right))
      (define-key embark-bookmark-map (kbd "3") (my/embark-split-action bookmark-jump split-window-right))

      ;; sudo
      (define-key embark-file-map (kbd "S") #'my/sudo-find-file)))
#+end_src
*** goto-addr
#+BEGIN_SRC emacs-lisp
  (with-delayed-execution
    (message "Install goto-addr...")
    (autoload-if-found '(goto-address-prog-mode goto-address-mode) "goto-address" nil t)

    (with-eval-after-load 'prog-mode
      (add-hook 'prog-mode-hook #'goto-address-prog-mode))

    (with-eval-after-load 'text-mode
      (add-hook 'text-mode-hook #'goto-address-mode)))
#+END_SRC
*** htmlize
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "hniksic/emacs-htmlize"))

  (with-delayed-execution
    (message "Install htmlize...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-htmlize"))

    (with-eval-after-load 'htmlize
      (setq htmlize-html-charset 'utf-8)))
#+end_src
*** midnight
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install midnight...")
    (autoload-if-found '(midnight-mode) "midnight" nil t)
    (midnight-mode)
    (with-eval-after-load 'midnight
      (setq clean-buffer-list-delay-general 1)))
#+end_src
*** minimap
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "dengste/minimap"))

  (with-delayed-execution
    (message "Install minimap...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/minimap"))

    (autoload-if-found '(minimap-mode) "minimap" nil t)

    (global-set-key (kbd "C-c m") #'minimap-mode)

    (with-eval-after-load 'minimap
      (setq minimap-window-location 'right)
      (setq minimap-update-delay 0.2)
      (setq minimap-minimum-width 20)
      (setq minimap-major-modes '(prog-mode org-mode))))
#+end_src
*** puni
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "AmaiKinono/puni"))

  (with-delayed-execution
    (message "Install puni...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/puni"))

    (autoload-if-found '(puni-global-mode puni-disable-puni-mode) "puni" nil t)
    (puni-global-mode)

    (with-eval-after-load 'lisp-mode
      (add-hook 'lisp-mode-hook #'puni-disable-puni-mode))

    (with-eval-after-load 'emacs-lisp-mode
      (add-hook 'emacs-lisp-mode-hook #'puni-disable-puni-mode))

    (with-eval-after-load 'clojure-mode
      (add-hook 'clojure-mode-hook #'puni-disable-puni-mode))

    (with-eval-after-load 'lisp-interaction-mode
      (add-hook 'lisp-interacton-mode-hook #'puni-disable-puni-mode))

    (with-eval-after-load 'scheme
      (add-hook 'scheme-mode-hook #'puni-disable-puni-mode))

    (with-eval-after-load 'minibuffer
      (add-hook 'minibuffer-mode-hook #'puni-disable-puni-mode)))
#+end_src
*** quickrun
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/quickrun"))

  (with-delayed-execution
    (message "Install quickrun...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/quickrun"))

    (autoload-if-found '(quickrun) "quickrun" nil t))
#+end_src
*** restclient
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "pashky/restclient.el"))

  (with-delayed-execution
    (message "Install restclient...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/restclient"))

    (autoload-if-found '(restclient-mode) "restclient" nil t))
#+end_src
*** smartparens
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "Fuco1/smartparens"))

  (with-delayed-execution
    (message "Install smartparens...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/smartparens"))

    (with-eval-after-load 'smartparens))
#+END_SRC
*** smart-jump
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jojojames/smart-jump"))

  (with-delayed-execution
    (message "Install smart-jump...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/smart-jump"))

    (with-eval-after-load 'smart-jump))
#+end_src
*** string-inflection
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "akicho8/string-inflection"))

  (with-delayed-execution
    (message "Install string-inflection...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/string-inflection"))

    (autoload-if-found '(string-inflection-all-cycle) "string-inflection" nil t))
#+end_src
*** sudo-edit
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "nflath/sudo-edit"))

  (with-delayed-execution
    (message "Install sudo-edit...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/sudo-edit"))

    (autoload-if-found '(sudo-edit-current-file) "sudo-edit" nil t))
#+end_src
*** topsy
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "alphapapa/topsy.el"))

  (with-delayed-execution
    (message "Install topsy...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/topsy"))

    (autoload-if-found '(topsy-mode) "topsy" nil t)
    ;; (with-eval-after-load 'prog-mode
    ;;   (add-hook 'prog-mode-hook #'topsy-mode))

    ;; (with-eval-after-load 'lsp-ui-mode
    ;;   (add-hook 'lsp-ui-mode-hook #'(lambda () (topsy-mode -1))))
    )
#+end_src
*** uuid
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "nicferrier/emacs-uuid"))

  (with-delayed-execution
    (message "Install uuid...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-uuid"))

    (autoload-if-found '(uuid-string) "uuid" nil t)

    (defun my/uuid ()
      (interactive)
      (insert (uuid-string)))

    (defalias 'uuid #'my/uuid))
#+end_src
*** woman
#+begin_src emacs-lisp
  (with-delayed-execution
    (autoload-if-found '(woman woman-find-file) "woman" nil t))
#+end_src
** Window
*** ace-window
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "abo-abo/ace-window"))

  (with-delayed-execution
    (message "Install ace-window...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ace-window"))

    (autoload-if-found '(ace-window) "ace-window" nil t)

    (global-set-key (kbd "C-x o") #'ace-window)

    (with-eval-after-load 'ace-window
      (setq aw-dispatch-always t)
      (setq aw-scope 'frame)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (setq aw-minibuffer-flag t)))
#+end_src
*** writeroom-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "joostkremers/writeroom-mode"))

  (with-delayed-execution
    (message "Install writeroom-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/writeroom-mode"))

    (autoload-if-found '(writeroom-mode
                         writeroom-decrease-width
                         writeroom-increase-width
                         writeroom-adjust-width
                         writeroom-width)
                       "writeroom-mode" nil t)

    (with-eval-after-load 'writeroom-mode
      (define-key writeroom-mode-map (kbd "C-M-<") #'writeroom-decrease-width)
      (define-key writeroom-mode-map (kbd "C-M->") #'writeroom-increase-width)
      (define-key writeroom-mode-map (kbd "C-M-=") #'writeroom-adjust-width)
      (setq writeroom-width 200)
      (setq writeroom-maximize-window nil)))
#+end_src
*** zoom-window
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/zoom-window"))

  (with-delayed-execution
    (message "Install zoom-window...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/zoom-window"))

    (autoload-if-found '(zoom-window-zoom) "zoom-window" nil t)

    (global-set-key (kbd "C-c C-z") #'zoom-window-zoom))
#+end_src
* Language Specific
** Basic Lisp
*** paredit
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/paredit"))

  (with-delayed-execution
    (message "Install paredit...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/paredit"))

    (autoload-if-found '(enable-paredit-mode
                         paredit-forward-slurp-sexp
                         paredit-splice-sexp
                         paredit-define-keys)
                       "paredit" nil t)

    (global-set-key (kbd "C-c f") #'paredit-forward-slurp-sexp)
    (global-set-key (kbd "M-s") #'paredit-splice-sexp)

    (with-eval-after-load 'paredit
      (add-hook 'paredit-mode-hook #'paredit-define-keys))

    (with-eval-after-load 'lisp-mode
      (add-hook 'lisp-mode-hook #'enable-paredit-mode)
      (add-hook 'lisp-data-mode-hook #'enable-paredit-mode))

    (with-eval-after-load 'emacs-lisp-mode
      (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode))

    (with-eval-after-load 'clojure-mode
      (add-hook 'clojure-mode-hook #'enable-paredit-mode))

    (with-eval-after-load 'lisp-interaction-mode
      (add-hook 'lisp-interacton-mode-hook #'enable-paredit-mode))

    (with-eval-after-load 'scheme
      (add-hook 'scheme-mode-hook #'enable-paredit-mode))

    (with-eval-after-load 'simple
      (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)))
#+END_SRC
*** rainbow-delimiter
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "Fanael/rainbow-delimiters"))

  (with-delayed-execution
    (message "Install rainbow-delimiters...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/rainbow-delimiters"))

    (autoload-if-found '(rainbow-delimiters-mode-enable) "rainbow-delimiters" nil t)

    (with-eval-after-load 'lisp-mode
      (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode-enable))

    (with-eval-after-load 'emacs-lisp-mode
      (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode-enable))

    (with-eval-after-load 'clojure-mode
      (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode-enable))

    (with-eval-after-load 'scheme
      (add-hook 'scheme-mode-hook #'rainbow-delimiters-mode-enable)))
#+END_SRC
** Common Lisp
*** slime
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "slime/slime"
              :load-paths `(,(locate-user-emacs-file "el-clone/slime/lib")
                            ,(locate-user-emacs-file "el-clone/slime/contrib")
                            ,(locate-user-emacs-file "el-clone/slime/swank"))))

  (with-delayed-execution
    (message "Install slime...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/slime"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/slime/lib"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/slime/contrib"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/slime/swank"))

    (require 'slime)
    (slime-setup '(slime-repl slime-fancy slime-banner slime-indentation))

    (when-darwin
     (defun my/roswell-configdir ()
       (substring (shell-command-to-string "/usr/local/bin/ros roswell-internal-use version confdir") 0 -1))

     (defun my/roswell-opt (var)
       (with-temp-buffer
         (insert-file-contents (concat (my/roswell-configdir) "config"))
         (goto-char (point-min))
         (re-search-forward (concat "^" var "\t[^\t]+\t\\(.*\\)$"))
         (match-string 1)))

     (defun my/roswell-directory (type)
       (concat
        (my/roswell-configdir)
        "lisp/"
        type
        "/"
        (my/roswell-opt (concat type ".version"))
        "/"))

     (with-eval-after-load 'slime
       (setq slime-path `,(expand-file-name "swank-loader.lisp" (my/roswell-directory "slime")))
       (setq slime-backend `,(expand-file-name "swank-loader.lisp" (my/roswell-directory "slime")))
       (setq inferior-lisp-program "ros -Q run")))

    (when-guix
     (with-eval-after-load 'slime
       (setq inferior-lisp-program "sbcl")))

    (defun my/slime-history ()
      (interactive)
      (if (and (fboundp '-distinct)
               (fboundp 'f-read-text))
          (insert
           (completing-read
            "choice history: "
            (-distinct (read (f-read-text "~/.slime-history.eld")))))))

    (with-eval-after-load 'slime-repl
      (define-key slime-repl-mode-map (kbd "C-c C-r") #'my/slime-history)))
#+END_SRC
*** slime-company
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "anwyn/slime-company"))

  (with-delayed-execution
    (message "Install slime-company...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/slime-company"))

    (autoload-if-found '(company-slime) "slime-company" nil t)

    (with-eval-after-load 'company
      (push 'company-slime company-backends)))
#+end_src
*** hyperspec
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install hyperspec...")
    (autoload-if-found '(hyperspec-lookup) "hyperspec" nil t)

    (defadvice common-lisp-hyperspec (around common-lisp-hyperspec-around activate)
      (let ((buf (current-buffer)))
        ad-do-it
        (switch-to-buffer buf)
        (pop-to-buffer "*eww*")))

    (defadvice common-lisp-hyperspec-lookup-reader-macro (around common-lisp-hyperspec-lookup-reader-macro-around activate)
      (let ((buf (current-buffer)))
        ad-do-it
        (switch-to-buffer buf)
        (pop-to-buffer "*eww*")))

    (defadvice common-lisp-hyperspec-format (around common-lisp-hyperspec-format activate)
      (let ((buf (current-buffer)))
        ad-do-it
        (switch-to-buffer buf)
        (pop-to-buffer "*eww*")))

    (with-eval-after-load 'hyperspec
      (setq common-lisp-hyperspec--reader-macros nil)
      (setq common-lisp-hyperspec--format-characters nil))

    (with-eval-after-load 'lisp-mode
      (define-key lisp-mode-map (kbd "C-c h") #'hyperspec-lookup)))
#+end_src
** Emacs Lisp
*** eros
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "xiongtx/eros"))

  (with-delayed-execution
    (message "Install eros...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/eros"))

    (autoload-if-found '(eros-mode) "eros" nil t)

    (eros-mode))
#+end_src
*** eldoc
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install eldoc...")
    (autoload-if-found '(turn-on-eldoc-mode) "eldoc" nil t)

    (with-eval-after-load 'elisp-mode
      (add-hook 'emacs-lisp-mode-hook #'turn-on-eldoc-mode)
      (add-hook 'lisp-interaction-mode-hook #'turn-on-eldoc-mode))

    (with-eval-after-load 'ielm
      (add-hook 'ielm-mode-hook #'turn-on-eldoc-mode)))
#+end_src
*** trinary
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-elsa/trinary-logic"))

  (with-delayed-execution
    (message "Install trinary...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/trinary-logic")))
#+end_src
*** elsa
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-elsa/Elsa"))

  (with-delayed-execution
    (message "Install elsa...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/Elsa"))
    (autoload-if-found '() "elsa" nil t))
#+end_src
*** lispxmp
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/lispxmp"))

  (with-delayed-execution
    (message "Install lispxmp...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lispxmp"))

    (autoload-if-found '(lispxmp) "lispxmp" nil t))
#+end_src
*** macrostep
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "joddie/macrostep"))

  (with-delayed-execution
    (message "Install macrostep...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/macrostep"))

    (autoload-if-found '(macrostep-expand macrostep-mode) "macrostep" nil t)

    (with-eval-after-load 'elisp-mode
      (define-key emacs-lisp-mode-map (kbd "C-c e") #'macrostep-expand)))
#+end_src
*** elisp-slime-nav
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "purcell/elisp-slime-nav"))

  (with-delayed-execution
    (message "Install eslisp-slime-nav...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/elisp-slime-nav"))

    (autoload-if-found '(elisp-slime-nav-mode) "elisp-slime-nav" nil t)

    (with-eval-after-load 'elisp-mode
      (add-hook 'emacs-lisp-mode-hook #'elisp-slime-nav-mode))

    (with-eval-after-load 'ielm
      (add-hook 'ielm-mode-hook #'elisp-slime-nav-mode)))
#+END_SRC
*** nameless
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "Malabarba/Nameless"))

  (with-delayed-execution
    (message "Install nameless...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/Nameless"))

    (autoload-if-found '(nameless-mode) "nameless" nil t)

    (with-eval-after-load 'elisp-mode
      (add-hook 'emacs-lisp-mode-hook #'nameless-mode))

    (with-eval-after-load 'ielm
      (add-hook 'ielm-mode-hook #'nameless-mode)))
#+END_SRC
*** elisp-refs
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Wilfred/elisp-refs"))

  (with-delayed-execution
    (message "Install elisp-refs...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/elisp-refs"))

    (autoload-if-found '() "elisp-refs" nil t))
#+end_src
*** highlight-quoted
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Fanael/highlight-quoted"))

  (with-delayed-execution
    (message "Install highlight-quoted...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/highlight-quoted"))

    (autoload-if-found '(highlight-quoted-mode) "highlight-quoted" nil t)

    (with-eval-after-load 'elisp-mode
      (add-hook 'emacs-lisp-mode-hook #'highlight-quoted-mode)))
#+end_src
*** highlight-defined
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Fanael/highlight-defined"))

  (with-delayed-execution
    (message "Install highlight-defined...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/highlight-defined"))
    (autoload-if-found '(highlight-defined-mode) "highlight-defined" nil t)

    (with-eval-after-load 'elisp-mode
      (add-hook 'emacs-lisp-mode-hook #'highlight-defined-mode)))
#+end_src
*** my/ielm-history
#+BEGIN_SRC emacs-lisp
  (with-delayed-execution
    (when (autoload-if-found '(my/ielm-history) "ielm" nil t))
    (defun my/ielm-history ()
      (interactive)
      (insert
       (completing-read
        "choice history: "
        (progn
          (let ((history nil)
                (comint-input-ring nil))
            (dotimes (index (ring-length comint-input-ring))
              (push (ring-ref comint-input-ring index) history))
            history))))))
#+END_SRC
** Clojure
*** anakondo
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "didibus/anakondo"))

  (with-delayed-execution
    (message "Install anakondo...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/anakondo"))

    (autoload-if-found '(anakondo-minor-mode) "anakondo" nil t)
    ;; (with-eval-after-load 'clojure-mode
    ;;   (add-hook 'clojure-mode-hook #'anakondo-minor-mode)
    ;;   (add-hook 'clojurescript-mode-hook #'anakondo-minor-mode)
    ;;   (add-hook 'clojurec-mode-hook #'anakondo-minor-mode))
    )
#+end_src
*** cider
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "clojure-emacs/parseclj")
    (el-clone :repo "clojure-emacs/parseedn")
    (el-clone :repo "clojure-emacs/cider"))

  (with-delayed-execution
    (message "Install cider...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/parseclj"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/parseedn"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/cider"))

    (autoload-if-found '(cider cider-format-buffer cider-switch-to-last-clojure-buffer) "cider" nil t)
    (autoload-if-found '(cider-doc) "cider-doc" nil t)

    ;; (add-hook 'before-save-hook #'cider-format-buffer t t)

    (with-eval-after-load 'cider-common
      (setq cider-special-mode-truncate-lines nil))

    (with-eval-after-load 'cider-mode
      (setq cider-font-lock-reader-conditionals nil)
      (setq cider-font-lock-dynamically '(macro core function var)))

    (with-eval-after-load 'cider-repl
      (setq cider-repl-buffer-size-limit 1000000)
      (setq cider-repl-wrap-history t)
      (setq cider-repl-history-size 10000)
      (setq cider-repl-tab-command #'indent-for-tab-command)
      (setq cider-repl-display-in-current-window t))

    (with-eval-after-load 'nrepl-client
      (setq nrepl-use-ssh-fallback-for-remote-hosts t)
      (setq nrepl-hide-special-buffers t))

    (with-eval-after-load 'cider-eval
      (setq cider-show-error-buffer nil)
      (setq cider-auto-select-error-buffer nil))

    (with-eval-after-load 'clojure-mode
      (define-key clojure-mode-map (kbd "C-c h") #'cider-doc)))
#+END_SRC
*** kibit-helper
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "brunchboy/kibit-helper"))

  (with-delayed-execution
    (message "Install kibit-helper...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/kibit-helper"))

    (autoload-if-found '(kibit kibit-current-file kibit-accept-proposed-change) "kibit-helper" nil t))
#+end_src
*** clj-refactor
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "clojure-emacs/clj-refactor.el"))

  (with-delayed-execution
    (message "Install clj-refactor...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/clj-refactor"))

    (autoload-if-found '(clj-refactor-mode cljr-add-keybindings-with-prefix) "clj-refactor" nil t)

    (add-hook 'clojure-mode-hook #'clj-refactor-mode)
    (cljr-add-keybindings-with-prefix "C-c C-m")

    (with-eval-after-load 'clj-refactor
      (setq cljr-suppress-middleware-warnings t)
      (setq cljr-hotload-dependencies t)))
#+end_src
*** inf-clojure
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "clojure-emacs/inf-clojure"))

  (with-delayed-execution
    (message "Install inf-clojure...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/inf-clojure"))

    (autoload-if-found '(inf-clojure) "inf-clojure" nil t))
#+end_src
** C/C++
*** clang-format
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/clang-format"))

  (with-delayed-execution
    (message "Install clang-format...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/clang-format"))

    (autoload-if-found '(clang-format-buffer) "clang-format" nil t)

    (add-hook 'before-save-hook #'(lambda ()
                                    (when (member major-mode '(c-mode c++-mode))
                                      (clang-format-buffer)))))
#+end_src
*** inferior-cling
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "brianqq/inferior-cling"))

  (with-delayed-execution
    (message "Install inferior-cling...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/inferior-cling")))
#+end_src
** JavaScript/TypeScript
*** js2-refactor
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "js-emacs/js2-refactor.el"))

  (with-delayed-execution
    (message "Install js2-refactor...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/js2-refactor"))

    (autoload-if-found '(js2-refactor-mode) "js2-refactor" nil t)

    (with-eval-after-load 'js2-refactor
      (setq js2r-use-strict t))

    (with-eval-after-load 'js2-mode
      (add-hook 'js2-mode-hook #'js2-refactor-mode))

    (with-eval-after-load 'typescript-mode
      (add-hook 'typescript-mode-hook #'js2-refactor-mode)))
#+END_SRC
*** TODO tree-sitter
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-tree-sitter/elisp-tree-sitter")
    (el-clone :repo "emacs-tree-sitter/tree-sitter-langs"))

  ;; (with-delayed-execution
  ;;   (message "Install tree-sitter...")
  ;;   (add-to-list 'load-path (locate-user-emacs-file "el-clone/elisp-tree-sitter/core"))
  ;;   (add-to-list 'load-path (locate-user-emacs-file "el-clone/elisp-tree-sitter/lisp"))
  ;;   (add-to-list 'load-path (locate-user-emacs-file "el-clone/tree-sitter-langs"))

  ;;   (autoload-if-found '(tree-sitter-mode) "tree-sitter" nil t)
  ;;   (autoload-if-found '(tree-sitter-require) "tree-sitter-load" nil t)
  ;;   (autoload-if-found '(tree-sitter-hl-mode tree-sitter-hl-add-patterns) "tree-sitter-hl" nil t)

  ;;   (when (require 'tree-sitter-langs)
  ;;     (tree-sitter-require 'tsx))

  ;;   (tree-sitter-hl-add-patterns 'tsx
  ;;     [(call_expression
  ;;       ;; styled.div``
  ;;       function: (member_expression
  ;;                  object: (identifier) @function.call
  ;;                  (.eq? @function.call "styled"))
  ;;       arguments: ((template_string) @property.definition
  ;;                   (.offset! @property.definition 0 1 0 -1)))
  ;;      (call_expression
  ;;       ;; styled(Component)``
  ;;       function: (call_expression
  ;;                  function: (identifier) @function.call
  ;;                  (.eq? @function.call "styled"))
  ;;       arguments: ((template_string) @property.definition
  ;;                   (.offset! @property.definition 0 1 0 -1)))])

  ;;   (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx))

  ;;   (with-eval-after-load 'typescript-mode
  ;;     (add-hook 'typescript-tsx-mode-hook #'tree-sitter-mode))

  ;;   (with-eval-after-load 'tree-sitter
  ;;     (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)))
#+end_src
** Ruby
*** robe
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "dgutov/robe"))

  (with-delayed-execution
    (message "Install robe...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/robe"))

    (autoload-if-found '(robe-mode inf-ruby-console-auto) "robe" nil t)

    (with-eval-after-load 'company
      (push 'company-robe company-backends))
    ;; (with-eval-after-load 'ruby-mode
    ;;   (add-hook 'ruby-mode-hook #'robe-mode))
    )
#+end_src
*** rubocop
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "rubocop/rubocop-emacs"))

  (with-delayed-execution
    (message "Install rubocop...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/rubocop-emacs"))

    (autoload-if-found '(rubocop-mode) "rubocop" nil t)

    (with-eval-after-load 'ruby-mode
      (add-hook 'ruby-mode-hook #'rubocop-mode)))
#+end_src
*** ruby-refactor
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "ajvargo/ruby-refactor"))

  (with-delayed-execution
    (message "Install ruby-refactor...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ruby-refactor"))

    (autoload-if-found '(ruby-refactor-mode-launch) "ruby-refactor" nil t)

    (with-eval-after-load 'ruby-mode
      (add-hook 'ruby-mode-hook #'ruby-refactor-mode-launch)))
#+END_SRC
*** inf-ruby
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "nonsequitur/inf-ruby"))

  (with-delayed-execution
    (message "Install inf-ruby...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/inf-ruby"))

    (autoload-if-found '(inf-ruby inf-ruby-minor-mode) "inf-ruby" nil t)

    (defun my/irb-history ()
      (interactive)
      (when (and (fboundp '-distinct)
                 (fboundp 's-lines)
                 (fboundp 'f-read-text))
        (insert
         (completing-read
          "choose history: "
          (mapcar #'list (-distinct (s-lines (f-read-text "~/.irb_history"))))))))

    (with-eval-after-load 'ruby-mode
      (add-hook 'ruby-mode-hook #'inf-ruby-minor-mode)))
#+END_SRC
*** yard-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "pd/yard-mode.el"))

  (with-delayed-execution
    (message "Install yard-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/yard-mode"))

    (autoload-if-found '(yard-mode) "yard-mode" nil t)

    (with-eval-after-load 'ruby-mode
      (add-hook 'ruby-mode-hook #'yard-mode)))
#+end_src
** SQL
*** sql-indent
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "alex-hhh/emacs-sql-indent"))

  (with-delayed-execution
    (message "Install sql-indent...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-sql-indent"))

    (autoload-if-found '(sqlind-setup sqlind-minor-mode) "sql-indent" nil t)

    (with-eval-after-load 'sql
      (add-hook 'sql-mode-hook #'sqlind-setup)
      (add-hook 'sql-mode-hook #'sqlind-minor-mode)))
#+END_SRC
** PHP
*** composer
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-php/composer.el"))

  (with-delayed-execution
    (message "Install composer...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/composer")))
#+end_src
*** php-runtime
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-php/php-runtime.el"))

  (with-delayed-execution
    (message "Install php-runtime...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/php-runtime"))

    (autoload-if-found '(php-runtime-expr php-runtime-eval) "php-runtime" nil t))
#+end_src
*** psysh
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-php/psysh.el"))

  (with-delayed-execution
    (message "Install psysh...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/psysh"))

    (autoload-if-found '(psysh psysh-doc) "psysh" nil t)

    (with-eval-after-load 'php-mode
      (define-key php-mode-map (kbd "C-c h") #'psysh-doc)))
#+end_src
*** laravel-tinker-repl
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/laravel-tinker-repl.el"))

  (with-delayed-execution
    (message "Install laravel-tinker-repl...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/laravel-tinker-repl"))

    (autoload-if-found '(laravel-tinker-repl) "laravel-tinker-repl" nil t)

    (with-eval-after-load 'laravel-tinker-repl
      (define-key laravel-tinker-repl-mode-map (kbd "TAB") #'completion-at-point)
      (define-key laravel-tinker-repl-mode-map (kbd "C-c C-c") #'laravel-tinker-repl-quit-or-cancel))

    (with-eval-after-load 'php-mode
      (define-key php-mode-map (kbd "C-c C-c") #'laravel-tinker-repl-send-line)
      (define-key php-mode-map (kbd "C-c C-z") #'laravel-tinker-repl-switch-to-repl)))
#+end_src
*** emacs-php-doc-block
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "moskalyovd/emacs-php-doc-block"))

  (with-delayed-execution
    (message "Install emacs-php-doc-block...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-php-doc-block"))

    (autoload-if-found '(php-doc-block) "php-doc-block" nil t))
#+end_src
*** phpstan
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-php/phpstan.el"))

  (with-delayed-execution
    (message "Install phpstan...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/phpstan"))

    (autoload-if-found '(phpstan-analyze-file phpstan-analyze-this-file) "phpstan" nil t)

    (defun my/flycheck-phpstan-setup ()
      "Setup Flycheck with PHPStan."
      (require 'flycheck-phpstan))

    (with-eval-after-load 'php-mode
      (add-hook 'php-mode-hook #'my/flycheck-phpstan-setup)))
#+end_src
*** phpunit
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "nlamirault/phpunit.el"))

  (with-delayed-execution
    (message "Install phpunit...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/phpunit"))

    (autoload-if-found '(phpunit-current-test
                         phpunit-current-class
                         phpunit-current-project
                         phpunit-group) "phpunit" nil t))
#+end_src
*** phpactor
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-php/phpactor.el"))

  (with-delayed-execution
    (message "Install phpactor...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/phpactor"))

    (autoload-if-found '(phpactor-install-or-update) "phpactor" nil t))
#+end_src
** Markdown
*** poly-markdown
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "polymode/polymode")
    (el-clone :repo "polymode/poly-markdown"))

  (with-delayed-execution
    (message "Install polymode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/polymode"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/poly-markdown"))

    (when (autoload-if-found '(poly-markdown-mode) "poly-markdown" nil t)
      (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))))
#+end_src
*** markdown-preview-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ancane/markdown-preview-mode"))

  (with-delayed-execution
    (message "Install markdown-preview-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/markdown-preview-mode"))

    (autoload-if-found '(markdown-preview-open-browser markdown-preview-mode) "markdown-preview-mode" nil t)

    (with-eval-after-load 'markdown-preview-mode
      (setq markdown-preview-stylesheets (list "http://thomasf.github.io/solarized-css/solarized-light.min.css"))))
#+end_src
** Fish
*** fish-repl
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/fish-repl.el"))

  (with-delayed-execution
    (message "Install fish-repl...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/fish-repl"))

    (autoload-if-found '(fish-repl) "fish-repl" nil t))
#+end_src
** NodeJS
*** nodejs-repl
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "abicky/nodejs-repl.el"))

  (with-delayed-execution
    (message "Install nodejs-repl...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nodejs-repl"))

    (autoload-if-found '(nodejs-repl
                         nodejs-repl-send-last-expression
                         nodejs-repl-send-line
                         nodejs-repl-send-region
                         nodejs-repl-send-buffer
                         nodejs-repl-load-file
                         nodejs-repl-switch-to-repl) "nodejs-repl" nil t)

    (with-eval-after-load 'js2-mode
      (define-key js2-mode-map (kbd "C-x C-e") #'nodejs-repl-send-last-expression)
      (define-key js2-mode-map (kbd "C-c C-j") #'nodejs-repl-send-line)
      (define-key js2-mode-map (kbd "C-c C-r") #'nodejs-repl-send-region)
      (define-key js2-mode-map (kbd "C-c C-c") #'nodejs-repl-send-buffer)
      (define-key js2-mode-map (kbd "C-c C-l") #'nodejs-repl-load-file)
      (define-key js2-mode-map (kbd "C-c C-z") #'nodejs-repl-switch-to-repl)))
#+end_src
** Haskell
*** hindent
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "mihaimaruseac/hindent"))

  (with-delayed-execution
    (message "Install hindent...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/hindent"))

    (autoload-if-found '(hindent-mode) "hindent" nil t)

    (with-eval-after-load 'haskell-mode
      (add-hook 'haskell-mode-hook #'hindent-mode)))
#+end_src
** Docker
*** docker-tramp
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-pe/docker-tramp.el"))

  (with-delayed-execution
    (message "Install docker-tramp...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/docker-tramp"))

    (autoload-if-found '() "docker-tramp" nil t))
#+end_src
** Web
*** emmet-mode
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (el-clone :repo "smihica/emmet-mode"))

  (with-delayed-execution
    (message "Install emmet-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emmet-mode"))

    (autoload-if-found '(emmet-mode) "emmet-mode" nil t)

    (with-eval-after-load 'html-mode
      (add-hook 'html-mode-hook #'emmet-mode))

    (with-eval-after-load 'web-mode
      (add-hook 'web-mode-hook #'emmet-mode))

    (with-eval-after-load 'css-mode
      (add-hook 'css-mode-hook #'emmet-mode))

    (with-eval-after-load 'nxml-mode
      (add-hook 'nxml-mode-hook #'emmet-mode))

    (with-eval-after-load 'web-php-blade-mode
      (add-hook 'web-php-blade-mode #'emmet-mode))

    (with-eval-after-load 'typescript-mode
      (add-hook 'typescript-tsx-mode-hook #'emmet-mode))

    (with-eval-after-load 'vue-mode
      (add-hook 'vue-mode-hook #'emmet-mode))

    (with-eval-after-load 'emmet-mode
      (define-key emmet-mode-keymap (kbd "C-j") nil)
      (define-key emmet-mode-keymap (kbd "M-j") #'emmet-expand-line)
      (setq emmet-self-closing-tag-style "")
      (setq emmet-indent-after-insert nil)))
#+END_SRC
** JSON
*** jq-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ljos/jq-mode"))

  (with-delayed-execution
    (message "Install jq-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/jq-mode"))

    (autoload-if-found '(jq-interactively) "jq-mode" nil t)

    (with-eval-after-load 'json-mode
      (define-key json-mode-map (kbd "C-c C-j") #'jq-interactively))

    (with-eval-after-load 'ob-babel
      (org-babel-do-load-languages 'org-babel-load-languages
                                   '((jq . t)))))
#+end_src
*** json-reformat
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "gongo/json-reformat"))

  (with-delayed-execution
    (message "Install json-reformat...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/json-reformat"))

    (autoload-if-found '(json-reformat-region) "json-reformat" nil t))
#+end_src
** Python
*** py-isort
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "paetzke/py-isort.el"))

  (with-delayed-execution
    (message "Install py-isort...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/py-isort"))

    (autoload-if-found '(py-isort-region
                         py-isort-buffer
                         py-isort-before-save) "py-isort" nil t))
#+end_src
* Elfeed
** elfeed
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "skeeto/elfeed"))

  (with-delayed-execution
    (message "Install elfeed...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/elfeed"))

    (defconst my/elfeed-search-filter "@1-week-ago +unread")

    (autoload-if-found '(elfeed) "elfeed" nil t)
    (global-set-key (kbd "C-x w") #'elfeed)

    (defun my/elfeed-ivy-filter ()
      (interactive)
      (let ((filtered-tag (ivy-completing-read "Choose Tags: " (elfeed-db-get-all-tags))))
        (setq elfeed-search-filter (concat my/elfeed-search-filter " +" filtered-tag))
        (elfeed-search-update--force)))

    (with-eval-after-load 'elfeed
      (define-key elfeed-search-mode-map (kbd "+") #'my/elfeed-ivy-filter)
      (setq elfeed-search-filter my/elfeed-search-filter)
      (setq browse-url-browser-function 'eww-browse-url))

    (with-eval-after-load 'elfeed-curl
      (setq elfeed-curl-max-connections 32)))
#+end_src
** elfeed-org
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "remyhonig/elfeed-org"))

  (with-delayed-execution
    (message "Install elfeed-org...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/elfeed-org"))

    (autoload-if-found '(elfeed-org) "elfeed-org" nil t)
    (elfeed-org)

    (with-eval-after-load 'elfeed-org
      (setq rmh-elfeed-org-files '("~/.ghq/github.com/takeokunn/private/elfeed.org"))
      (setq rmh-elfeed-org-auto-ignore-invalid-feeds t)))
#+end_src
* Eshell
** basic
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install eshell...")

    ;; configurations
    (with-eval-after-load 'esh-mode
      ;; hook
      (add-hook 'eshell-mode-hook #'(lambda () (display-line-numbers-mode -1)))

      ;; keymap
      (define-key eshell-mode-map (kbd "C-h") #'delete-backward-char)
      (define-key eshell-mode-map (kbd "M-p") #'eshell-previous-matching-input-from-input))

    (with-eval-after-load 'em-cmpl
      (setq eshell-cmpl-ignore-case t))

    (with-eval-after-load 'em-glob
      (setq eshell-glob-include-dot-files t)
      (setq eshell-glob-include-dot-dot nil)
      (setq eshell-glob-show-progress t))

    (with-eval-after-load 'em-hist
      (setq eshell-history-size 100000)
      (setq eshell-hist-ignoredups t))

    (with-eval-after-load 'em-alias
      (setq eshell-command-aliases-list '(("ll" "ls -la"))))

    (with-eval-after-load 'esh-cmd
      (setq eshell-prefer-lisp-functions nil))

    (with-eval-after-load 'em-term
      (setq eshell-destroy-buffer-when-process-dies t)))
#+end_src
** functions
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install eshell functions...")

    (defun eshell/ff (&rest args)
      "Open a file in Emacs with ARGS, Some habits die hard."
      (if (null args)
          (bury-buffer)
        (mapc #'find-file (mapcar #'expand-file-name (eshell-flatten-list (reverse args))))))

    (defun eshell/unpack (file &rest args)
      "Unpack FILE with ARGS."
      (let ((command (some (lambda (x)
                             (if (string-match-p (car x) file)
                                 (cadr x)))
                           '((".*\.tar.bz2" "tar xjf")
                             (".*\.tar.gz" "tar xzf")
                             (".*\.bz2" "bunzip2")
                             (".*\.rar" "unrar x")
                             (".*\.gz" "gunzip")
                             (".*\.tar" "tar xf")
                             (".*\.tbz2" "tar xjf")
                             (".*\.tgz" "tar xzf")
                             (".*\.zip" "unzip")
                             (".*\.Z" "uncompress")
                             (".*" "echo 'Could not unpack the file:'")))))
        (let ((unpack-command(concat command " " file " " (mapconcat 'identity args " "))))
          (eshell/printnl "Unpack command: " unpack-command)
          (eshell-command-result unpack-command))))

    (defun my/cat-with-syntax-highlight (filename)
      "Like cat(1) but with syntax highlighting."
      (let ((existing-buffer (get-file-buffer filename))
            (buffer (find-file-noselect filename)))
        (eshell-print
         (with-current-buffer buffer
           (if (fboundp 'font-lock-ensure)
               (font-lock-ensure)
             (with-no-warnings
               (font-lock-fontify-buffer)))
           (let ((contents (buffer-string)))
             (remove-text-properties 0 (length contents) '(read-only nil) contents)
             contents)))
        (unless existing-buffer
          (kill-buffer buffer))
        nil))

    (advice-add 'eshell/cat :override #'my/cat-with-syntax-highlight))
#+end_src
** prompt
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install eshell prompt...")

    (defun my/eshell-prompt ()
      (concat (abbreviate-file-name (eshell/pwd))
              (if (= (user-uid) 0) " # " " $ ")))

    (with-eval-after-load 'em-prompt
      (setq eshell-prompt-function #'my/eshell-prompt)))
#+end_src
** eshell-fringe-status
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ryuslash/eshell-fringe-status"))

  (with-delayed-execution
    (message "Install eshell-fringe-status...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/eshell-fringe-status"))

    (autoload-if-found '(eshell-fringe-status-mode) "eshell-fringe-status" nil t)

    (with-eval-after-load 'esh-mode
      (add-hook 'eshell-mode-hook #'eshell-fringe-status-mode)))
#+end_src
** esh-help
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "tom-tan/esh-help"))

  (with-delayed-execution
    (message "Install esh-help...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/esh-help"))

    (autoload-if-found '(setup-esh-help-eldoc) "esh-help" nil t)

    (setup-esh-help-eldoc))
#+end_src
** eshell-multiple
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/eshell-multiple"))

  (with-delayed-execution
    (message "Install eshell-multiple...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/eshell-multiple"))

    (autoload-if-found '(eshell-multiple-new
                         eshell-multiple-next
                         eshell-multiple-prev
                         eshell-multiple-clear-buffer
                         eshell-multiple-switch-buffer
                         eshell-multiple-dedicated-toggle
                         eshell-multiple-dedicated-open
                         eshell-multiple-dedicated-close)
                       "eshell-multiple" nil t)

    (defalias 'eshell/new #'eshell-multiple-new)
    (defalias 'eshell/next #'eshell-multiple-next)
    (defalias 'eshell/prev #'eshell-multiple-prev)
    (defalias 'eshell/clear #'eshell-multiple-clear-buffer)

    (with-eval-after-load 'esh-mode
      (define-key eshell-mode-map (kbd "C-l") #'eshell-multiple-clear-buffer)))
#+end_src
** eshell-z
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "xuchunyang/eshell-z"))

  (with-delayed-execution
    (message "Install eshell-z...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/eshell-z"))

    (autoload-if-found '(eshell-z) "eshell-z" nil t)

    (with-eval-after-load 'esh-mode
      (define-key eshell-mode-map (kbd "C-c C-q") #'eshell-z)))
#+end_src
** eshell-did-you-mean
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "xuchunyang/eshell-did-you-mean"))

  (with-delayed-execution
    (message "Install eshell-did-you-mean...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/eshell-did-you-mean"))

    (autoload-if-found '(eshell-did-you-mean-setup) "eshell-did-you-mean" nil t)

    (with-eval-after-load 'esh-mode
      (add-hook 'eshell-mode-hook #'eshell-did-you-mean-setup)))
#+end_src
** eshell-syntax-highlight
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "akreisher/eshell-syntax-highlighting"))

  (with-delayed-execution
    (message "Install eshell-syntax-highlighting...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/eshell-syntax-highlighting"))

    (autoload-if-found '(eshell-syntax-highlighting-global-mode) "eshell-syntax-highlighting" nil t)

    (eshell-syntax-highlighting-global-mode))
#+end_src
** emacs-fish-completion
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Ambrevar/emacs-fish-completion"))

  (with-delayed-execution
    (message "Install emacs-fish-completion")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-fish-completion"))

    (autoload-if-found '(global-fish-completion-mode) "fish-completion" nil t)

    (when (executable-find "fish")
      (global-fish-completion-mode)))
#+end_src
* Org Mode
** Basic
*** org
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    ;; keybind
    (define-key org-mode-map (kbd "C-c ,") #'org-insert-structure-template)
    (define-key org-mode-map (kbd "C-c C-,") #'org-insert-structure-template)

    ;; directory
    (setq org-directory "~/.ghq/github.com/takeokunn/private")

    ;; todo
    (setq org-todo-keywords '((sequence "TODO(t)" "TODAY(n)" "WAIT(w)" "|" "DONE(d)")))

    ;; startup
    (setq org-startup-folded 'show3levels)
    (setq org-startup-truncated nil)
    (setq org-src-window-setup 'current-window)

    ;; archive
    (advice-add 'org-archive-subtree :before #'(lambda (&rest _) (remove-hook 'find-file-hooks #'view-mode)))
    (advice-add 'org-archive-subtree :after #'(lambda (&rest _) (add-hook 'find-file-hooks #'view-mode)))

    (setq org-agenda-files `(,(concat org-directory "/agenda") ,(concat org-directory "/archive")))
    (setq org-archive-location `,(format (expand-file-name "archive/%s.org::* Archived Tasks" org-directory)
                                         (format-time-string "%Y-%m-%d" (current-time))))

    ;; log
    (setq org-log-into-drawer t)
    (setq org-log-done 'time))
#+END_SRC
*** org-clock
#+begin_src emacs-lisp
  (with-eval-after-load 'org-clock
    (add-hook 'org-mode-hook #'org-clock-load)
    (add-hook 'kill-emacs-hook #'org-clock-save)

    (setq org-clock-out-remove-zero-time-clocks t)
    (setq org-clock-clocked-in-display 'mode-line))
#+end_src
*** org-list
#+begin_src emacs-lisp
  (with-eval-after-load 'org-list
    (setq org-list-allow-alphabetical t))
#+end_src
*** org-keys
#+begin_src emacs-lisp
  (with-eval-after-load 'org-keys
    (setq org-use-extra-keys t)
    (setq org-use-speed-commands t))
#+end_src
*** org-capture
#+begin_src emacs-lisp
  (with-delayed-execution
    (autoload-if-found '(org-capture) "org-capture" nil t)
    (global-set-key (kbd "C-c c") #'org-capture)

    (advice-add 'org-capture :before #'(lambda (&rest _) (remove-hook 'find-file-hooks #'view-mode)))
    (advice-add 'org-capture :after #'(lambda (&rest _) (add-hook 'find-file-hooks #'view-mode)))

    (with-eval-after-load 'org-capture
      (setq org-capture-use-agenda-date t)
      (setq org-capture-templates `(("t" "Todo" entry (file ,(expand-file-name "todo.org" org-directory))
                                     "* %?")
                                    ("m" "Memo" entry (file ,(expand-file-name "memo.org" org-directory))
                                     "* %?")
                                    ("j" "Journal" entry (file+olp+datetree ,(expand-file-name "journal.org" org-directory))
                                     "* %U\n%?\n%i\n")))))
#+end_src
*** org-id
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install org-id...")
    (autoload-if-found '(org-id-store-link) "org-id" nil t)
    (with-eval-after-load 'org-id
      (setq org-id-locations-file (expand-file-name ".org-id-locations" org-directory))
      (setq org-id-extra-files (append org-agenda-text-search-extra-files))
      (setq org-id-link-to-org-use-id t)))
#+end_src
*** org-crypt
#+begin_src emacs-lisp
  (with-delayed-execution
    (autoload-if-found '(org-encrypt-entry org-decrypt-entry org-crypt-use-before-save-magic) "org-crypt" nil t)
    (org-crypt-use-before-save-magic)
    (with-eval-after-load 'org-crypt
      (setq org-crypt-key nil)
      (setq org-tags-exclude-from-inheritance '("crypt"))))
#+end_src
*** org-journal
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "bastibe/org-journal"))

  (with-delayed-execution
    (message "Install org-journal...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-journal"))

    (with-eval-after-load 'org-journal
      (setq org-journal-dir (expand-file-name "journal" org-directory))
      (setq org-journal-start-on-weekday 7)
      (setq org-journal-prefix-key "C-c j")))
#+end_src
*** org-generate
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "conao3/org-generate.el"))

  (with-delayed-execution
    (message "Install org-generate...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-generate"))

    (autoload-if-found '(org-generate) "org-generate" nil t))
#+end_src
*** org-pomodoro
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "marcinkoziej/org-pomodoro"))

  (with-delayed-execution
    (message "Install org-pomodoro...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-pomodoro"))

    (autoload-if-found '(org-pomodoro) "org-pomodoro" nil t))
#+end_src
*** org-view-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "amno1/org-view-mode"))

  (with-delayed-execution
    (message "Install org-view-mode...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-view-mode"))

    (autoload-if-found '(org-view-mode) "org-view-mode" nil t))
#+end_src
*** org-random-todo
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "unhammer/org-random-todo"))

  (with-delayed-execution
    (message "Install org-random-todo...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-random-todo"))

    (autoload-if-found '(org-random-todo org-random-todo-goto-current) "org-random-todo" nil t))
#+end_src
*** org-projectile
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "IvanMalison/org-projectile"))

  (with-delayed-execution
    (message "Install org-projectile...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-projectile"))

    (autoload-if-found '(org-projectile-todo-files
                         org-projectile-project-todo-completing-read)
                       "org-projectile" nil t)

    (global-set-key (kbd "C-c n p") #'org-projectile-project-todo-completing-read)

    (with-eval-after-load 'org
      (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))))
#+end_src
*** org-dashboard
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "bard/org-dashboard"))

  (with-delayed-execution
    (message "Install org-dashboard...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-dashboard"))

    (autoload-if-found '(org-dashboard-display) "org-dashboard" nil t))
#+end_src
*** org-volume
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "akirak/org-volume"))

  (with-delayed-execution
    (message "Install org-volume...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-volume"))

    (autoload-if-found '(org-volume-update-entry-from-dblock) "org-volume" nil t))
#+end_src
*** org-ql
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "alphapapa/org-ql"))

  (with-delayed-execution
    (message "Install org-ql...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-ql"))
    (autoload-if-found '(org-ql-query org-ql-select) "org-ql" nil t))
#+end_src
** Theme
*** org-faces
#+begin_src emacs-lisp
  (with-eval-after-load 'org-faces
    (setq org-link '(t (:foreground "#ebe087" :underline t))))
#+end_src
*** org-superstar
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "integral-dw/org-superstar-mode"))

  (with-delayed-execution
    (message "Install org-superstar...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-superstar-mode"))

    (autoload-if-found '(org-superstar-mode) "org-superstar")

    (with-eval-after-load 'org
      (add-hook 'org-mode-hook #'org-superstar-mode))

    (with-eval-after-load 'org-superstar
      (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿"))
      (setq org-superstar-leading-bullet " ")))
#+end_src
** Content
*** toc-org
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "snosov1/toc-org"))

  (with-delayed-execution
    (message "Install toc-org...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/toc-org"))

    (autoload-if-found '() "toc-org" nil t))
#+end_src
** Presentation
*** org-tree-slide
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takaxp/org-tree-slide"))

  (with-delayed-execution
    (message "Install org-tree-slide...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-tree-slide"))

    (autoload-if-found '(org-tree-slide-mode org-tree-slide-skip-done-toggle) "org-tree-slide" nil t)

    (with-eval-after-load 'org-tree-slide
      (setq org-tree-slide-skip-outline-level 4)))
#+end_src
** Org Link
*** org-link
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install ol...")
    (autoload-if-found '(org-store-link) "ol" nil t)
    (global-set-key (kbd "C-c l") #'org-store-link)
    (with-eval-after-load 'ol
      (setq org-link-file-path-type 'relative)))
#+end_src
*** org-link-beautify
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/org-link-beautify"))

  (with-delayed-execution
    (message "Install org-link-beautify...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-link-beautify"))

    (autoload-if-found '(org-link-beautify-mode) "org-link-beautify" nil t)

    ;; (with-eval-after-load 'org
    ;;   (add-hook 'org-mode-hook #'org-link-beautify-mode))
    )
#+end_src
*** orgit
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magit/orgit"))

  (with-delayed-execution
    (message "Install orgit...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/orgit"))

    (autoload-if-found '(orgit-store-link) "orgit" nil t)

    (with-eval-after-load 'magit
      (define-key magit-mode-map [remap org-store-link] #'orgit-store-link)))
#+end_src
** Org Agenda
*** Basic
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install org-agenda...")
    (autoload-if-found '(org-agenda) "org-agenda" nil t)
    (global-set-key (kbd "C-c a") #'org-agenda)

    (with-eval-after-load 'org-agenda
      (setq org-agenda-span 'day)
      (setq org-agenda-start-on-weekday 1)
      (setq org-agenda-todo-ignore-with-date t)))
#+end_src
*** org-super-agenda
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "alphapapa/org-super-agenda"))

  (with-delayed-execution
    (message "Install org-super-agenda...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-super-agenda"))

    (autoload-if-found '(org-super-agenda-mode) "org-super-agenda" nil t)

    (org-super-agenda-mode)

    (with-eval-after-load 'org-super-agenda
      (setq org-super-agenda-groups '((:log t)
                                      (:auto-group t)
                                      (:name "Today List..." :scheduled today)
                                      (:name "Due Today List..." :deadline today)
                                      (:name "Overdue List..." :deadline past)
                                      (:name "Due Soon List" :deadline future)
                                      (:name "TODO List..." :todo "TODO")
                                      (:name "WAIT List..." :todo "WAIT")
                                      (:name "DONE List..." :todo "DONE")))))
#+end_src
*** org-hyperscheduler
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "dmitrym0/org-hyperscheduler"))

  (with-delayed-execution
    (message "Install org-hyperscheduler...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-hyperscheduler"))

    (autoload-if-found '(org-hyperscheduler-open) "org-hyperscheduler" nil t))
#+end_src
** Org External Tools
*** org-redmine
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "gongo/org-redmine"))

  (with-delayed-execution
    (message "Install org-redmine...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-redmine"))
    (autoload-if-found '(org-redmine-get-issue) "org-redmine" nil t)

    (with-eval-after-load 'org-redmine
      (setq org-redmine-template-header "[#%i%] %s%")
      (setq org-redmine-template-property '(("project_name" . "%p_n%")))))
#+end_src
*** org-ai
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "rksm/org-ai"))

  (with-delayed-execution
    (message "Install org-ai...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-ai"))
    (autoload-if-found '(org-ai-mode) "org-ai" nil t)

    (with-eval-after-load 'org
      ;; config
      (add-to-list 'org-structure-template-alist '("A" . "ai"))

      ;; hook
      (add-hook 'org-mode-hook #'org-ai-mode))

    (with-eval-after-load 'org-ai
      ;; config
      (setq org-ai-default-max-tokens 1000)))

  (defun org-edit-special (&optional arg)
    "Call a special editor for the element at point.
  When at a table, call the formula editor with `org-table-edit-formulas'.
  When in a source code block, call `org-edit-src-code'.
  When in a fixed-width region, call `org-edit-fixed-width-region'.
  When in an export block, call `org-edit-export-block'.
  When in a comment block, call `org-edit-comment-block'.
  When in a LaTeX environment, call `org-edit-latex-environment'.
  When at an INCLUDE, SETUPFILE or BIBLIOGRAPHY keyword, visit the included file.
  When at a footnote reference, call `org-edit-footnote-reference'.
  When at a planning line call, `org-deadline' and/or `org-schedule'.
  When at an active timestamp, call `org-time-stamp'.
  When at an inactive timestamp, call `org-time-stamp-inactive'.
  On a link, call `ffap' to visit the link at point.
  Otherwise, return a user error."
    (interactive "P")
    (let ((element (org-element-at-point)))
      (barf-if-buffer-read-only)
      (pcase (org-element-type element)
        (`src-block
         (if (not arg) (org-edit-src-code)
           (let* ((info (org-babel-get-src-block-info))
                  (lang (nth 0 info))
                  (params (nth 2 info))
                  (session (cdr (assq :session params))))
             (if (not session) (org-edit-src-code)
               ;; At a source block with a session and function called
               ;; with an ARG: switch to the buffer related to the
               ;; inferior process.
               (switch-to-buffer
                (funcall (intern (concat "org-babel-prep-session:" lang))
                         session params))))))
        (`keyword
         (unless (member (org-element-property :key element)
                         '("BIBLIOGRAPHY" "INCLUDE" "SETUPFILE"))
           (user-error "No special environment to edit here"))
         (let ((value (org-element-property :value element)))
           (unless (org-string-nw-p value) (user-error "No file to edit"))
           (let ((file (and (string-match "\\`\"\\(.*?\\)\"\\|\\S-+" value)
                            (or (match-string 1 value)
                                (match-string 0 value)))))
             (when (org-url-p file)
               (user-error "Files located with a URL cannot be edited"))
             (org-link-open-from-string
              (format "[[%s]]" (expand-file-name file))))))
        (`table
         (if (eq (org-element-property :type element) 'table.el)
             (org-edit-table.el)
           (call-interactively 'org-table-edit-formulas)))
        ;; Only Org tables contain `table-row' type elements.
        (`table-row (call-interactively 'org-table-edit-formulas))
        (`example-block (org-edit-src-code))
        (`export-block (org-edit-export-block))
        (`comment-block (org-edit-comment-block))
        (`fixed-width (org-edit-fixed-width-region))
        (`latex-environment (org-edit-latex-environment))
        (`planning
         (let ((proplist (cadr element)))
           (mapc #'call-interactively
                 (remq nil
                       (list
                        (when (plist-get proplist :deadline) #'org-deadline)
                        (when (plist-get proplist :scheduled) #'org-schedule))))))
        (`paragraph (org-edit-export-block))
        (_
         ;; No notable element at point.  Though, we may be at a link or
         ;; a footnote reference, which are objects.  Thus, scan deeper.
         (let ((context (org-element-context element)))
           (pcase (org-element-type context)
             (`footnote-reference (org-edit-footnote-reference))
             (`inline-src-block (org-edit-inline-src-code))
             (`latex-fragment (org-edit-latex-fragment))
             (`timestamp (if (eq 'inactive (org-element-property :type context))
                             (call-interactively #'org-time-stamp-inactive)
                           (call-interactively #'org-time-stamp)))
             (`link (call-interactively #'ffap))
             (_ (user-error "No special environment to edit here"))))))))
#+end_src
** Org Babel
*** org-babel
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install ob-babel...")
    (autoload-if-found '(org-babel-do-load-languages) "org" nil t)

    (with-eval-after-load 'ob-core
      (setq org-confirm-babel-evaluate nil))

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((awk . t)
                                   (C . t)
                                   (R . t)
                                   (clojure . t)
                                   (emacs-lisp . t)
                                   (haskell . t)
                                   (java . t)
                                   (js . t)
                                   (lisp . t)
                                   (makefile . t)
                                   (perl . t)
                                   (plantuml . t)
                                   (python . t)
                                   (ruby . t)
                                   (scheme . t)
                                   (shell . t)
                                   (sql . t))))
#+end_src
*** ob-async
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "astahlman/ob-async"))

  (with-delayed-execution
    (message "Install ob-async...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ob-async"))

    (autoload-if-found '(ob-async-org-babel-execute-src-block) "ob-async" nil t)

    (defalias 'org-babel-execute-src-block:async 'ob-async-org-babel-execute-src-block))
#+end_src
*** ob-fish
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/ob-fish"))

  (with-delayed-execution
    (message "Install ob-fish...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ob-fish"))

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((fish . t))))
#+end_src
*** ob-rust
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "micanzhang/ob-rust"))

  (with-delayed-execution
    (message "Install ob-rust...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ob-rust"))

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((rust . t))))
#+end_src
*** ob-go
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "pope/ob-go"))

  (with-delayed-execution
    (message "Install ob-go...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ob-go"))

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((go . t))))
#+end_src
*** ob-typescript
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "lurdan/ob-typescript"))

  (with-delayed-execution
    (message "Install ob-typescript...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ob-typescript"))

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((typescript . t))))
#+end_src
*** ob-php
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Sasanidas/ob-php"))

  (with-delayed-execution
    (message "Install ob-php...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ob-php"))

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((php . t))))
#+end_src
*** ob-phpstan
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/ob-phpstan"))

  (with-delayed-execution
    (message "Install ob-phpstan...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ob-phpstan"))

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((phpstan . t))))
#+end_src
*** ob-http
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "zweifisch/ob-http"))

  (with-delayed-execution
    (message "Install ob-http...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ob-http"))

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((http . t))))
#+end_src
*** ob-mermaid
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "arnm/ob-mermaid"))

  (with-delayed-execution
    (message "Install ob-mermaid...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ob-mermaid"))

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((mermaid . t))))
#+end_src
** Org Publish
*** ox-html
#+begin_src emacs-lisp
  (with-eval-after-load 'ox-html
    (setq org-html-head-include-default-style nil)
    (setq org-html-head-include-scripts nil)
    (setq org-html-doctype "html5")
    (setq org-html-coding-system 'utf-8-unix))
#+end_src
*** ox-gfm
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "larstvei/ox-gfm"))

  (with-delayed-execution
    (message "Install ox-gfm...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ox-gfm"))

    (autoload-if-found '(org-gfm-export-as-markdown
                         org-gfm-convert-region-to-md
                         org-gfm-export-to-markdown
                         org-gfm-publish-to-gfm) "ox-gfm" nil t))
#+end_src
*** ox-zenn
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "conao3/ox-zenn.el"))

  (with-delayed-execution
    (message "Install ox-zenn...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ox-zenn"))

    (autoload-if-found '(org-zenn-export-as-markdown
                         org-zenn-export-to-markdown
                         org-zenn-publish-to-markdown
                         org-zenn-convert-region-to-md) "ox-zenn" nil t))
#+end_src
*** ox-hatena
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "zonkyy/ox-hatena"))

  (with-delayed-execution
    (message "Install ox-hatena...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ox-hatena"))

    (autoload-if-found '(org-hatena-export-as-hatena
                         org-hatena-export-to-hatena
                         org-hatena-export-to-hatena-and-open) "ox-hatena" nil t))
#+end_src
*** ox-qmd
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "0x60df/ox-qmd"))

  (with-delayed-execution
    (message "Install ox-qmd...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ox-qmd"))

    (autoload-if-found '(org-qmd-export-as-markdown
                         org-qmd-convert-region-to-md
                         org-qmd-export-to-markdown) "ox-qmd" nil t))
#+end_src
*** ox-hugo
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "kaushalmodi/ox-hugo"))

  (with-delayed-execution
    (message "Install ox-hugo...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ox-hugo"))

    (autoload-if-found '(org-hugo-export-as-md
                         org-hugo-export-to-md
                         org-hugo-export-wim-to-md
                         org-hugo-debug-info) "ox-hugo" nil t)

    (with-eval-after-load 'ox-hugo
      (setq org-hugo-auto-set-lastmod t)))
#+end_src
** Org Roam
*** el-clone
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "org-roam/org-roam"
              :load-paths `(,(locate-user-emacs-file "el-clone/org-roam/extensions"))))
#+end_src
*** basic
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install org-roam...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-roam"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-roam/extensions"))

    (autoload-if-found '(org-roam-graph) "org-roam" nil t)
    (global-set-key (kbd "C-c n g") #'org-roam-graph)

    (with-eval-after-load 'org-roam
      (setq org-roam-directory `,(concat (s-trim-right (shell-command-to-string "ghq root"))
                                         "/github.com/takeokunn/blog"))))
#+end_src
*** org-roam-mode
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install org-roam-mode...")
    (autoload-if-found '(org-roam-buffer-toggle) "org-roam-mode" nil t)
    (global-set-key (kbd "C-c n l") #'org-roam-buffer-toggle))
#+end_src
*** org-roam-node
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install org-roam-node...")
    (autoload-if-found '(org-roam-node-find org-roam-node-insert) "org-roam-node" nil t)
    (global-set-key (kbd "C-c n f") #'org-roam-node-find)
    (global-set-key (kbd "C-c n i") #'org-roam-node-insert)
    (with-eval-after-load 'org-roam-node
      (setq org-roam-completion-everywhere t)))
#+end_src
*** org-roam-db
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install org-roam-db...")
    (autoload-if-found '(org-roam-db-autosync-enable) "org-roam-db" nil t)
    (org-roam-db-autosync-enable)
    (with-eval-after-load 'org-roam-db
      (setq org-roam-database-connector 'sqlite)
      (setq org-roam-db-gc-threshold (* 4 gc-cons-threshold))))
#+end_src
*** org-roam-capture
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install org-roam-capture...")
    (autoload-if-found '(org-roam-capture) "org-roam-capture" nil t)
    (global-set-key (kbd "C-c n c") #'org-roam-capture)
    (with-eval-after-load 'org-roam-capture
      (setq org-roam-capture-templates '(("f" "Fleeting(一時メモ)" plain "%?"
                                          :target (file+head "org/fleeting/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
                                          :unnarrowed t)
                                         ("l" "Literature(文献)" plain "%?"
                                          :target (file+head "org/literature/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
                                          :unnarrowed t)
                                         ("p" "Permanent(記事)" plain "%?"
                                          :target (file+head "org/permanent/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
                                          :unnarrowed t)
                                         ("d" "Diary(日記)" plain "%?"
                                          :target (file+head "org/diary/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
                                          :unnarrowed t)))))
#+end_src
*** org-roam-dailies
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install org-roam-dailies...")
    (autoload-if-found '(org-roam-dailies-map
                         org-roam-dailies-goto-today
                         org-roam-dailies-goto-yesterday
                         org-roam-dailies-goto-tomorrow
                         org-roam-dailies-capture-today
                         org-roam-dailies-goto-next-note
                         org-roam-dailies-goto-previous-note
                         org-roam-dailies-goto-date
                         org-roam-dailies-capture-date
                         org-roam-dailies-find-directory) "org-roam-dailies" nil t)

    (global-set-key (kbd "C-c n d") #'org-roam-dailies-map)
    (global-set-key (kbd "C-c n j") #'org-roam-dailies-goto-today)

    (with-eval-after-load 'org-roam-dailies
      ;; config
      (setq org-roam-dailies-directory "org/daily/")

      ;; keybind
      (define-key org-roam-dailies-map (kbd "d") #'org-roam-dailies-goto-today)
      (define-key org-roam-dailies-map (kbd "y") #'org-roam-dailies-goto-yesterday)
      (define-key org-roam-dailies-map (kbd "t") #'org-roam-dailies-goto-tomorrow)
      (define-key org-roam-dailies-map (kbd "n") #'org-roam-dailies-capture-today)
      (define-key org-roam-dailies-map (kbd "f") #'org-roam-dailies-goto-next-note)
      (define-key org-roam-dailies-map (kbd "b") #'org-roam-dailies-goto-previous-note)
      (define-key org-roam-dailies-map (kbd "c") #'org-roam-dailies-goto-date)
      (define-key org-roam-dailies-map (kbd "v") #'org-roam-dailies-capture-date)
      (define-key org-roam-dailies-map (kbd ".") #'org-roam-dailies-find-directory)))
#+end_src
*** org-roam-export
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install org-roam-export...")
    (autoload-if-found '(org-roam-export--org-html--reference) "org-roam-export" nil t)
    (advice-add 'org-html--reference :override #'org-roam-export--org-html--reference))
#+end_src
*** org-roam-graph
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install org-roam-graph...")
    (autoload-if-found '(org-roam-graph--open) "org-roam-graph" nil t))
#+end_src
*** org-roam-overlay
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install org-roam-overlay...")
    (autoload-if-found '(org-roam-overlay-mode) "org-roam-overlay" nil t)
    (with-eval-after-load 'org-roam-mode
      (add-hook 'org-roam-mode-hook #'org-roam-overlay-mode)))
#+end_src
*** org-roam-protocol
#+begin_src emacs-lisp
  (with-delayed-execution
    (message "Install org-roam-protocol...")
    (autoload-if-found '(org-roam-protocol-open-ref org-roam-protocol-open-node) "org-roam-protocol" nil t)
    (with-eval-after-load 'org-roam-protocol
      ;; alist
      (add-to-list 'org-protocol-protocol-alist '("org-roam-ref" :protocol "roam-ref" :function org-roam-protocol-open-ref))
      (add-to-list 'org-protocol-protocol-alist '("org-roam-node" :protocol "roam-node" :function org-roam-protocol-open-node))

      ;; config
      (setq org-roam-protocol-store-links t)))
#+end_src
*** org-roam-ui
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "org-roam/org-roam-ui"))

  (with-delayed-execution
    (message "Install org-roam-ui...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-roam-ui"))

    (autoload-if-found '(org-roam-ui-mode) "org-roam-ui" nil t)

    (with-eval-after-load 'org-roam-mode
      (add-hook 'org-roam-mode-hook #'org-roam-ui-mode))

    (with-eval-after-load 'org-roam-ui
      (setq org-roam-ui-sync-theme t)
      (setq org-roam-ui-follow t)
      (setq org-roam-ui-update-on-save t)
      (setq org-roam-ui-open-on-start t)))
#+end_src
*** org-roam-timestamps
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "tefkah/org-roam-timestamps"))

  (with-delayed-execution
    (message "Install org-roam-timestamps...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-roam-timestamps"))

    (autoload-if-found '(org-roam-timestamps-mode) "org-roam-timestamps" nil t)

    (org-roam-timestamps-mode)

    (with-eval-after-load 'org-roam-timestamps
      (setq org-roam-timestamps-remember-timestamps nil)))
#+end_src
*** org-roam-search-node-insert
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "natask/org-roam-search"))

  (with-delayed-execution
    (message "Install org-roam-search...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-roam-search"))

    (autoload-if-found '() "org-roam-search" nil t))
#+end_src
* EXWM
** exwm
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ch11ng/exwm"))
#+end_src
** exwm-edit
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "agzam/exwm-edit"))

  (when (string= system-type "gnu/linux")
    (with-delayed-execution
      (message "Install exwm-edit...")
      (add-to-list 'load-path (locate-user-emacs-file "el-clone/exwm-edit"))

      (autoload-if-found '(exwm-edit--compose-minibuffer) "exwm-edit" nil t)

      (exwm-input-set-key (kbd "C-c '") #'exwm-edit--compose-minibuffer)
      (exwm-input-set-key (kbd "C-c C-'") #'exwm-edit--compose-minibuffer)

      (with-eval-after-load 'exwm-edit
        (setq exwm-edit-bind-default-keys nil))))
#+end_src
** exwm-modeline
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "SqrtMinusOne/exwm-modeline"))

  (when (string= system-type "gnu/linux")
    (with-delayed-execution
      (message "Install exwm-modeline...")
      (add-to-list 'load-path (locate-user-emacs-file "el-clone/exwm-modeline"))

      (autoload-if-found '(exwm-modeline-mode) "exwm-modeline")

      (with-eval-after-load 'exwm-core
        (add-hook 'exwm-mode-hook #'exwm-modeline-mode))

      (with-eval-after-load 'exwm-modeline
        (setq exwm-modeline-short t))))
#+end_src
* MyFunc
** my/beginning-of-intendation
#+BEGIN_SRC emacs-lisp
  (defun my/beginning-of-intendation ()
    "move to beginning of line, or indentation"
    (interactive)
    (back-to-indentation))
#+END_SRC
** my/copy-buffer
#+begin_src emacs-lisp
  (defun my/copy-buffer ()
    (interactive)
    (save-excursion
      (mark-whole-buffer)
      (copy-region-as-kill (region-beginning) (region-end))))

  (defalias 'copy-buffer 'my/copy-buffer)
#+end_src
** my/ghq-get
#+begin_src emacs-lisp
  (defun my/ghq-get ()
    (interactive)
    (let ((url (read-string "url > ")))
      (message
       (shell-command-to-string
        (mapconcat #'shell-quote-argument
                   (list "ghq" "get" url)
                   " ")))))

  (defalias 'ghq-get 'my/ghq-get)
#+end_src
** my/gh-browse
#+begin_src emacs-lisp
  (defun my/gh-browse ()
    (interactive)
    (message
     (shell-command-to-string
      (mapconcat #'shell-quote-argument
                 (list "gh" "browse")
                 " "))))

  (defalias 'gh-browse 'my/gh-browse)
#+end_src
** my/indent-all
#+begin_src emacs-lisp
  (defun my/indent-buffer ()
    (interactive)
    (save-excursion
      (mark-whole-buffer)
      (indent-region (region-beginning) (region-end))))

  (defalias 'indent-buffer 'my/indent-buffer)
#+end_src
** my/move-line
#+begin_src emacs-lisp
  (defun my/move-line (arg)
    (interactive)
    (let ((col (current-column)))
      (unless (eq col 0)
        (move-to-column 0))
      (save-excursion
        (forward-line)
        (transpose-lines arg))
      (forward-line arg)))

  (defun my/move-line-down ()
    (interactive)
    (my/move-line 1))

  (defun my/move-line-up ()
    (interactive)
    (my/move-line -1))

  (global-set-key (kbd "M-N") #'my/move-line-down)
  (global-set-key (kbd "M-P") #'my/move-line-up)
#+end_src
** my/reload-major-mode
#+BEGIN_SRC emacs-lisp
  (defun my/reload-major-mode ()
    "Reload current major mode."
    (interactive)
    (let ((current-mode major-mode))
      (fundamental-mode)
      (funcall current-mode)
      current-mode))
#+END_SRC
** my/toggle-kill-emacs
#+begin_src emacs-lisp
  (defvar my/kill-emacs-keybind-p t)

  (defun my/toggle-kill-emacs ()
    (interactive)
    (if my/kill-emacs-keybind-p
        (progn
          (message "C-x C-c save-buffers-kill-emacs OFF")
          (setq my/kill-emacs-keybind-p nil)
          (global-set-key (kbd "C-x C-c") nil))
      (progn
        (message "C-x C-c save-buffers-kill-emacs ON")
        (setq my/kill-emacs-keybind-p t)
        (global-set-key (kbd "C-x C-c") 'save-buffers-kill-emacs))))
#+end_src
** my/get-class-name-by-file-name
#+begin_src emacs-lisp
  (defun my/get-class-name-by-file-name ()
    (interactive)
    (insert
     (file-name-nondirectory
      (file-name-sans-extension (or (buffer-file-name)
                                    (buffer-name (current-buffer)))))))
#+end_src
** my/insert-clipboard
#+begin_src emacs-lisp
  (defun my/insert-clipboard (arg)
    (interactive "sstring: ")
    (kill-new arg))
#+end_src
** my/actionlint
#+begin_src emacs-lisp
  (defun my/actionlint ()
    (interactive)
    (shell-command-to-string "actionlint"))

  (defalias 'actionlint 'my/actionlint)
#+end_src
** my/build-info
#+begin_src emacs-lisp
  (defun my/build-info ()
    "Display build information in a buffer."
    (interactive)
    (switch-to-buffer (get-buffer-create "*Build info*"))
    (setq tab-width 4)
    (let ((buffer-read-only nil))
      (erase-buffer)
      (insert (format "GNU Emacs %s\nCommit:\t\t%s\nBranch:\t\t%s\n"
                      emacs-version
                      emacs-repository-version
                      emacs-repository-branch))
      (insert (format "System:\t\t%s\nDate:\t\t%s\n"
                      system-configuration
                      (format-time-string "%Y-%m-%d %T (%Z)" emacs-build-time)))
      (insert (format "Patch:\t\t%s ns-inline.patch\n"
                      (if (boundp 'mac-ime--cursor-type) "with" "without")))
      (insert (format "Features:\t%s\n" system-configuration-features))
      (view-mode)))
#+end_src
** my/current-ip-address
#+begin_src emacs-lisp
  (defun my/current-ip-address ()
    (interactive)
    (insert
     (shell-command-to-string "curl -s ifconfig.me")))
#+end_src
* Footer
** byte-compileする
#+begin_src emacs-lisp
  ;; (eval-when-compile
  ;;   (el-clone-byte-compile))
#+end_src
** Magic File Name を有効にする
#+begin_src emacs-lisp
  (setq file-name-handler-alist my/saved-file-name-handler-alist)
#+end_src
** profilerを終了する
#+begin_src emacs-lisp
  (when my/enable-profile
    (profiler-report)
    (profiler-stop))
#+end_src
