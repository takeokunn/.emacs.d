#+title: Configurations for GNU Emacs
#+author: takeounn
#+email: bararararatty@gmail.com
#+startup: content
#+startup: nohideblocks
#+options: num:t auto-id:t
#+setupfile: theme-readtheorg.setup
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

* はじめに
** 基本情報
   - repo: [[http://github.com/takeokunn/.emacs.d][takeokunn/.emacs.d]]
   - twitter: [[https://twitter.com/takeokunn][たけてぃ@takeokunn]]
** Dependency
   この emacs.dは以下のlibrary/packageに依存しています。
   - [[https://github.com/ggreer/the_silver_searcher][ggreer/the_silver_searcher]]
   - [[https://github.com/quicklisp/quicklisp-slime-helper][quicklisp/quicklisp-slime-helper]]
   - [[https://github.com/sbcl/sbcl][sbcl/sbcl]]
   - [[https://github.com/npm/cli][npm/cli]]
   - [[https://github.com/composer/composer][composer/composer]]
   - [[https://github.com/vterm/vterm][vterm/vterm]]
* 基本設定
** スタートアップメッセージを非表示
   url: [[http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_250.html][http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_250.html]]

   trueにすると最初のスタートアップメッセージ の表示を取りやめます。
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** 末尾のスペースを可視化する
   url: [[https://qiita.com/tadsan/items/df73c711f921708facdc][show-trailing-whitespaceは便利だが、見栄えが悪いこともある(qiita)]]

   特定のmode以外末尾のスペースを可視化するようにした。
   #+BEGIN_SRC emacs-lisp
     (setq-default show-trailing-whitespace t)

     (defun my/disable-trailing-mode-hook ()
       "Disable show tail whitespace."
       (setq show-trailing-whitespace nil))

     (defvar my/disable-trailing-modes
       '(comint-mode
         eshell-mode
         eww-mode
         term-mode
         twittering-mode
         minibuffer-inactive-mode))
     (mapc
      (lambda (mode)
        (add-hook (intern (concat (symbol-name mode) "-hook"))
                  'my/disable-trailing-mode-hook))
      my/disable-trailing-modes)
   #+END_SRC

** バーを非表示にする
   各種バーを非表示にした。
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (toggle-scroll-bar -1)
   #+END_SRC
** 行番号を表示する
   url: [[https://www.emacswiki.org/emacs/LineNumbers][https://www.emacswiki.org/emacs/LineNumbers]]
   #+BEGIN_SRC emacs-lisp
     (global-linum-mode t)
   #+END_SRC
** 自動生成ファイルを無効にする
   url: [[http://yohshiy.blog.fc2.com/blog-entry-319.html][http://yohshiy.blog.fc2.com/blog-entry-319.html]]
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
     (setq auto-save-list-file-prefix nil)
     (setq create-lockfiles nil)
   #+END_SRC
** C-kで行削除
   url: [[https://ayatakesi.github.io/emacs/24.5/Killing-by-Lines.html][https://ayatakesi.github.io/emacs/24.5/Killing-by-Lines.html]]
   #+BEGIN_SRC emacs-lisp
     (setq kill-whole-line t)
   #+END_SRC
** ビープ音を消す
   url: [[http://th.nao.ac.jp/MEMBER/zenitani/elisp-j.html#bell][http://th.nao.ac.jp/MEMBER/zenitani/elisp-j.html#bell]]
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC
** カッコの中をハイライトする
   url: [[http://syohex.hatenablog.com/entry/20110331/1301584188][http://syohex.hatenablog.com/entry/20110331/1301584188]]
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode t)
     (setq show-paren-style 'mixed)
   #+END_SRC
** カッコが自動的に作られるようにする
   url: [[https://www.emacswiki.org/emacs/ElectricPair][https://www.emacswiki.org/emacs/ElectricPair]]
   #+BEGIN_SRC emacs-lisp
     (electric-pair-mode 1)
   #+END_SRC
** ウィンドウの大きさを変える
   url: [[http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_184.html][http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_184.html]]
   #+BEGIN_SRC emacs-lisp
     (setq window-min-height 10)
   #+END_SRC
** time locale
   url: [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Locales.html][https://www.gnu.org/software/emacs/manual/html_node/elisp/Locales.html]]
   #+BEGIN_SRC emacs-lisp
     (setq system-time-locale "C")
   #+END_SRC
** rubyのマジックコードを非表示
   url: [[https://mat-aki.hatenadiary.org/entry/20090210/1234234027][https://mat-aki.hatenadiary.org/entry/20090210/1234234027]]
   #+BEGIN_SRC emacs-lisp
     (setq ruby-insert-encoding-magic-comment nil)
   #+END_SRC
** 起動時にerrorの時のみ表示する
   url: [[https://qiita.com/kakikubo/items/412715e378b03b79faff][https://qiita.com/kakikubo/items/412715e378b03b79faff]]
   #+BEGIN_SRC emacs-lisp
     (setq display-warning-minimum-level :error)
   #+END_SRC
** ナローイングを無効
   url: [[https://ayatakesi.github.io/emacs/26.1/html/Narrowing.html][https://ayatakesi.github.io/emacs/26.1/html/Narrowing.html]]
   #+BEGIN_SRC emacs-lisp
     (put 'narrow-to-region 'disabled nil)
   #+END_SRC
** npm-binにpathを通す
   url: [[https://emacs-jp.github.io/tips/environment-variable][https://emacs-jp.github.io/tips/environment-variable]]
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'exec-path "~/.npm-global/bin" t)
   #+END_SRC
** Font
   url: [[https://qiita.com/j8takagi/items/01aecdd28f87cdd3cd2c][https://qiita.com/j8takagi/items/01aecdd28f87cdd3cd2c]]
   #+BEGIN_SRC emacs-lisp
     (set-fontset-font t 'japanese-jisx0208 "TakaoPGothic")
     (add-to-list 'face-font-rescale-alist '(".*Takao P.*" . 0.85))
   #+END_SRC
* Package管理ツール
** Cask
   url: [[https://github.com/cask/cask][cask/cask]]

   package managerにはCaskを使っています。
   #+BEGIN_SRC emacs-lisp
     (require 'cask "~/.cask/cask.el")
     (cask-initialize)
  #+END_SRC
** use-package
   [[https://qiita.com/kai2nenobu/items/5dfae3767514584f5220][use-packageで可読性の高いinit.elを書く(qiita)]] を参考に書いていく。

   #+begin_src emacs-lisp
     ;; (use-package use-package :no-require t :ensure t :defer t)
   #+end_src
* org-mode設定
** TODO 基本設定
   #+BEGIN_SRC emacs-lisp
     (setq org-use-speed-commands t)
     (setq org-agenda-todo-ignore-with-date t)
     (setq org-directory "~/emacs/org")
     (setq org-agenda-files '("~/emacs/org/todo.org"))
     (setq org-capture-templates
           '(("t" "New TODO" entry
              (file+headline "~/emacs/org/todo.org" "TODO")
              "* TODO %?\n\n")
             ("m" "Memo" entry
              (file+headline "~/emacs/org/memo.org" "MEMO")
              "* %U%?\n%i\n%a")))
     (setq org-agenda-custom-commands
           '(("a" "Agenda and TODO"
              ((agenda "")
               (alltodo "")))))
     (put 'set-goal-column 'disabled nil)
  #+END_SRC
** TODO keybind
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
               (lambda ()
                 (define-key org-mode-map (kbd "C-m") nil)))
   #+END_SRC
* emms設定
** TODO 基本設定
   #+BEGIN_SRC emacs-lisp
     (use-package emms-setup)
     (use-package emms-i18n)
     (emms-standard)
     (emms-default-players)
     (setq emms-repeat-playlist t)
     (setq emms-player-list '(emms-player-mplayer))
     (setq emms-source-file-default-directory "~/emacs/emms/")
   #+END_SRC
* テーマ
** TODO neotree
   #+BEGIN_SRC emacs-lisp

     ;; neotree
     (use-package neotree
       :custom
       (neo-theme 'nerd2))

     (setq-default neo-show-hidden-files t)
     (setq neo-window-fixed-size nil)

     (defun neo-buffer--insert-fold-symbol (name &optional file-name)
       "Custom overriding function for the fold symbol.
         `NAME' decides what fold icon to use, while `FILE-NAME' decides
         what file icon to use."
       (or (and (equal name 'open)  (insert (all-the-icons-icon-for-dir file-name "down")))
           (and (equal name 'close) (insert (all-the-icons-icon-for-dir file-name "right")))
           (and (equal name 'leaf)  (insert (format "\t\t\t%s\t" (all-the-icons-icon-for-file file-name))))))

     (defun neo-buffer--insert-dir-entry (node depth expanded)
       (let ((node-short-name (neo-path--file-short-name node)))
         (insert-char ?\s (* (- depth 1) 2)) ; indent
         (when (memq 'char neo-vc-integration)
           (insert-char ?\s 2))
         (neo-buffer--insert-fold-symbol
          (if expanded 'open 'close) node)
         (insert-button (concat node-short-name "/")
                        'follow-link t
                        'face neo-dir-link-face
                        'neo-full-path node
                        'keymap neotree-dir-button-keymap)
         (neo-buffer--node-list-set nil node)
         (neo-buffer--newline-and-begin)))

     (defun neo-buffer--insert-file-entry (node depth)
       (let ((node-short-name (neo-path--file-short-name node))
             (vc (when neo-vc-integration (neo-vc-for-node node))))
         (insert-char ?\s (* (- depth 1) 2)) ; indent
         (when (memq 'char neo-vc-integration)
           (insert-char (car vc))
           (insert-char ?\s))
         (neo-buffer--insert-fold-symbol 'leaf node-short-name)
         (insert-button node-short-name
                        'follow-link t
                        'face (if (memq 'face neo-vc-integration)
                                  (cdr vc)
                                neo-file-link-face)
                        'neo-full-path node
                        'keymap neotree-file-button-keymap)
         (neo-buffer--node-list-set nil node)
         (neo-buffer--newline-and-begin)))

     (add-hook 'neotree-mode-hook
               (lambda ()
                 (with-current-buffer " *NeoTree*"
                   (setq-local linum-mode nil))))
   #+END_SRC
** TODO doom-theme
   #+BEGIN_SRC emacs-lisp
     ;; doom themes
     (use-package doom-themes
       :custom
       (doom-themes-enable-italic t)
       (doom-themes-enable-bold t)
       :custom-face
       (doom-modeline-bar ((t (:background "#6272a4"))))
       :config
       (load-theme 'tango-dark t)
       (doom-themes-neotree-config)
       (doom-themes-org-config))

     ;; doom modeline
     (use-package doom-modeline
       :custom
       (doom-modeline-buffer-file-name-style 'truncate-with-project)
       (doom-modeline-icon t)
       (doom-modeline-major-mode-icon nil)
       (doom-modeline-minor-modes nil)
       :hook
       (after-init . doom-modeline-mode)
       :config
       (line-number-mode 0)
       (column-number-mode 0))
  #+END_SRC
* Package
** hl-line
   url: [[https://www.emacswiki.org/emacs/HighlightCurrentLine][https://www.emacswiki.org/emacs/HighlightCurrentLine]]

   現在の行をハイライトするパッケージ。
   #+BEGIN_SRC emacs-lisp
     (use-package hl-line
       :defer t
       :config
       (set-face-background 'hl-line "#444642")
       (set-face-attribute 'hl-line nil :inherit nil)
       (defvar global-hl-line-timer-exclude-modes '(todotxt-mode))
       (defun global-hl-line-timer-function ()
         (unless (memq major-mode global-hl-line-timer-exclude-modes)
           (global-hl-line-unhighlight-all)
           (let ((global-hl-line-mode t))
             (global-hl-line-highlight))))
       (setq global-hl-line-timer
             (run-with-idle-timer 0.03 t 'global-hl-line-timer-function)))
   #+END_SRC
** hl-todo
   url: [[http://emacs.rubikitch.com/hl-todo/][http://emacs.rubikitch.com/hl-todo/]]

   TODOやFIXMEなどのキーワードをハイライトするパッケージ。
   #+BEGIN_SRC emacs-lisp
     (use-package hl-todo
       :defer t
       :init
       (global-hl-todo-mode 1)
       :config
       (setq hl-todo-keyword-faces
             '(("HOLD" . "#d0bf8f")
               ("TODO" . "#cc9393")
               ("NEXT" . "#dca3a3")
               ("THEM" . "#dc8cc3")
               ("PROG" . "#7cb8bb")
               ("OKAY" . "#7cb8bb")
               ("DONT" . "#5f7f5f")
               ("FAIL" . "#8c5353")
               ("DONE" . "#afd8af")
               ("FIXME" . "#cc9393")
               ("???"   . "#cc9393"))))
   #+END_SRC
** all-the-icons
   url: [[https://github.com/domtronn/all-the-icons.el][https://github.com/domtronn/all-the-icons.el]]

   アイコンを追加するパッケージ。dired-mode時のみ有効にしている。
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :defer t
       :init
       (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
   #+END_SRC
** all-the-icons-ivy
   url: [[https://github.com/asok/all-the-icons-ivy][https://github.com/asok/all-the-icons-ivy]]
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons-ivy
       :defer t
       :config
       (all-the-icons-ivy-setup))
   #+END_SRC
** editorconfig
   url: [[https://github.com/editorconfig/editorconfig-emacs][https://github.com/editorconfig/editorconfig-emacs]]

   editorconfigを有効にするパッケージ。
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :defer t
       :config
       (editorconfig-mode 1))
   #+END_SRC
** open-junk-file
   url: [[https://www.emacswiki.org/emacs/open-junk-file.el][https://www.emacswiki.org/emacs/open-junk-file.el]]

   使い捨てファイルを作成するパッケージ。
   #+BEGIN_SRC emacs-lisp
     (use-package open-junk-file
       :defer t
       :config
       (setq open-junk-file-format "~/.emacs.d/.junk/%Y-%m%d-%H%M%S."))
   #+END_SRC
** smartrep/multiple-cursors
   url: [[https://qiita.com/scalper/items/b9e357b3af071c930777][https://qiita.com/scalper/items/b9e357b3af071c930777]]

   複数cursorを便利に扱えるようにした。
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :init
       (require 'smartrep)
       (declare-function smartrep-define-key "smartrep")
       (bind-key "C-M-c" 'mc/edit-lines)
       (bind-key "C-M-r" 'mc/mark-all-in-region)
       (global-unset-key (kbd "C-t"))
       (smartrep-define-key global-map "C-t"
         '(("C-t" . 'mc/mark-next-like-this)
           ("n"   . 'mc/mark-next-like-this)
           ("p"   . 'mc/mark-previous-like-this)
           ("m"   . 'mc/mark-more-like-this-extended)
           ("u"   . 'mc/unmark-next-like-this)
           ("U"   . 'mc/unmark-previous-like-this)
           ("s"   . 'mc/skip-to-next-like-this)
           ("S"   . 'mc/skip-to-previous-like-this)
           ("*"   . 'mc/mark-all-like-this)
           ("d"   . 'mc/mark-all-like-this-dwim)
           ("i"   . 'mc/insert-numbers)
           ("o"   . 'mc/sort-regions)
           ("O"   . 'mc/reverse-regions))))
   #+END_SRC
** yasnippet
   url: [[https://github.com/joaotavora/yasnippet][https://github.com/joaotavora/yasnippet]]

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :defer t
       :diminish yas-minor-mode)

     (use-package yasnippet-snippets
       :config
       (yas-global-mode 1))
   #+END_SRC
** counsel
   url: [[https://github.com/abo-abo/swiper][https://github.com/abo-abo/swiper]]
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :defer t
       :config
       (setq ivy-use-virtual-buffers t)
       (setq counsel-ag-base-command "ag --nocolor --nogroup -u %s")
       (ivy-mode 1)
       (counsel-mode 1)
       (defun my/counsel-ag ()
         (interactive)
         (let ((symbol (thing-at-point 'symbol 'no-properties)))
           (counsel-ag symbol))))
   #+END_SRC
** recentf
   url: [[][]]
   #+BEGIN_SRC emacs-lisp
     (use-package recentf
       :defer t
       :config
       (setq recentf-max-saved-items 10000)
       (setq recentf-auto-cleanup 'never)
       (setq recentf-save-file "~/.emacs.d/.recentf")
       (setq recentf-exclude '(".recentf"))
       (recentf-mode 1))
   #+END_SRC
** TODO magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit)
   #+END_SRC
** TODO ivy-rich
   #+BEGIN_SRC emacs-lisp
     (use-package ivy-rich)
     (ivy-rich-mode 1)
   #+END_SRC
** TODO ace-window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window)
     (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
   #+END_SRC
** TODO dumb-jump
   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump)
     (setq dumb-jump-mode t)
     (setq dumb-jump-selector 'ivy)
   #+END_SRC
** TODO rg
   #+BEGIN_SRC emacs-lisp
     (use-package rg
         :hook ((rg-mode . wgrep-rg-setup)))
     (rg-enable-default-bindings)
   #+END_SRC
** TODO goto-addr
   #+BEGIN_SRC emacs-lisp
     (use-package goto-addr
      :hook ((prog-mode . goto-address-prog-mode)
                (text-mode . goto-address-mode)))
   #+END_SRC
** TODO swoop
   #+BEGIN_SRC emacs-lisp
     (use-package swoop)
     (setq swoop-minibuffer-input-dilay 0.4)

     (defun my/swoop-from-isearch ()
       (interactive)
       (let* ((symbol (thing-at-point 'symbol 'no-properties)))
         (swoop symbol)))
     (define-key ivy-mode-map (kbd "C-o") 'my/swoop-from-isearch)
   #+END_SRC
** TODO whitespace
   #+BEGIN_SRC emacs-lisp
     (use-package whitespace)
     (setq whitespace-style '(face tabs tab-mark spaces space-mark))
     (setq whitespace-display-mappings
           '((space-mark ?\u3000 [?\u25a1])
             (tab-mark ?\t [?\xBB ?\t] [?\\ ?\t])))
     (setq whitespace-space-regexp "\\(\u3000+\\)")
     (set-face-foreground 'whitespace-tab "#adff2f")
     (set-face-background 'whitespace-tab 'nil)
     (set-face-underline  'whitespace-tab t)
     (set-face-foreground 'whitespace-space "#7cfc00")
     (set-face-background 'whitespace-space 'nil)
     (set-face-bold-p 'whitespace-space t)
     (global-whitespace-mode 1)
   #+END_SRC
** TODO dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook))
   #+END_SRC
** TODO company
   #+BEGIN_SRC emacs-lisp
     (use-package company)
     (use-package company-glsl)
     (global-company-mode)
     (add-to-list 'company-backends 'company-glsl)
   #+END_SRC

** TODO git-gutter
   #+BEGIN_SRC emacs-lisp
     (use-package git-gutter-fringe)
     (global-git-gutter-mode +1)
   #+END_SRC
** TODO smooth-scroll
   #+BEGIN_SRC emacs-lisp
     (use-package smooth-scroll)
     (smooth-scroll-mode t)
   #+END_SRC

** TODO exec-path-from-shell
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell)
     (exec-path-from-shell-copy-envs '("PATH" "GEM_HOME"))
   #+END_SRC

** TODO ghc
   #+BEGIN_SRC emacs-lisp
     (autoload 'ghc-init "ghc" nil t)
     (autoload 'ghc-debug "ghc" nil t)
   #+END_SRC
** TODO hindent
   #+BEGIN_SRC emacs-lisp
     (add-hook 'haskell-mode-hook #'hindent-mode)
     (setq hindent-style "johan-tibell")
   #+END_SRC
** TODO tide
   #+BEGIN_SRC emacs-lisp
     (defun my/setup-tide-mode ()
       (interactive)
       (tide-setup)
       (tide-hl-identifier-mode +1))
     (add-hook 'typescript-mode-hook #'my/setup-tide-mode)
   #+END_SRC
** TODO js2-refactor
   #+BEGIN_SRC emacs-lisp
     (use-package js2-refactor)
     (add-hook 'js2-mode-hook #'js2-refactor-mode)
     (add-hook 'typescript-mode-hook #'js2-refactor-mode)

     (js2r-add-keybindings-with-prefix "C-c C-m")
   #+END_SRC
** TODO ivy-ghq
   #+BEGIN_SRC emacs-lisp
     (use-package ivy-ghq
       :commands (ivy-ghq-open)
       :bind
       ("M-o" . ivy-ghq-open-and-fzf)
       :custom
       (ivy-ghq-short-list t)
       :preface
       (defun ivy-ghq-open-and-fzf ()
         (interactive)
         (ivy-ghq-open)
         (counsel-fzf)))
   #+END_SRC
** TODO vterm
  #+BEGIN_SRC emacs-lisp
    ;; (use-package vterm)
    ;; (add-hook 'vterm-mode-hook #'(lambda ()
    ;;                             (setq show-trailing-whitespace nil)))
    ;; (define-key vterm-mode-map [mouse-1] nil)
    ;; (define-key vterm-mode-map [mouse-2] nil)
    ;; (define-key vterm-mode-map [mouse-3] nil)
    ;; (define-key vterm-mode-map [mouse-4] nil)
    ;; (define-key vterm-mode-map [mouse-5] nil)
    ;; (define-key vterm-mode-map [mouse-5] nil)
  #+END_SRC
** TODO omnisharp
   #+BEGIN_SRC emacs-lisp
     (use-package omnisharp)
     (define-key omnisharp-mode-map (kbd ".") 'omnisharp-add-dot-and-auto-complete)
     (add-hook 'csharp-mode-hook 'omnisharp-mode)
   #+END_SRC
* Lisp
** TODO slime
   #+BEGIN_SRC emacs-lisp
     (load (expand-file-name "~/quicklisp/slime-helper.el"))
     (setq inferior-lisp-program "sbcl")

     (use-package ac-slime)
     (add-hook 'slime-mode-hook 'set-up-slime-ac)
     (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
   #+END_SRC
** TODO paredit
   #+BEGIN_SRC emacs-lisp
     (use-package paredit)
     (autoload 'enable-paredit-mode "paredit" t)
     (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
     (add-hook 'lisp-mode-hook 'enable-paredit-mode)
     (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
     (add-hook 'scheme-mode-hook 'enable-paredit-mode)
     (eval-after-load "paredit"
         #'(define-key paredit-mode-map (kbd "C-c f") 'paredit-forward-slurp-sexp))
     (eval-after-load "paredit"
         #'(define-key paredit-mode-map (kbd "C-c b") 'paredit-forward-barf-sexp))
   #+END_SRC
** TODO hyperspec
   #+BEGIN_SRC emacs-lisp
     (setq common-lisp-hyperspec-root "~/quicklisp/HyperSpec/")

     (defun common-lisp-hyperspec (symbol-name)
         (interactive (list (common-lisp-hyperspec-read-symbol-name)))
         (let ((name (common-lisp-hyperspec--strip-cl-package
                         (downcase symbol-name))))
             (cl-maplist (lambda (entry)
                             (eww-open-file (concat common-lisp-hyperspec-root "Body/"
                                                (car entry)))
                             (when (cdr entry)
                                 (sleep-for 1.5)))
                 (or (common-lisp-hyperspec--find name)
                     (error "The symbol `%s' is not defined in Common Lisp"
                         symbol-name)))))

     (defun common-lisp-hyperspec-lookup-reader-macro (macro)
       (interactive
        (list
         (let ((completion-ignore-case t))
           (completing-read "Look up reader-macro: "
                            common-lisp-hyperspec--reader-macros nil t
                            (common-lisp-hyperspec-reader-macro-at-point)))))
       (eww-open-file
        (concat common-lisp-hyperspec-root "Body/"
                (gethash macro common-lisp-hyperspec--reader-macros))))

     (defun common-lisp-hyperspec-format (character-name)
       (interactive (list (common-lisp-hyperspec--read-format-character)))
       (cl-maplist (lambda (entry)
                     (eww-open-file (common-lisp-hyperspec-section (car entry))))
                   (or (gethash character-name
                                common-lisp-hyperspec--format-characters)
                       (error "The symbol `%s' is not defined in Common Lisp"
                              character-name))))

     (defadvice common-lisp-hyperspec (around common-lisp-hyperspec-around activate)
       (let ((buf (current-buffer)))
         ad-do-it
         (switch-to-buffer buf)
         (pop-to-buffer "*eww*")))

     (defadvice common-lisp-hyperspec-lookup-reader-macro (around common-lisp-hyperspec-lookup-reader-macro-around activate)
       (let ((buf (current-buffer)))
         ad-do-it
         (switch-to-buffer buf)
         (pop-to-buffer "*eww*")))

     (defadvice common-lisp-hyperspec-format (around common-lisp-hyperspec-format activate)
       (let ((buf (current-buffer)))
         ad-do-it
         (switch-to-buffer buf)
         (pop-to-buffer "*eww*")))
     (dolist (hook '(emacs-lisp-mode-hook
                     lisp-interaction-mode-hook
                     ielm-mode-hook))
       (add-hook hook 'elisp-slime-nav-mode))

     (define-key lisp-mode-map (kbd "C-c h") 'hyperspec-lookup)
   #+END_SRC
** TODO rainbow-dpelimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters)
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  #+END_SRC
** cider
   emacsからleiningenを扱えるようにするpackage
   公式document: [[https://docs.cider.mx/cider/index.html][https://docs.cider.mx/cider/index.html]]
   #+BEGIN_SRC emacs-lisp
     (use-package cider
       :ensure t)
   #+END_SRC
* LSP
** TODO lsp-mode
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode)
     (use-package lsp-java)
     (use-package lsp-haskell)

     ;; config
     (setq lsp-print-io nil)
     (setq lsp-trace nil)
     (setq lsp-print-performance nil)
     (setq lsp-auto-guess-root t)
     (setq lsp-document-sync-method 'incremental)
     (setq lsp-response-timeout 5)
     (setq lsp-ui-sideline-enable nil)
     (setq lsp-prefer-flymake nil)

     ;; hook
     (dolist (hook '(go-mode-hook
                     js2-mode-hook
                     css-mode-hook
                     scss-mode-hook
                     ruby-mode-hook
                     haskell-mode-hook
                     typescript-mode-hook
                     java-mode-hook
                     vue-mode-hook
                     sh-mode-hook
                     shell-mode-hook
                     php-mode-hook
                     python-mode-hook))
       (add-hook hook #'lsp))
     (add-hook 'lsp-mode-hook 'flycheck-mode)

     ;; keybind
     (define-key lsp-mode-map (kbd "C-c s") 'lsp-ui-sideline-mode)
     (define-key lsp-mode-map (kbd "M-.") #'lsp-ui-peek-find-definitions)
     (define-key lsp-mode-map (kbd "M-?") 'lsp-ui-peek-find-implementation)
   #+END_SRC
** TODO lsp-ui
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-ui)

     ;; config lsp-ui-doc
     (setq lsp-ui-doc-enable t)
     (setq lsp-ui-doc-max-height 15)

     ;; config lsp-ui-sideline
     (setq lsp-ui-sideline-enable nil)

     ;; config lsp-ui-imenu
     (setq lsp-ui-imenu-enable nil)

     ;; hook
     (add-hook 'lsp-mode-hook 'lsp-ui-mode)
   #+END_SRC
** TODO company-lsp
   #+BEGIN_SRC emacs-lisp
     (use-package company-lsp)
     (push 'company-lsp company-backends)
   #+END_SRC
** TODO dap-mode
   #+BEGIN_SRC emacs-lisp
     (use-package dap-php)
     (use-package dap-node)
     (use-package dap-ruby)
     (use-package dap-chrome)

     (dap-mode 1)
     (dap-ui-mode 1)

     (define-key lsp-mode-map (kbd "C-c d") 'dap-breakpoint-toggle)
  #+END_SRC
* Mode
** fundamental-mode
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.elc\\'" . fundamental-mode))
   #+END_SRC
** lisp-mode
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("Cask" . lisp-mode))
     (add-to-list 'auto-mode-alist '("\\.lemrc?$" . lisp-mode))
   #+END_SRC
** TODO web-mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode)
     (add-to-list 'auto-mode-alist '("\\.html?$" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.erb?$" . web-mode))
     (setq web-mode-auto-close-style t)
     (setq web-mode-tag-auto-close-style t)
   #+END_SRC
** TODO go-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'go-mode "go-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.go$" . go-mode))
   #+END_SRC
** TODO terraform-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'terraform-mode "terraform-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.tf$" . terraform-mode))
   #+END_SRC
** TODO markdown-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'markdown-mode "markdown-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
     (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))

     (define-key markdown-mode-map (kbd "C-j") nil)
     (define-key markdown-mode-map (kbd "C-m") nil)
   #+END_SRC
** TODO yaml-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'yaml-mode "yaml-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
   #+END_SRC
** TODO json-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'json-mode "json-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.json$" . json-mode))
   #+END_SRC
** TODO dockerfile-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'dockerfile-mode "dockerfile-mode" nil t)
     (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
   #+END_SRC
** TODO fish-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'fish-mode "fish-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.fish$" . fish-mode))
   #+END_SRC
** TODO dhall-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'dhall-mode "dhall-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.dhall$" . dhall-mode))
   #+END_SRC
** TODO js2-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'js2-mode "js2-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
     (add-hook 'js2-mode-hook #'js2-refactor-mode)
     (setq js2-skip-preprocessor-directives t)
   #+END_SRC
** TODO ruby-mode
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("Schemafile" . ruby-mode))
     (add-hook 'ruby-mode-hook 'ruby-refactor-mode-launch)
   #+END_SRC
** TODO typescript-mode
   #+BEGIN_SRC emacs-lisp
       ;; typescript
    (autoload 'typescript-mode "typescript-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.ts$" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
    (add-hook 'typescript-mode-hook #'js2-refactor-mode)
    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-equal "tsx" (file-name-extension buffer-file-name))
                  (my/setup-tide-mode))))

   #+END_SRC
** TODO slim-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'slim-mode "slim-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.slim$" . slim-mode))
   #+END_SRC
** TODO coffee-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'coffee-mode "coffee-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))
   #+END_SRC
** TODO scala-mode
   #+BEGIN_SRC emacs-lisp
       ;; scala
    (autoload 'scala-mode "scala-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))

   #+END_SRC
** TODO nginx-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'nginx-mode "nginx-mode" nil t)
     (add-to-list 'auto-mode-alist '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode))
   #+END_SRC
** TODO ssh-config-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'ssh-config-mode "ssh-config-mode" nil t)
     (add-to-list 'auto-mode-alist '("/path-to-your-ssh/config\\'" . ssh-config-mode))
   #+END_SRC
** TODO php-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'php-mode "php-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
   #+END_SRC
** TODO clojure-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'clojure-mode "clojure-mode" nil t)
     (autoload 'clojure-mode "clojurescript-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode))
     (add-to-list 'auto-mode-alist '("\\.cljs$" . clojurescript-mode))
   #+END_SRC
** TODO vue-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'vue-mode "vue-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.vue$" . vue-mode))
   #+END_SRC
** TODO glsl-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'glsl-mode "glsl-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.vsh$" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.fsh$" . glsl-mode))
   #+END_SRC
** TODO emmet-mode
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode)
     (autoload 'emmet-mode "emmet-mode" nil t)
     (add-hook 'web-mode-hook 'emmet-mode)
     (define-key emmet-mode-keymap (kbd "C-j") nil)
     (define-key emmet-mode-keymap (kbd "C-x i") 'emmet-expand-line)
   #+END_SRC
** TODO nyan-mode
   #+BEGIN_SRC emacs-lisp
     (use-package nyan-mode)
     (nyan-mode)
     (nyan-start-animation)
     (setq nyan-wavy-trail t)
   #+END_SRC
** TODO nameless-mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook #'nameless-mode)
   #+END_SRC
** TODO haskell-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'haskell-mode "haskell-mode" nil t)
     (autoload 'haskell-cabal "haskell-cabal" nil t)
     (add-to-list 'auto-mode-alist '("\\.hs$" . haskell-mode))
     (add-to-list 'auto-mode-alist '("\\.lhs$" . literate-haskell-mode))
     (add-to-list 'auto-mode-alist '("\\.cable$" . haskell-cabal-mode))

     (define-key haskell-indentation-mode-map (kbd "C-m") nil)
   #+END_SRC
** TODO gradle-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'gradle-mode "gradle-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.gradle$" . java-mode))
   #+END_SRC
** TODO cmake-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'cmake-mode "cmake-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.cmake$" . cmake-mode))
   #+END_SRC
** TODO toml-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'toml-mode "toml-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.toml$" . toml-mode))
   #+END_SRC
** TODO php-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'php-mode "php-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
   #+END_SRC
** TODO gitignore-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'gitignore-mode "gitignore-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.dockerignore$" . gitignore-mode))
   #+END_SRC
** TODO plantuml-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'plantuml-mode "plantuml-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.pu$" . plantuml-mode))
   #+END_SRC
** TODO processing-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'processing-mode "processing-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.pde$" . processing-mode))
     (setq processing-location "/opt/processing/processing-java")
     (setq processing-output-dir "/tmp")
  #+END_SRC
** TODO csharp-mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'csharp-mode "csharp-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.cs$" . csharp-mode))
   #+END_SRC

* MyFunc
** TODO my/beginning-of-intendation
   #+BEGIN_SRC emacs-lisp
     (defun my/beginning-of-intendation ()
       "move to beginning of line, or indentation"
       (interactive)
       (back-to-indentation))
   #+END_SRC
** TODO my/ido-recentf
   #+BEGIN_SRC emacs-lisp
     (defun my/ido-recentf ()
       (interactive)
       (find-file (ido-completing-read "Find recent file: " recentf-list)))
   #+END_SRC
** TODO my/suspend
   #+BEGIN_SRC emacs-lisp
     (defun my/suspend ()
       (interactive)
       (shell-command-to-string "systemctl suspend"))
   #+END_SRC
* Keybind
** TODO 基本設定
   #+BEGIN_SRC emacs-lisp
     (keyboard-translate ?\C-h ?\C-?)

     (progn
       (bind-key "C-a" 'my/beginning-of-intendation)
       (bind-key "C-z" 'undo)
       (bind-key "C-h" 'delete-backward-char)
       (bind-key "C-?" 'help-command)
       (bind-key "C-m" 'set-mark-command)
       (bind-key "C-q" 'neotree-toggle)
       (bind-key "C-x j" 'open-junk-file)
       (bind-key "C-c i" 'find-function)
       (bind-key "C-c c" 'org-capture)
       (bind-key "C-c a" 'org-agenda)
       (bind-key "C-x o" 'ace-window)
       (bind-key "C-x C-o" 'ace-window)
       (bind-key "C-x m" 'magit-status)
       (bind-key "C-c l" 'magit-blame)
       (bind-key "C-c j" 'counsel-git)
       (bind-key "C-c k" 'my/counsel-ag)
       (bind-key "C-x C-r" 'counsel-recentf)
       (bind-key "C-x C-f" 'counsel-find-file)
       (bind-key "M-x" 'counsel-M-x)
       (bind-key "M-g" 'google-this)
       (bind-key "C-x C-k" nil))
   #+END_SRC
** TODO emr
   #+BEGIN_SRC emacs-lisp
     (define-key prog-mode-map (kbd "M-RET") 'emr-show-refactor-menu)
   #+END_SRC
